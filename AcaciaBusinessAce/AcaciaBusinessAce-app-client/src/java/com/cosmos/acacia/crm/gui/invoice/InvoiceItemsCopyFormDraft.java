/*
 * InvoiceItemsCopyFormDraft.java
 *
 * Created on Вторник, 2008, Септември 2, 11:54
 */

package com.cosmos.acacia.crm.gui.invoice;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;

import com.cosmos.acacia.crm.bl.invoice.InvoiceListRemote;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.Invoice;
import com.cosmos.acacia.crm.data.InvoiceItem;
import com.cosmos.acacia.crm.data.SimpleProduct;
import com.cosmos.acacia.crm.data.WarehouseProduct;
import com.cosmos.acacia.crm.gui.purchaseorders.CopyItemsListPanel;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.SelectableListDialog;

/**
 * 
 * Created	:	01.10.2008
 * @author	Petar Milev
 *
 */
public class InvoiceItemsCopyFormDraft extends AcaciaPanel {

    private InvoiceItemListPanel invoiceItemsListPanel;
    private List<Invoice> invoices;

    /** Creates new form InsertFromDocumentForm 
     * @param invoices */
    public InvoiceItemsCopyFormDraft(BigInteger parentId, InvoiceItemListPanel invoiceItemsPanel, List<Invoice> invoices) {
        super(parentId);
        if ( invoiceItemsPanel==null )
            throw new IllegalArgumentException("cant be null: 'invoiceItemsPanel'");
        this.invoiceItemsListPanel = invoiceItemsPanel;
        this.invoices = invoices;
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBLabel1 = new com.cosmos.swingb.JBLabel();
        copySelectedButton = new com.cosmos.swingb.JBButton();
        copyAllButton = new com.cosmos.swingb.JBButton();
        closeButton = new com.cosmos.swingb.JBButton();
        invoicesCheckField = new com.cosmos.swingb.JBCheckBox();
        proformaInvoicesCheckField = new com.cosmos.swingb.JBCheckBox();
        salesOffersCheckField = new com.cosmos.swingb.JBCheckBox();
        jBLabel4 = new com.cosmos.swingb.JBLabel();
        documentField = new com.cosmos.acacia.gui.AcaciaComboBox();
        allPendingField = new com.cosmos.swingb.JBRadioButton();
        allReadioField = new com.cosmos.swingb.JBRadioButton();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        itemsToCopyTableHolder = new com.cosmos.swingb.JBTableHeader();
        invoiceItemsTableHolder = new com.cosmos.swingb.JBTableHeader();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(InvoiceItemsCopyFormDraft.class);
        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        copySelectedButton.setText(resourceMap.getString("copySelectedButton.text")); // NOI18N
        copySelectedButton.setName("copySelectedButton"); // NOI18N

        copyAllButton.setText(resourceMap.getString("copyAllButton.text")); // NOI18N
        copyAllButton.setName("copyAllButton"); // NOI18N

        closeButton.setIcon(resourceMap.getIcon("closeButton.icon")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        invoicesCheckField.setText(resourceMap.getString("invoicesCheckField.text")); // NOI18N
        invoicesCheckField.setName("invoicesCheckField"); // NOI18N

        proformaInvoicesCheckField.setText(resourceMap.getString("proformaInvoicesCheckField.text")); // NOI18N
        proformaInvoicesCheckField.setName("proformaInvoicesCheckField"); // NOI18N

        salesOffersCheckField.setText(resourceMap.getString("salesOffersCheckField.text")); // NOI18N
        salesOffersCheckField.setName("salesOffersCheckField"); // NOI18N

        jBLabel4.setText(resourceMap.getString("jBLabel4.text")); // NOI18N
        jBLabel4.setName("jBLabel4"); // NOI18N

        documentField.setName("documentField"); // NOI18N

        allPendingField.setText(resourceMap.getString("allPendingField.text")); // NOI18N
        allPendingField.setName("allPendingField"); // NOI18N

        allReadioField.setText(resourceMap.getString("allReadioField.text")); // NOI18N
        allReadioField.setName("allReadioField"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        itemsToCopyTableHolder.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("itemsToCopyTableHolder.border.title"))); // NOI18N
        itemsToCopyTableHolder.setName("itemsToCopyTableHolder"); // NOI18N

        invoiceItemsTableHolder.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("invoiceItemsTableHolder.border.title"))); // NOI18N
        invoiceItemsTableHolder.setName("invoiceItemsTableHolder"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(itemsToCopyTableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(copySelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(copyAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(allReadioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(allPendingField, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(invoicesCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(proformaInvoicesCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(salesOffersCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(documentField, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(655, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(invoiceItemsTableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoicesCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesOffersCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proformaInvoicesCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allPendingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allReadioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(documentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(itemsToCopyTableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copySelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copyAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(invoiceItemsTableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBRadioButton allPendingField;
    private com.cosmos.swingb.JBRadioButton allReadioField;
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.swingb.JBButton copyAllButton;
    private com.cosmos.swingb.JBButton copySelectedButton;
    private com.cosmos.acacia.gui.AcaciaComboBox documentField;
    private com.cosmos.swingb.JBTableHeader invoiceItemsTableHolder;
    private com.cosmos.swingb.JBCheckBox invoicesCheckField;
    private com.cosmos.swingb.JBTableHeader itemsToCopyTableHolder;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel4;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBCheckBox proformaInvoicesCheckField;
    private com.cosmos.swingb.JBCheckBox salesOffersCheckField;
    // End of variables declaration//GEN-END:variables
    
    private CopyItemsListPanel copyItemsListPanel;
    @Override
    protected void initData() {
        
        setDialogResponse(DialogResponse.CANCEL);
        
        //supplier
        //InvoicesListPanel listPanel = new InvoicesListPanel(getOrganizationDataObjectId());
        List<Invoice> invoices = getInvoicesList();

        //        bind(
//            bindGroup,
//            listPanel,
//            entity,
//            entProps.getPropertyDetails("supplier"),
//            "${recipient.displayName} - ${invoiceNumber}",
//            UpdateStrategy.READ_WRITE);
        
        copyItemsListPanel = new CopyItemsListPanel(null, new ArrayList<InvoiceItem>());
        copyItemsListPanel.setVisibleButtons(0);
        copyItemsListPanel.getDataTable().setSelectionMode(DefaultListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
        itemsToCopyTableHolder.add(copyItemsListPanel);
        
        invoiceItemsTableHolder.add(invoiceItemsListPanel);
        
        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        
        copySelectedButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCopySelectedButton();
            }
        });
        
        copyAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCopyAllButton();
            }
        });
    }

    protected void onCopyAllButton() {
    }


    Set<InvoiceItem> addedItems = new HashSet<InvoiceItem>();
    
    /**
     * 
     */
    @SuppressWarnings("unchecked")
    protected void onCopySelectedButton() {
        List<InvoiceItem> selectedItems = copyItemsListPanel.getDataTable().getSelectedRowObjects();
        if ( selectedItems==null || selectedItems.isEmpty() )
            return;
        
        boolean alreadyAdded = false;
        for (InvoiceItem invoiceItem : selectedItems) {
            if ( addedItems.contains(invoiceItem) ){
                alreadyAdded = true;
                break;
            }
        }
        
        try{
            if ( alreadyAdded ){
                if ( showAlreadyAddedWarning() ){
                    addItems(selectedItems);
                }
            }else{
                addItems(selectedItems);
            }
            
            setDialogResponse(DialogResponse.SAVE);
        }catch (Exception ex){
            handleBusinessException(ex);
        }
    }
    
    private InvoiceListRemote invoiceListRemote = getBean(InvoiceListRemote.class);

    private void addItems(List<InvoiceItem> items) {
        List<InvoiceItem> newItems = new ArrayList<InvoiceItem>();
        for (InvoiceItem invoiceItem : items) {
            InvoiceItem clonedItem = getClonedItemForInvoiceItem(invoiceItem);
            //add only the needed quantity (the quantity that is still not shipped)
            BigDecimal addQuantity = invoiceItem.getOrderedQuantity().subtract(invoiceItem.getShippedQuantity());
            clonedItem.setOrderedQuantity(clonedItem.getOrderedQuantity().add(addQuantity));
            newItems.add(clonedItem);
        }
        
        invoiceListRemote.saveInvoiceItems(newItems);
        invoiceItemsListPanel.refreshAction();
        
        addedItems.addAll(items);
    }

    @SuppressWarnings("unchecked")
    private InvoiceItem getClonedItemForInvoiceItem(InvoiceItem invoiceItem) {
        List<InvoiceItem> currentItems = invoiceItemsListPanel.getDataTable().getData();
        InvoiceItem item = null;
        for (InvoiceItem currentItem : currentItems) {
            //find for this product
            if ( currentItem.getProduct().equals(invoiceItem.getProduct()) ){
                item = currentItem;
                break;
            }
        }
        
        //create new item
        if ( item==null ){
            item = invoiceListRemote.newInvoiceItem(getParentDataObjectId());
            if ( item.getOrderedQuantity()==null )
                item.setOrderedQuantity(new BigDecimal(0));
            SimpleProduct product = (SimpleProduct) invoiceItem.getProduct();
            item.setProduct(product);
            
            //get the measurement unit from the invoice item
            DbResource measureMentUnit = invoiceItem.getMeasureUnit();
            item.setMeasureUnit(measureMentUnit);
            
            //get the purchase price from product and warehouse product
            WarehouseProduct warehouseProduct = invoiceListRemote.getWarehouseProduct(product);
            BigDecimal salePrice = product.getSalePrice();
            if ( warehouseProduct!=null ){
                if ( warehouseProduct.getSalePrice()!=null )
                    salePrice = warehouseProduct.getSalePrice();
            }
            item.setUnitPrice(salePrice);
        //already an item for this product - nothing to do
        }else{
            //nothing specific
        }
        
        return item;
    }

    private boolean showAlreadyAddedWarning() {
        int result = JOptionPane.showConfirmDialog(
            this.getParent(),
            getResourceMap().getString("copyAction.alreadyAdded.message"),
            getResourceMap().getString("copyAction.alreadyAdded.title"),
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
    if(JOptionPane.YES_OPTION == result)
    {
        return true;
    }
    return false;
    }

    private List<Invoice> getInvoicesList() {
//        List<Invoice> result = new ArrayList<Invoice>();
//        for (DummyInvoice dummyInvoice : dInvoices) {
//            result.add(dummyInvoice.invoice);
//        }
//        return result;
        return new ArrayList<Invoice>();
    }

    protected void onInvoiceChanged(Invoice invoice) {
        List<InvoiceItem> items = getInvoiceItems(invoice);
        copyItemsListPanel.refreshList(items);
    }
    
    private List<InvoiceItem> getInvoiceItems(Invoice invoice) {
        return new ArrayList<InvoiceItem>();
    }

    private static class DummyInvoicesListDialog implements SelectableListDialog{
        
        @SuppressWarnings("unchecked")
        private List listData;

        public DummyInvoicesListDialog(List<Invoice> invoices){
            listData = invoices;
        }

        @SuppressWarnings("unchecked")
        @Override
        public List getListData() {
            return listData;
        }

        @Override
        public Object getSelectedRowObject() {
            return null;
        }

        @Override
        public boolean isEditable() {
            return false;
        }

        @Override
        public void setEditable(boolean editable) {
        }

        @Override
        public void setSelectedRowObject(Object selectedObject) {
        }

        @Override
        public void setVisibleSelectButtons(boolean visible) {
        }

        @Override
        public DialogResponse showDialog(Component parentComponent) {
            return null;
        }

        @Override
        public void setEnabled(boolean enabled)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean isEnabled()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
    }


}
