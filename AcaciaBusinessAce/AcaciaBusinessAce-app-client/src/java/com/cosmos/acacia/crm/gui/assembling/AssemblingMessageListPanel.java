/*
 * AssemblingMessageListPanel.java
 *
 * Created on Събота, 2008, Септември 27, 15:14
 */

package com.cosmos.acacia.crm.gui.assembling;

import com.cosmos.acacia.crm.bl.assembling.AssemblingRemote;
import com.cosmos.acacia.crm.data.assembling.AssemblingMessage;
import com.cosmos.acacia.gui.AbstractTablePanel;
import com.cosmos.acacia.gui.AcaciaTable;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.swingb.DialogResponse;
import java.util.List;
import javax.ejb.EJB;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.swingbinding.JTableBinding;

/**
 *
 * @author  Miro
 */
public class AssemblingMessageListPanel extends AbstractTablePanel<AssemblingMessage>
{
    @EJB
    private static AssemblingRemote formSession;

    private BindingGroup bindingGroup;
    private EntityProperties entityProps;

    /** Creates new form AssemblingMessageListPanel */
    public AssemblingMessageListPanel()
    {
        //initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    @Override
    protected void initData()
    {
        super.initData();

        entityProps = getFormSession().getAssemblingMessageEntityProperties();

        refreshDataTable(entityProps);
    }

    private void refreshDataTable(EntityProperties entityProps)
    {
        if(bindingGroup != null)
            bindingGroup.unbind();

        bindingGroup = new BindingGroup();
        AcaciaTable table = getDataTable();
        List<AssemblingMessage> messages = getList();

        JTableBinding tableBinding = table.bind(
            bindingGroup,
            messages,
            entityProps,
            UpdateStrategy.READ);
        tableBinding.setEditable(false);

        bindingGroup.bind();
    }

    private List<AssemblingMessage> getList()
    {
        return getFormSession().getAssemblingMessages();
    }

    @Override
    protected boolean deleteRow(AssemblingMessage rowObject) {
        if(rowObject == null)
            return false;

        try {
            getFormSession().deleteAssemblingMessage((AssemblingMessage)rowObject);
            return true;
        } catch(Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }

    @Override
    protected AssemblingMessage modifyRow(AssemblingMessage rowObject) {
        return editRow((AssemblingMessage)rowObject);
    }

    @Override
    protected AssemblingMessage newRow() {
        return editRow(getFormSession().newAssemblingMessage());
    }

    protected AssemblingMessage editRow(AssemblingMessage message) {
        if(message != null)
        {
            AssemblingMessagePanel entityPanel = new AssemblingMessagePanel(message);
            DialogResponse response = entityPanel.showDialog(this);
            if(DialogResponse.SAVE.equals(response))
            {
                return (AssemblingMessage) entityPanel.getSelectedValue();
            }
        }

        return null;
    }

    protected AssemblingRemote getFormSession() {
        if(formSession == null) {
            try {
                formSession = getBean(AssemblingRemote.class);
            } catch(Exception ex) {
                throw new RuntimeException(ex);
            }
        }

        return formSession;
    }
}
