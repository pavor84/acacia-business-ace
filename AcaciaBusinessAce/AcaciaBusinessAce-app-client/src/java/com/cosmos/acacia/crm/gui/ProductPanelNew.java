/*
 * ProductPanelNew.java
 *
 * Created on Неделя, 2009, Февруари 1, 15:20
 */

package com.cosmos.acacia.crm.gui;

import com.cosmos.acacia.crm.enums.SpecialPermission;
import com.cosmos.acacia.crm.bl.impl.ProductsListRemote;
import com.cosmos.acacia.crm.data.Classifier;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.PatternMaskFormat;
import com.cosmos.acacia.crm.data.ProductCategory;
import com.cosmos.acacia.crm.data.ProductSupplier;
import com.cosmos.acacia.crm.data.SimpleProduct;
import com.cosmos.acacia.crm.enums.MeasurementUnit;
import com.cosmos.acacia.crm.gui.contactbook.BusinessPartnersListPanel;
import com.cosmos.acacia.gui.AbstractTablePanel;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.acacia.gui.AcaciaPercentValueField;
import com.cosmos.acacia.gui.AcaciaTable;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.util.AcaciaUtils;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.JBButton;
import com.cosmos.swingb.JBComboBox;
import com.cosmos.swingb.JBFormattedTextField;
import com.cosmos.swingb.JBLabel;
import com.cosmos.swingb.MigLayoutHelper;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import javax.ejb.EJB;
import org.jdesktop.application.Action;
import org.jdesktop.application.ApplicationAction;
import org.jdesktop.application.ApplicationActionMap;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author  Miro
 */
public class ProductPanelNew extends AcaciaPanel {

    @EJB
    private static ProductsListRemote formSession;

    public ProductPanelNew(SimpleProduct product) {
        super(product.getParentId());
        this.product = product;
        init();
    }

    public ProductPanelNew(BigInteger parentDataObjectId) {
        super(parentDataObjectId);
        init();
    }


    /** Creates new form ProductPanelNew */
    public ProductPanelNew() {
        init();
    }

    private void init()
    {
        initComponents();
        initComponentsCustom();
        initData();
    }

    private void initComponentsCustom() {
        //hide list price
//        listPriceLabel.setVisible(false);
//        listPriceTextField.setVisible(false);

        //pricing button
//        jBButton1.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                onProductPricing();
//            }
//        });

        if(!getRightsManager().isAllowed(SpecialPermission.ProductPricing)) {
            int index;
            if((index = productTabbedPane.indexOfComponent(productPricingPanel)) >= 0)
                productTabbedPane.removeTabAt(index);
        }

        if(!getRightsManager().isAllowed(SpecialPermission.Product)) {
            int index;
            if((index = productTabbedPane.indexOfComponent(suppliersPanel)) >= 0) {
                productTabbedPane.removeTabAt(index);
            }
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productTabbedPane = new com.cosmos.swingb.JBTabbedPane();
        primaryInfoPanel = new com.cosmos.swingb.JBPanel();
        productNameTextField = new com.cosmos.swingb.JBTextField();
        productNameLabel = new com.cosmos.swingb.JBLabel();
        productCategoryComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        productCategoryLabel = new com.cosmos.swingb.JBLabel();
        productCodeFormatLabel = new com.cosmos.swingb.JBLabel();
        productCodeLabel = new com.cosmos.swingb.JBLabel();
        measureUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        measureUnitLabel = new com.cosmos.swingb.JBLabel();
        productColorComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        productColorLabel = new com.cosmos.swingb.JBLabel();
        producerComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        producerLabel = new com.cosmos.swingb.JBLabel();
        quantityPerPackageTextField = new com.cosmos.swingb.JBFormattedTextField();
        quantityPerPackageLabel = new com.cosmos.swingb.JBLabel();
        pricePanel = new com.cosmos.swingb.JBPanel();
        pricePerQuantityTextField = new com.cosmos.swingb.JBFormattedTextField();
        salesPriceTextField = new com.cosmos.swingb.JBFormattedTextField();
        pricePerQuantityLabel = new com.cosmos.swingb.JBLabel();
        salesPriceLabel = new com.cosmos.swingb.JBLabel();
        quantitiesOnStockPanel = new com.cosmos.swingb.JBPanel();
        minTextField = new com.cosmos.swingb.JBFormattedTextField();
        minLabel = new com.cosmos.swingb.JBLabel();
        defaultLabel = new com.cosmos.swingb.JBLabel();
        defaultTextField = new com.cosmos.swingb.JBFormattedTextField();
        maxLabel = new com.cosmos.swingb.JBLabel();
        maxTextField = new com.cosmos.swingb.JBFormattedTextField();
        categoryCodeFormatTextField = new com.cosmos.swingb.JBTextField();
        categoryCodeFormatLabel = new com.cosmos.swingb.JBLabel();
        productCodeFormatComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        productCodeTextField = new com.cosmos.swingb.JBMaskTextField();
        purchaseOptionsPanel = new com.cosmos.swingb.JBPanel();
        purchasedCheckBox = new com.cosmos.swingb.JBCheckBox();
        salableCheckBox = new com.cosmos.swingb.JBCheckBox();
        obsoleteCheckBox = new com.cosmos.swingb.JBCheckBox();
        additionalInfoPanel = new com.cosmos.swingb.JBPanel();
        deliveryInfoPanel = new com.cosmos.swingb.JBPanel();
        weightUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        weightUnitLabel = new com.cosmos.swingb.JBLabel();
        weightLabel = new com.cosmos.swingb.JBLabel();
        weightTextField = new com.cosmos.swingb.JBFormattedTextField();
        deliveryTimeLabel = new com.cosmos.swingb.JBLabel();
        deliveryTimeTextField = new com.cosmos.swingb.JBFormattedTextField();
        dimensionsPanel = new com.cosmos.swingb.JBPanel();
        dimensionUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        dimensionUnitLabel = new com.cosmos.swingb.JBLabel();
        widthLabel = new com.cosmos.swingb.JBLabel();
        widthTextField = new com.cosmos.swingb.JBFormattedTextField();
        lengthLabel = new com.cosmos.swingb.JBLabel();
        lengthTextField = new com.cosmos.swingb.JBFormattedTextField();
        heightLabel = new com.cosmos.swingb.JBLabel();
        heightTextField = new com.cosmos.swingb.JBFormattedTextField();
        cubatureLabel = new com.cosmos.swingb.JBLabel();
        cubatureTextField = new com.cosmos.swingb.JBFormattedTextField();
        descriptionPanel = new com.cosmos.swingb.JBPanel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextPane = new com.cosmos.swingb.JBTextPane();
        productPricingPanel = new com.cosmos.swingb.JBPanel();
        productPricingButton = new com.cosmos.swingb.JBButton();
        suppliersPanel = new com.cosmos.swingb.JBPanel();
        buttonsPanel = new com.cosmos.swingb.JBPanel();
        closeButton = new com.cosmos.swingb.JBButton();
        saveButton = new com.cosmos.swingb.JBButton();

        setName("Form"); // NOI18N

        productTabbedPane.setName("productTabbedPane"); // NOI18N

        primaryInfoPanel.setName("primaryInfoPanel"); // NOI18N

        productNameTextField.setName("productNameTextField"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(ProductPanelNew.class);
        productNameLabel.setText(resourceMap.getString("productNameLabel.text")); // NOI18N
        productNameLabel.setName("productNameLabel"); // NOI18N

        productCategoryComboList.setName("productCategoryComboList"); // NOI18N

        productCategoryLabel.setText(resourceMap.getString("productCategoryLabel.text")); // NOI18N
        productCategoryLabel.setName("productCategoryLabel"); // NOI18N

        productCodeFormatLabel.setText(resourceMap.getString("productCodeFormatLabel.text")); // NOI18N
        productCodeFormatLabel.setName("productCodeFormatLabel"); // NOI18N

        productCodeLabel.setText(resourceMap.getString("productCodeLabel.text")); // NOI18N
        productCodeLabel.setName("productCodeLabel"); // NOI18N

        measureUnitComboBox.setName("measureUnitComboBox"); // NOI18N

        measureUnitLabel.setText(resourceMap.getString("measureUnitLabel.text")); // NOI18N
        measureUnitLabel.setName("measureUnitLabel"); // NOI18N

        productColorComboBox.setName("productColorComboBox"); // NOI18N

        productColorLabel.setText(resourceMap.getString("productColorLabel.text")); // NOI18N
        productColorLabel.setName("productColorLabel"); // NOI18N

        producerComboList.setName("producerComboList"); // NOI18N

        producerLabel.setText(resourceMap.getString("producerLabel.text")); // NOI18N
        producerLabel.setName("producerLabel"); // NOI18N

        quantityPerPackageTextField.setName("quantityPerPackageTextField"); // NOI18N

        quantityPerPackageLabel.setText(resourceMap.getString("quantityPerPackageLabel.text")); // NOI18N
        quantityPerPackageLabel.setName("quantityPerPackageLabel"); // NOI18N

        pricePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("pricePanel.border.title"))); // NOI18N
        pricePanel.setName("pricePanel"); // NOI18N
        pricePanel.setLayout(new net.miginfocom.swing.MigLayout());

        pricePerQuantityTextField.setName("pricePerQuantityTextField"); // NOI18N
        pricePanel.add(pricePerQuantityTextField);

        salesPriceTextField.setName("salesPriceTextField"); // NOI18N
        pricePanel.add(salesPriceTextField);

        pricePerQuantityLabel.setText(resourceMap.getString("pricePerQuantityLabel.text")); // NOI18N
        pricePerQuantityLabel.setName("pricePerQuantityLabel"); // NOI18N
        pricePanel.add(pricePerQuantityLabel);

        salesPriceLabel.setText(resourceMap.getString("salesPriceLabel.text")); // NOI18N
        salesPriceLabel.setName("salesPriceLabel"); // NOI18N
        pricePanel.add(salesPriceLabel);

        quantitiesOnStockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("quantitiesOnStockPanel.border.title"))); // NOI18N
        quantitiesOnStockPanel.setName("quantitiesOnStockPanel"); // NOI18N
        quantitiesOnStockPanel.setLayout(new net.miginfocom.swing.MigLayout());

        minTextField.setName("minTextField"); // NOI18N
        quantitiesOnStockPanel.add(minTextField);

        minLabel.setText(resourceMap.getString("minLabel.text")); // NOI18N
        minLabel.setName("minLabel"); // NOI18N
        quantitiesOnStockPanel.add(minLabel);

        defaultLabel.setText(resourceMap.getString("defaultLabel.text")); // NOI18N
        defaultLabel.setName("defaultLabel"); // NOI18N
        quantitiesOnStockPanel.add(defaultLabel);

        defaultTextField.setName("defaultTextField"); // NOI18N
        quantitiesOnStockPanel.add(defaultTextField);

        maxLabel.setText(resourceMap.getString("maxLabel.text")); // NOI18N
        maxLabel.setName("maxLabel"); // NOI18N
        quantitiesOnStockPanel.add(maxLabel);

        maxTextField.setName("maxTextField"); // NOI18N
        quantitiesOnStockPanel.add(maxTextField);

        categoryCodeFormatTextField.setEditable(false);
        categoryCodeFormatTextField.setName("categoryCodeFormatTextField"); // NOI18N

        categoryCodeFormatLabel.setText(resourceMap.getString("categoryCodeFormatLabel.text")); // NOI18N
        categoryCodeFormatLabel.setName("categoryCodeFormatLabel"); // NOI18N

        productCodeFormatComboList.setName("productCodeFormatComboList"); // NOI18N

        productCodeTextField.setText(resourceMap.getString("productCodeTextField.text")); // NOI18N
        productCodeTextField.setName("productCodeTextField"); // NOI18N

        purchaseOptionsPanel.setName("purchaseOptionsPanel"); // NOI18N
        purchaseOptionsPanel.setLayout(new net.miginfocom.swing.MigLayout());

        purchasedCheckBox.setText(resourceMap.getString("purchasedCheckBox.text")); // NOI18N
        purchasedCheckBox.setName("purchasedCheckBox"); // NOI18N
        purchaseOptionsPanel.add(purchasedCheckBox);

        salableCheckBox.setText(resourceMap.getString("salableCheckBox.text")); // NOI18N
        salableCheckBox.setName("salableCheckBox"); // NOI18N
        purchaseOptionsPanel.add(salableCheckBox);

        obsoleteCheckBox.setText(resourceMap.getString("obsoleteCheckBox.text")); // NOI18N
        obsoleteCheckBox.setName("obsoleteCheckBox"); // NOI18N
        purchaseOptionsPanel.add(obsoleteCheckBox);

        javax.swing.GroupLayout primaryInfoPanelLayout = new javax.swing.GroupLayout(primaryInfoPanel);
        primaryInfoPanel.setLayout(primaryInfoPanelLayout);
        primaryInfoPanelLayout.setHorizontalGroup(
            primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                        .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(productNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, primaryInfoPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(productCodeFormatComboList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(productCategoryComboList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, primaryInfoPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(measureUnitComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, primaryInfoPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(producerComboList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(categoryCodeFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantityPerPackageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(quantityPerPackageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(productColorComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(productCodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(categoryCodeFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addComponent(productCodeFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(producerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, primaryInfoPanelLayout.createSequentialGroup()
                        .addComponent(purchaseOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                        .addComponent(pricePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                        .addComponent(quantitiesOnStockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        primaryInfoPanelLayout.setVerticalGroup(
            primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(primaryInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(productCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCategoryComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryCodeFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryCodeFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(productCodeFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCodeFormatComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(productCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(productCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(measureUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productColorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(producerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(producerComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(primaryInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(quantityPerPackageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quantityPerPackageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(purchaseOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pricePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantitiesOnStockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143))
        );

        productTabbedPane.addTab(resourceMap.getString("primaryInfoPanel.TabConstraints.tabTitle"), primaryInfoPanel); // NOI18N

        additionalInfoPanel.setName("additionalInfoPanel"); // NOI18N

        deliveryInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("deliveryInfoPanel.border.title"))); // NOI18N
        deliveryInfoPanel.setName("deliveryInfoPanel"); // NOI18N
        deliveryInfoPanel.setLayout(new net.miginfocom.swing.MigLayout());

        weightUnitComboBox.setName("weightUnitComboBox"); // NOI18N
        deliveryInfoPanel.add(weightUnitComboBox);

        weightUnitLabel.setText(resourceMap.getString("weightUnitLabel.text")); // NOI18N
        weightUnitLabel.setName("weightUnitLabel"); // NOI18N
        deliveryInfoPanel.add(weightUnitLabel);

        weightLabel.setText(resourceMap.getString("weightLabel.text")); // NOI18N
        weightLabel.setName("weightLabel"); // NOI18N
        deliveryInfoPanel.add(weightLabel);

        weightTextField.setName("weightTextField"); // NOI18N
        deliveryInfoPanel.add(weightTextField);

        deliveryTimeLabel.setText(resourceMap.getString("deliveryTimeLabel.text")); // NOI18N
        deliveryTimeLabel.setName("deliveryTimeLabel"); // NOI18N
        deliveryInfoPanel.add(deliveryTimeLabel);

        deliveryTimeTextField.setName("deliveryTimeTextField"); // NOI18N
        deliveryInfoPanel.add(deliveryTimeTextField);

        dimensionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("dimensionsPanel.border.title"))); // NOI18N
        dimensionsPanel.setName("dimensionsPanel"); // NOI18N
        dimensionsPanel.setLayout(new net.miginfocom.swing.MigLayout());

        dimensionUnitComboBox.setName("dimensionUnitComboBox"); // NOI18N
        dimensionsPanel.add(dimensionUnitComboBox);

        dimensionUnitLabel.setText(resourceMap.getString("dimensionUnitLabel.text")); // NOI18N
        dimensionUnitLabel.setName("dimensionUnitLabel"); // NOI18N
        dimensionsPanel.add(dimensionUnitLabel);

        widthLabel.setText(resourceMap.getString("widthLabel.text")); // NOI18N
        widthLabel.setName("widthLabel"); // NOI18N
        dimensionsPanel.add(widthLabel);

        widthTextField.setName("widthTextField"); // NOI18N
        dimensionsPanel.add(widthTextField);

        lengthLabel.setText(resourceMap.getString("lengthLabel.text")); // NOI18N
        lengthLabel.setName("lengthLabel"); // NOI18N
        dimensionsPanel.add(lengthLabel);

        lengthTextField.setName("lengthTextField"); // NOI18N
        dimensionsPanel.add(lengthTextField);

        heightLabel.setText(resourceMap.getString("heightLabel.text")); // NOI18N
        heightLabel.setName("heightLabel"); // NOI18N
        dimensionsPanel.add(heightLabel);

        heightTextField.setName("heightTextField"); // NOI18N
        dimensionsPanel.add(heightTextField);

        cubatureLabel.setText(resourceMap.getString("cubatureLabel.text")); // NOI18N
        cubatureLabel.setName("cubatureLabel"); // NOI18N
        dimensionsPanel.add(cubatureLabel);

        cubatureTextField.setName("cubatureTextField"); // NOI18N
        dimensionsPanel.add(cubatureTextField);

        descriptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("descriptionPanel.border.title"))); // NOI18N
        descriptionPanel.setName("descriptionPanel"); // NOI18N
        descriptionPanel.setLayout(new java.awt.BorderLayout());

        descriptionScrollPane.setName("descriptionScrollPane"); // NOI18N

        descriptionTextPane.setName("descriptionTextPane"); // NOI18N
        descriptionScrollPane.setViewportView(descriptionTextPane);

        descriptionPanel.add(descriptionScrollPane, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout additionalInfoPanelLayout = new javax.swing.GroupLayout(additionalInfoPanel);
        additionalInfoPanel.setLayout(additionalInfoPanelLayout);
        additionalInfoPanelLayout.setHorizontalGroup(
            additionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, additionalInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(additionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(descriptionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(deliveryInfoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(dimensionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                .addContainerGap())
        );
        additionalInfoPanelLayout.setVerticalGroup(
            additionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(additionalInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deliveryInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );

        productTabbedPane.addTab(resourceMap.getString("additionalInfoPanel.TabConstraints.tabTitle"), additionalInfoPanel); // NOI18N

        productPricingPanel.setName("productPricingPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(ProductPanelNew.class, this);
        productPricingButton.setAction(actionMap.get("onProductPricing")); // NOI18N
        productPricingButton.setText(resourceMap.getString("productPricingButton.text")); // NOI18N
        productPricingButton.setName("productPricingButton"); // NOI18N

        javax.swing.GroupLayout productPricingPanelLayout = new javax.swing.GroupLayout(productPricingPanel);
        productPricingPanel.setLayout(productPricingPanelLayout);
        productPricingPanelLayout.setHorizontalGroup(
            productPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPricingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productPricingButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        productPricingPanelLayout.setVerticalGroup(
            productPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPricingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productPricingButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
        );

        productTabbedPane.addTab(resourceMap.getString("productPricingPanel.TabConstraints.tabTitle"), productPricingPanel); // NOI18N

        suppliersPanel.setName("suppliersPanel"); // NOI18N
        suppliersPanel.setLayout(new java.awt.BorderLayout());
        productTabbedPane.addTab(resourceMap.getString("suppliersPanel.TabConstraints.tabTitle"), suppliersPanel); // NOI18N

        buttonsPanel.setName("buttonsPanel"); // NOI18N

        closeButton.setIcon(resourceMap.getIcon("closeButton.icon")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        saveButton.setIcon(resourceMap.getIcon("saveButton.icon")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, saveButton});

        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, saveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(productTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(productTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBPanel additionalInfoPanel;
    private com.cosmos.swingb.JBPanel buttonsPanel;
    private com.cosmos.swingb.JBLabel categoryCodeFormatLabel;
    private com.cosmos.swingb.JBTextField categoryCodeFormatTextField;
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.swingb.JBLabel cubatureLabel;
    private com.cosmos.swingb.JBFormattedTextField cubatureTextField;
    private com.cosmos.swingb.JBLabel defaultLabel;
    private com.cosmos.swingb.JBFormattedTextField defaultTextField;
    private com.cosmos.swingb.JBPanel deliveryInfoPanel;
    private com.cosmos.swingb.JBLabel deliveryTimeLabel;
    private com.cosmos.swingb.JBFormattedTextField deliveryTimeTextField;
    private com.cosmos.swingb.JBPanel descriptionPanel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private com.cosmos.swingb.JBTextPane descriptionTextPane;
    private com.cosmos.acacia.gui.AcaciaComboBox dimensionUnitComboBox;
    private com.cosmos.swingb.JBLabel dimensionUnitLabel;
    private com.cosmos.swingb.JBPanel dimensionsPanel;
    private com.cosmos.swingb.JBLabel heightLabel;
    private com.cosmos.swingb.JBFormattedTextField heightTextField;
    private com.cosmos.swingb.JBLabel lengthLabel;
    private com.cosmos.swingb.JBFormattedTextField lengthTextField;
    private com.cosmos.swingb.JBLabel maxLabel;
    private com.cosmos.swingb.JBFormattedTextField maxTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox measureUnitComboBox;
    private com.cosmos.swingb.JBLabel measureUnitLabel;
    private com.cosmos.swingb.JBLabel minLabel;
    private com.cosmos.swingb.JBFormattedTextField minTextField;
    private com.cosmos.swingb.JBCheckBox obsoleteCheckBox;
    private com.cosmos.swingb.JBPanel pricePanel;
    private com.cosmos.swingb.JBLabel pricePerQuantityLabel;
    private com.cosmos.swingb.JBFormattedTextField pricePerQuantityTextField;
    private com.cosmos.swingb.JBPanel primaryInfoPanel;
    private com.cosmos.acacia.gui.AcaciaComboList producerComboList;
    private com.cosmos.swingb.JBLabel producerLabel;
    private com.cosmos.acacia.gui.AcaciaComboList productCategoryComboList;
    private com.cosmos.swingb.JBLabel productCategoryLabel;
    private com.cosmos.acacia.gui.AcaciaComboList productCodeFormatComboList;
    private com.cosmos.swingb.JBLabel productCodeFormatLabel;
    private com.cosmos.swingb.JBLabel productCodeLabel;
    private com.cosmos.swingb.JBMaskTextField productCodeTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox productColorComboBox;
    private com.cosmos.swingb.JBLabel productColorLabel;
    private com.cosmos.swingb.JBLabel productNameLabel;
    private com.cosmos.swingb.JBTextField productNameTextField;
    private com.cosmos.swingb.JBButton productPricingButton;
    private com.cosmos.swingb.JBPanel productPricingPanel;
    private com.cosmos.swingb.JBTabbedPane productTabbedPane;
    private com.cosmos.swingb.JBPanel purchaseOptionsPanel;
    private com.cosmos.swingb.JBCheckBox purchasedCheckBox;
    private com.cosmos.swingb.JBPanel quantitiesOnStockPanel;
    private com.cosmos.swingb.JBLabel quantityPerPackageLabel;
    private com.cosmos.swingb.JBFormattedTextField quantityPerPackageTextField;
    private com.cosmos.swingb.JBCheckBox salableCheckBox;
    private com.cosmos.swingb.JBLabel salesPriceLabel;
    private com.cosmos.swingb.JBFormattedTextField salesPriceTextField;
    private com.cosmos.swingb.JBButton saveButton;
    private com.cosmos.swingb.JBPanel suppliersPanel;
    private com.cosmos.swingb.JBLabel weightLabel;
    private com.cosmos.swingb.JBFormattedTextField weightTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox weightUnitComboBox;
    private com.cosmos.swingb.JBLabel weightUnitLabel;
    private com.cosmos.swingb.JBLabel widthLabel;
    private com.cosmos.swingb.JBFormattedTextField widthTextField;
    // End of variables declaration//GEN-END:variables


    private SimpleProduct product;
    private SuppliersListPanel suppliersListPanel;
    private BindingGroup productBindingGroup;

    @Override
    protected void initData() {
        AcaciaToStringConverter resourceToStringConverter = new AcaciaToStringConverter();
        AutoCompleteDecorator.decorate(dimensionUnitComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(measureUnitComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(productColorComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(weightUnitComboBox, resourceToStringConverter);

        if(product == null) {
            product = getFormSession().newProduct();
        } else {
            product = getFormSession().refresh(product);
        }

        BindingGroup bindingGroup = getBindingGroup();

        setSaveActionState();

        if(bindingGroup != null)
        {
            bindingGroup.addBindingListener(new AbstractBindingListener()
            {

                @SuppressWarnings("unchecked")
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    setSaveActionState();
                }
            });
        }

        setProductCodeMaskFormat();
    }

    protected void setSaveActionState()
    {
        setEnabled(Button.Save, productBindingGroup.isContentValid());
    }

    protected BindingGroup getBindingGroup()
    {
        if(productBindingGroup == null)
        {
            productBindingGroup = new BindingGroup();
            EntityProperties entityProps = getProductEntityProperties();

            initPrimaryInfo(productBindingGroup, entityProps);
            initAdditionalInfo(productBindingGroup, entityProps);
            initProductPricing();
            initSuppliers();

            productBindingGroup.bind();

            refreshCubature();
        }

        return productBindingGroup;
    }

    private void initPrimaryInfo(BindingGroup productBindingGroup, EntityProperties entityProps) {
        MigLayoutHelper helper = new MigLayoutHelper(purchaseOptionsPanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(3);
        helper.columnGrow(100, 0, 1, 2);
        helper.columnSizeGroup("sg", 0, 1, 2);
        helper.columnFill(0, 1, 2);
        helper.columnGap("15", 0, 1);
        helper.getComponentConstraints(purchasedCheckBox).cell(0, 0);
        helper.getComponentConstraints(salableCheckBox).cell(1, 0);
        helper.getComponentConstraints(obsoleteCheckBox).cell(2, 0);
        purchaseOptionsPanel.invalidate();

        helper = new MigLayoutHelper(pricePanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(4);
        helper.columnGrow(100, 1, 3);
        helper.columnSizeGroup("sg", 1, 3);
        helper.columnFill(1, 3);
        helper.columnGap("15", 1);
        helper.getComponentConstraints(pricePerQuantityLabel).cell(0, 0);
        helper.getComponentConstraints(pricePerQuantityTextField).cell(1, 0);
        helper.getComponentConstraints(salesPriceLabel).cell(2, 0);
        helper.getComponentConstraints(salesPriceTextField).cell(3, 0);
        pricePanel.invalidate();

        helper = new MigLayoutHelper(quantitiesOnStockPanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(6);
        helper.columnGrow(100, 1, 3, 5);
        helper.columnSizeGroup("sg", 1, 3, 5);
        helper.columnFill(1, 3, 5);
        helper.columnGap("15", 1, 3);
        helper.getComponentConstraints(minLabel).cell(0, 0);
        helper.getComponentConstraints(minTextField).cell(1, 0);
        helper.getComponentConstraints(defaultLabel).cell(2, 0);
        helper.getComponentConstraints(defaultTextField).cell(3, 0);
        helper.getComponentConstraints(maxLabel).cell(4, 0);
        helper.getComponentConstraints(maxTextField).cell(5, 0);
        quantitiesOnStockPanel.invalidate();

        helper = new MigLayoutHelper(primaryInfoPanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(4);
        helper.columnGrow(100, 1, 3);
        helper.columnSizeGroup("sg", 1, 3);
        helper.columnFill(1, 3);
        helper.columnGap("15", 1);
        helper.getComponentConstraints(productNameLabel).cell(0, 0);
        helper.getComponentConstraints(productNameTextField).cell(1, 0).spanX(3);
        helper.getComponentConstraints(productCategoryLabel).cell(0, 1);
        helper.getComponentConstraints(productCategoryComboList).cell(1, 1);
        helper.getComponentConstraints(categoryCodeFormatLabel).cell(2, 1);
        helper.getComponentConstraints(categoryCodeFormatTextField).cell(3, 1);
        helper.getComponentConstraints(productCodeFormatLabel).cell(0, 2);
        helper.getComponentConstraints(productCodeFormatComboList).cell(1, 2);
        helper.getComponentConstraints(productCodeLabel).cell(2, 2);
        helper.getComponentConstraints(productCodeTextField).cell(3, 2);
        helper.getComponentConstraints(measureUnitLabel).cell(0, 3);
        helper.getComponentConstraints(measureUnitComboBox).cell(1, 3);
        helper.getComponentConstraints(productColorLabel).cell(2, 3);
        helper.getComponentConstraints(productColorComboBox).cell(3, 3);
        helper.getComponentConstraints(producerLabel).cell(0, 4);
        helper.getComponentConstraints(producerComboList).cell(1, 4);
        helper.getComponentConstraints(quantityPerPackageLabel).cell(2, 4);
        helper.getComponentConstraints(quantityPerPackageTextField).cell(3, 4);
        helper.getComponentConstraints(purchaseOptionsPanel).width("100%").cell(0, 5).spanX(4);
        helper.getComponentConstraints(pricePanel).width("100%").cell(0, 6).spanX(4);
        helper.getComponentConstraints(quantitiesOnStockPanel).width("100%").cell(0, 7).spanX(4);
        primaryInfoPanel.invalidate();


        PropertyDetails propDetails = entityProps.getPropertyDetails("productName");
        productNameTextField.bind(productBindingGroup, product, propDetails);

        propDetails = entityProps.getPropertyDetails("category");
        ProductCategoriesTreePanel categoryListPanel = new ProductCategoriesTreePanel(getParentDataObjectId());
        productCategoryComboList.bind(productBindingGroup, categoryListPanel, product, propDetails,
            "${categoryName}", UpdateStrategy.READ_WRITE);
        productCategoryComboList.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent event) {
                onProductCategoryChanged((ProductCategory)event.getItem());
            }
        }, true);
        //categoryCodeFormatTextField

        propDetails = entityProps.getPropertyDetails("patternMaskFormat");
        PatternMaskFormatListPanel formatsListPanel = new PatternMaskFormatListPanel(getParentDataObjectId());
        productCodeFormatComboList.bind(productBindingGroup, formatsListPanel, product, propDetails,
            "${patternName} (${format})", UpdateStrategy.READ_WRITE);
        productCodeFormatComboList.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent event) {
                onProductCodeFormatChanged((PatternMaskFormat)event.getItem());
            }
        }, true);

        propDetails = entityProps.getPropertyDetails("productCode");
        productCodeTextField.bind(productBindingGroup, product, propDetails);

        propDetails = entityProps.getPropertyDetails("measureUnit");
        measureUnitComboBox.bind(productBindingGroup, getMeasureUnits(), product, propDetails);

        propDetails = entityProps.getPropertyDetails("productColor");
        productColorComboBox.bind(productBindingGroup, getProductColors(), product, propDetails);

        propDetails = entityProps.getPropertyDetails("producer");
        Classifier producerClassifier = getClassifier(Classifier.Producer.getClassifierCode());
        BusinessPartnersListPanel producerListPanel = new BusinessPartnersListPanel(producerClassifier);
        producerComboList.bind(productBindingGroup, producerListPanel, product, propDetails,
            "${displayName}", UpdateStrategy.READ_WRITE);

        propDetails = entityProps.getPropertyDetails("quantityPerPackage");
        quantityPerPackageTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getIntegerFormat());

        propDetails = entityProps.getPropertyDetails("purchased");
        purchasedCheckBox.bind(productBindingGroup, product, propDetails);

        propDetails = entityProps.getPropertyDetails("salable");
        salableCheckBox.bind(productBindingGroup, product, propDetails);

        propDetails = entityProps.getPropertyDetails("obsolete");
        obsoleteCheckBox.bind(productBindingGroup, product, propDetails);

        propDetails = entityProps.getPropertyDetails("pricePerQuantity");
        pricePerQuantityTextField.bind(productBindingGroup, product, propDetails);

        salesPriceTextField.setEditable(false);
        propDetails = entityProps.getPropertyDetails("salePrice");
        salesPriceTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());

        propDetails = entityProps.getPropertyDetails("minimumQuantity");
        minTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());

        propDetails = entityProps.getPropertyDetails("defaultQuantity");
        defaultTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());

        propDetails = entityProps.getPropertyDetails("maximumQuantity");
        maxTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());
    }

    private void initAdditionalInfo(BindingGroup productBindingGroup, EntityProperties entityProps) {
        MigLayoutHelper helper = new MigLayoutHelper(deliveryInfoPanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(6);
        helper.columnGrow(100, 1, 3, 5);
        helper.columnSizeGroup("sg", 1, 3, 5);
        helper.columnFill(1, 3, 5);
        helper.columnGap("15", 1, 3);
        helper.getComponentConstraints(weightUnitLabel).cell(0, 0);
        helper.getComponentConstraints(weightUnitComboBox).cell(1, 0);
        helper.getComponentConstraints(weightLabel).cell(2, 0);
        helper.getComponentConstraints(weightTextField).cell(3, 0);
        helper.getComponentConstraints(deliveryTimeLabel).cell(4, 0);
        helper.getComponentConstraints(deliveryTimeTextField).cell(5, 0);
        deliveryInfoPanel.invalidate();

        helper = new MigLayoutHelper(dimensionsPanel);
        helper.setLayoutFillX(true);
        helper.setLayoutWrapAfter(6);
        helper.columnGrow(100, 1, 3, 5);
        helper.columnSizeGroup("sg", 1, 3, 5);
        helper.columnFill(1, 3, 5);
        helper.columnGap("15", 1, 3);
        helper.getComponentConstraints(dimensionUnitLabel).cell(0, 0);
        helper.getComponentConstraints(dimensionUnitComboBox).cell(1, 0).spanX(3);
        helper.getComponentConstraints(cubatureLabel).cell(4, 0);
        helper.getComponentConstraints(cubatureTextField).cell(5, 0);
        helper.getComponentConstraints(widthLabel).cell(0, 1);
        helper.getComponentConstraints(widthTextField).cell(1, 1);
        helper.getComponentConstraints(lengthLabel).cell(2, 1);
        helper.getComponentConstraints(lengthTextField).cell(3, 1);
        helper.getComponentConstraints(heightLabel).cell(4, 1);
        helper.getComponentConstraints(heightTextField).cell(5, 1);
        dimensionsPanel.invalidate();

        PropertyDetails propDetails = entityProps.getPropertyDetails("weightUnit");
        weightUnitComboBox.bind(
                productBindingGroup,
                getMeasureUnits(MeasurementUnit.Category.MassWeight),
                product,
                propDetails);

        propDetails = entityProps.getPropertyDetails("weight");
        weightTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());

        propDetails = entityProps.getPropertyDetails("deliveryTime");
        deliveryTimeTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getIntegerFormat());

        propDetails = entityProps.getPropertyDetails("dimensionUnit");
        dimensionUnitComboBox.bind(
                productBindingGroup,
                getMeasureUnits(MeasurementUnit.Category.Volume),
                product,
                propDetails);

        CubatureBindingListener cubatureBindingListener = new CubatureBindingListener();
        propDetails = entityProps.getPropertyDetails("dimensionWidth");
        Binding binding = widthTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());
        binding.addBindingListener(cubatureBindingListener);

        propDetails = entityProps.getPropertyDetails("dimensionLength");
        binding = lengthTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());
        binding.addBindingListener(cubatureBindingListener);

        propDetails = entityProps.getPropertyDetails("dimensionHeight");
        binding = heightTextField.bind(productBindingGroup, product, propDetails, AcaciaUtils.getDecimalFormat());
        binding.addBindingListener(cubatureBindingListener);

        cubatureTextField.setEditable(false);

        propDetails = entityProps.getPropertyDetails("description");
        binding = descriptionTextPane.bind(productBindingGroup, product, propDetails);
    }

    private void initProductPricing() {
    }

    private void initSuppliers() {
        suppliersListPanel = new SuppliersListPanel();
        suppliersPanel.add(suppliersListPanel, BorderLayout.CENTER);
    }

    private void refreshCubature() {
        BigDecimal cubature;
        if((cubature = product.getDimensionCubature()) == null)
            cubatureTextField.setText("");
        else
            cubatureTextField.setText(cubature.toString());
    }

    private void onProductCategoryChanged(ProductCategory productCategory) {
        PatternMaskFormat patternMaskFormat;
        if(productCategory == null || (patternMaskFormat = productCategory.getPatternMaskFormat()) == null) {
            categoryCodeFormatTextField.setText("");
        } else {
            categoryCodeFormatTextField.setText(patternMaskFormat.getFormat());
        }

        setProductCodeMaskFormat();
    }

    private void onProductCodeFormatChanged(PatternMaskFormat patternMaskFormat) {
        setProductCodeMaskFormat();
    }

    private void setProductCodeMaskFormat() {
        PatternMaskFormat patternMaskFormat = null;
        if((patternMaskFormat = product.getPatternMaskFormat()) == null) {
            ProductCategory productCategory;
            if((productCategory = product.getCategory()) != null)
                patternMaskFormat = productCategory.getPatternMaskFormat();
        }

        String maskFormat;
        if(patternMaskFormat != null)
            maskFormat = patternMaskFormat.getFormat();
        else
            maskFormat = null;

        try {
            productCodeTextField.setMask(maskFormat);
        } catch(Exception ex) {
            handleException("maskFormat: " + maskFormat, ex);
        }
    }

    private PropertyDetails createPricePropertyDetails(String propertyName){
        PropertyDetails pd = new PropertyDetails(propertyName, propertyName, BigDecimal.class.getName());
        pd.setEditable(false);
        return pd;
    }

    protected EntityProperties getProductEntityProperties()
    {
        return getFormSession().getProductEntityProperties();
    }

    private List<DbResource> getMeasureUnits()
    {
        return getFormSession().getMeasureUnits();
    }

    private List<DbResource> getMeasureUnits(MeasurementUnit.Category category)
    {
        return getFormSession().getMeasureUnits(category);
    }

    private List<DbResource> getProductColors() {
        return getFormSession().getProductColors();
    }

    public void setEnabled(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setEnabled(enabled);
        }
    }

    public void setSelected(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setSelected(enabled);
        }
    }

    public void setVisible(Button button, boolean visible) {
        switch(button)
        {
            case Save:
                saveButton.setVisible(visible);
                break;

            case Close:
                closeButton.setVisible(visible);
                break;
        }
    }

    public boolean isVisible(Button button) {
        switch(button)
        {
            case Save:
                return saveButton.isVisible();

            case Close:
                return closeButton.isVisible();
        }

        throw new IllegalArgumentException("Unknown or unsupported Button enumeration: " + button);
    }

    public javax.swing.Action getAction(Button button)
    {
        ApplicationActionMap actionMap = getApplicationActionMap();
        if(actionMap != null && button != null)
        {
            return actionMap.get(button.getActionName());
        }

        return null;
    }

    @Override
    protected Class getResourceStopClass()
    {
        return AcaciaPanel.class;
    }

    public enum Button
    {
        Save("saveAction"),
        Close("closeAction");

        private Button(String actionName)
        {
            this.actionName = actionName;
        }

        private String actionName;

        public String getActionName() {
            return actionName;
        }
    };

    protected ProductsListRemote getFormSession() {
        if(formSession == null)
            formSession = getBean(ProductsListRemote.class);

        return formSession;
    }

    private class CubatureBindingListener extends AbstractBindingListener {

        @Override
        public void targetChanged(Binding binding, PropertyStateEvent event) {
            refreshCubature();
        }
    }


    private EntityProperties getProductSuppliersEntityProperties() {
        return getFormSession().getProductSupplierEntityProperties();
    }

    private class SuppliersListPanel extends AbstractTablePanel {

        private BindingGroup bindingGroup;

        @Override
        protected void initData() {
            super.initData();
            setVisible(AbstractTablePanel.Button.Close, false);

            bindingGroup = new BindingGroup();
            AcaciaTable table = getDataTable();
            JTableBinding tableBinding = table.bind(
                bindingGroup,
                getProductSuppliers(),
                getProductSuppliersEntityProperties(),
                UpdateStrategy.READ);
            tableBinding.setEditable(false);

            bindingGroup.bind();
        }

        @Override
        protected boolean deleteRow(Object rowObject) {
            return getFormSession().deleteProductSupplier((ProductSupplier)rowObject);
        }

        @Override
        protected Object modifyRow(Object rowObject) {
            return editRow((ProductSupplier)rowObject);
        }

        @Override
        protected Object newRow() {
            return editRow(getFormSession().newProductSupplier(product));
        }

        protected ProductSupplier editRow(ProductSupplier productSupplier)
        {
            if(productSupplier != null) {
                ProductSupplierPanel entityPanel = new ProductSupplierPanel(productSupplier);
                DialogResponse response = entityPanel.showDialog(this);
                if(DialogResponse.SAVE.equals(response))
                {
                    return (ProductSupplier)entityPanel.getSelectedValue();
                }
            }

            return null;
        }

        private List<ProductSupplier> getProductSuppliers() {
            return getFormSession().getProductSuppliers(product);
        }
    }

    @Action
    public void onProductPricing() {
        ProductPricingPanel panel = new ProductPricingPanel(product);
        panel.showDialog();
    }

    private class PricingPanel extends AcaciaPanel {

        private JBButton additionalDiscountButton;
        private AcaciaPercentValueField additionalDiscountField;
        private JBLabel additionalDiscountLabel;
        private JBButton additionalProfitButton;
        private AcaciaPercentValueField additionalProfitField;
        private JBLabel additionalProfitLabel;
        private AcaciaPercentValueField categoryDiscountField;
        private JBLabel categoryDiscountLabel;
        private AcaciaPercentValueField categoryProfitField;
        private JBLabel categoryProfitLabel;
        private JBButton closeButton;
        private JBFormattedTextField costPriceField;
        private JBLabel costPriceLabel;
        private JBComboBox currencyField;
        private JBButton dutyButton;
        private AcaciaPercentValueField dutyField;
        private JBLabel dutyLabel;
        private JBFormattedTextField listPriceField;
        private JBLabel listPriceLabel;
        private JBFormattedTextField purchasePriceField;
        private JBLabel purchasePriceLabel;
        private JBFormattedTextField salesPriceField;
        private JBLabel salesPriceLabel;
        private AcaciaPercentValueField totalDiscountField;
        private JBLabel totalDiscountLabel;
        private AcaciaPercentValueField totalProfitField;
        private JBLabel totalProfitLabel;
        private JBButton transportButton;
        private AcaciaPercentValueField transportPriceField;
        private JBLabel transportPriceLabel;

        public PricingPanel(SimpleProduct product) {
            super(product);
        }

        private void initComponents() {
            listPriceLabel = new JBLabel();
            listPriceField = new JBFormattedTextField();
            currencyField = new JBComboBox();
            additionalDiscountField = new AcaciaPercentValueField();
            additionalDiscountButton = new JBButton();
            additionalDiscountLabel = new JBLabel();
            purchasePriceField = new JBFormattedTextField();
            purchasePriceLabel = new JBLabel();
            transportPriceField = new AcaciaPercentValueField();
            transportButton = new JBButton();
            transportPriceLabel = new JBLabel();
            dutyField = new AcaciaPercentValueField();
            dutyButton = new JBButton();
            dutyLabel = new JBLabel();
            costPriceField = new JBFormattedTextField();
            costPriceLabel = new JBLabel();
            additionalProfitField = new AcaciaPercentValueField();
            additionalProfitButton = new JBButton();
            additionalProfitLabel = new JBLabel();
            salesPriceField = new JBFormattedTextField();
            salesPriceLabel = new JBLabel();
            closeButton = new JBButton();
            categoryDiscountField = new AcaciaPercentValueField();
            categoryDiscountLabel = new JBLabel();
            totalDiscountField = new AcaciaPercentValueField();
            totalDiscountLabel = new JBLabel();
            categoryProfitField = new AcaciaPercentValueField();
            categoryProfitLabel = new JBLabel();
            totalProfitField = new AcaciaPercentValueField();
            totalProfitLabel = new JBLabel();

            MigLayoutHelper helper = new MigLayoutHelper(this);
            helper.setLayoutFillX(true);
            helper.setLayoutWrapAfter(4);
            helper.columnGrow(100, 1, 3);
            helper.columnSizeGroup("sg", 1, 3);
            helper.columnFill(1, 3);
            helper.columnGap("15", 1);
            helper.getComponentConstraints(pricePerQuantityLabel).cell(0, 0);
            helper.getComponentConstraints(pricePerQuantityTextField).cell(1, 0);
            helper.getComponentConstraints(salesPriceLabel).cell(2, 0);
            helper.getComponentConstraints(salesPriceTextField).cell(3, 0);
            
        }

        @Override
        protected void initData() {
        }

        private SimpleProduct getProduct() {
            return (SimpleProduct)getMainDataObject();
        }
    }
}
