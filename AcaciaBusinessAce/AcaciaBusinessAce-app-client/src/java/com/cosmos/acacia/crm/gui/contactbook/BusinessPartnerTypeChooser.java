/*
 * BusinessPartnerTypeChooser.java
 *
 * Created on Неделя, 2008, Юли 27, 16:52
 */

package com.cosmos.acacia.crm.gui.contactbook;

import static com.cosmos.acacia.crm.gui.contactbook.BusinessPartnerTypeChooser.PartnerType.ORGANIZATION;
import static com.cosmos.acacia.crm.gui.contactbook.BusinessPartnerTypeChooser.PartnerType.PERSON;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.UUID;
import java.util.ArrayList;
import java.util.List;

import org.jdesktop.beansbinding.BindingGroup;

import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.beansbinding.EntityProperty;
import com.cosmos.resource.TextResource;
import com.cosmos.swingb.DialogResponse;

/**
 * 
 * Created	:	27.07.2008
 * @author	Petar Milev
 *
 */
public class BusinessPartnerTypeChooser extends AcaciaPanel {

    /** Creates new form BusinessPartnerTypeChooser */
    public BusinessPartnerTypeChooser() {
        super((UUID)null);
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        partnerTypeField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel1 = new com.cosmos.swingb.JBLabel();
        cancelButton = new com.cosmos.swingb.JBButton();
        okButton = new com.cosmos.swingb.JBButton();

        setName("Form"); // NOI18N

        partnerTypeField.setName("partnerTypeField"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(BusinessPartnerTypeChooser.class);
        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        cancelButton.setIcon(resourceMap.getIcon("cancelButton.icon")); // NOI18N
        cancelButton.setMnemonic('C');
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        okButton.setIcon(resourceMap.getIcon("okButton.icon")); // NOI18N
        okButton.setMnemonic('K');
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(partnerTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partnerTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton cancelButton;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBButton okButton;
    private com.cosmos.acacia.gui.AcaciaComboBox partnerTypeField;
    // End of variables declaration//GEN-END:variables
    
    public enum PartnerType{
        PERSON,
        ORGANIZATION;
    }
    
    public static class ToString<T> implements TextResource{
        private T value;
        private String display;

        public ToString(T value, String display){
            this.value = value;
            this.display = display;
        }
        
        @Override
        public String toString() {
            return display;
        }

        public T getValue() {
            return value;
        }

        public String getDisplay() {
            return display;
        }

        @Override
        public String toShortText() {
            return display;
        }

        @Override
        public String toText() {
            return display;
        }
    }
    
    private ToString<PartnerType> selectedTypeDisplay; 
    
    @Override
    protected void initData() {
        
        ToString<PartnerType> org = new ToString<PartnerType>
            (ORGANIZATION, getResourceMap().getString("PartnerType."+ORGANIZATION));
        ToString<PartnerType> person = new ToString<PartnerType>
            (PERSON, getResourceMap().getString("PartnerType."+PERSON));

        List<ToString<PartnerType>> types = new ArrayList<ToString<PartnerType>>();
        types.add(org);
        types.add(person);
        
        setSelectedTypeDisplay(org);
        EntityProperty pd = EntityProperty.createEntityProperty("selectedTypeDisplay", "Partner Type",
            ToString.class.getName());
        pd.setEditable(false);
        BindingGroup group = new BindingGroup();
        partnerTypeField.bind(group, types, this, pd);
        group.bind();

        //ok button
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setDialogResponse(DialogResponse.OK);
                close();
            }
        });

        //cancel button
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setDialogResponse(DialogResponse.CANCEL);
                close();
            }
        });
    }

    public ToString<PartnerType> getSelectedTypeDisplay() {
        return selectedTypeDisplay;
    }

    public void setSelectedTypeDisplay(ToString<PartnerType> selectedTypeDisplay) {
        this.selectedTypeDisplay = selectedTypeDisplay;
    }
    
    public PartnerType getSelectedType(){
        if ( getSelectedTypeDisplay()==null )
            return null;
        return getSelectedTypeDisplay().getValue();
    }

}
