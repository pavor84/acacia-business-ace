/*
 * AssemblingSchemasListPanel.java
 *
 * Created on Вторник, 2008, Юни 10, 21:07
 */

package com.cosmos.acacia.crm.gui.assembling;

import com.cosmos.acacia.crm.bl.assembling.AssemblingRemote;
import com.cosmos.acacia.crm.data.assembling.AssemblingCategory;
import com.cosmos.acacia.crm.enums.MeasurementUnit;
import com.cosmos.acacia.gui.AbstractTablePanel;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.acacia.gui.AcaciaTable;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import java.awt.Dimension;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.swing.JPanel;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.swingbinding.JTableBinding;

/**
 *
 * @author  Miro
 */
public class AssemblingSchemasListPanel
    extends AcaciaPanel
{
    @EJB
    private static AssemblingRemote formSession;


    /** Creates new form AssemblingSchemasListPanel */
    public AssemblingSchemasListPanel(BigInteger parentId)
    {
        super(parentId);
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assemblingSchemasPanel = new com.cosmos.swingb.JBPanel();
        assemblingCategoryLabel = new com.cosmos.swingb.JBLabel();
        assemblingCategoryLookup = new com.cosmos.acacia.gui.AcaciaLookup();
        schemasTablePanel = getAssemblingSchemasTablePanel();
        assemblingSchemasSplitPane = new com.cosmos.swingb.JBSplitPane();
        schemaItemsSplitPane = new com.cosmos.swingb.JBSplitPane();
        schemaItemsTitledPanel = new com.cosmos.swingb.JBTitledPanel();
        itemValuesTitledPanel = new com.cosmos.swingb.JBTitledPanel();
        assemblingSchemasTitledPanel = new com.cosmos.swingb.JBTitledPanel();

        assemblingSchemasPanel.setName("assemblingSchemasPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(AssemblingSchemasListPanel.class);
        assemblingCategoryLabel.setText(resourceMap.getString("assemblingCategoryLabel.text")); // NOI18N
        assemblingCategoryLabel.setName("assemblingCategoryLabel"); // NOI18N

        assemblingCategoryLookup.setName("assemblingCategoryLookup"); // NOI18N

        schemasTablePanel.setName("schemasTablePanel"); // NOI18N

        javax.swing.GroupLayout assemblingSchemasPanelLayout = new javax.swing.GroupLayout(assemblingSchemasPanel);
        assemblingSchemasPanel.setLayout(assemblingSchemasPanelLayout);
        assemblingSchemasPanelLayout.setHorizontalGroup(
            assemblingSchemasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assemblingSchemasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assemblingCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assemblingCategoryLookup, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(schemasTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );
        assemblingSchemasPanelLayout.setVerticalGroup(
            assemblingSchemasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assemblingSchemasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assemblingSchemasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(assemblingCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assemblingCategoryLookup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schemasTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
        );

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        assemblingSchemasSplitPane.setDividerLocation(450);
        assemblingSchemasSplitPane.setName("assemblingSchemasSplitPane"); // NOI18N

        schemaItemsSplitPane.setDividerLocation(300);
        schemaItemsSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        schemaItemsSplitPane.setName("schemaItemsSplitPane"); // NOI18N

        schemaItemsTitledPanel.setTitle(resourceMap.getString("schemaItemsTitledPanel.title")); // NOI18N
        schemaItemsTitledPanel.setContentContainer(getSchemaItemsTablePanel());
        schemaItemsTitledPanel.setName("schemaItemsTitledPanel"); // NOI18N
        schemaItemsSplitPane.setTopComponent(schemaItemsTitledPanel);

        itemValuesTitledPanel.setTitle(resourceMap.getString("itemValuesTitledPanel.title")); // NOI18N
        itemValuesTitledPanel.setContentContainer(getItemValuesTablePanel());
        itemValuesTitledPanel.setName("itemValuesTitledPanel"); // NOI18N
        schemaItemsSplitPane.setRightComponent(itemValuesTitledPanel);

        assemblingSchemasSplitPane.setRightComponent(schemaItemsSplitPane);

        assemblingSchemasTitledPanel.setTitle(resourceMap.getString("assemblingSchemasTitledPanel.title")); // NOI18N
        assemblingSchemasTitledPanel.setContentContainer(assemblingSchemasPanel);
        assemblingSchemasTitledPanel.setName("assemblingSchemasTitledPanel"); // NOI18N
        assemblingSchemasSplitPane.setLeftComponent(assemblingSchemasTitledPanel);

        add(assemblingSchemasSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel assemblingCategoryLabel;
    private com.cosmos.acacia.gui.AcaciaLookup assemblingCategoryLookup;
    private com.cosmos.swingb.JBPanel assemblingSchemasPanel;
    private com.cosmos.swingb.JBSplitPane assemblingSchemasSplitPane;
    private com.cosmos.swingb.JBTitledPanel assemblingSchemasTitledPanel;
    private com.cosmos.swingb.JBTitledPanel itemValuesTitledPanel;
    private com.cosmos.swingb.JBSplitPane schemaItemsSplitPane;
    private com.cosmos.swingb.JBTitledPanel schemaItemsTitledPanel;
    private com.cosmos.swingb.JBPanel schemasTablePanel;
    // End of variables declaration//GEN-END:variables


    private AssemblingSchemasTablePanel assemblingSchemasTablePanel;
    private SchemaItemsTablePanel schemaItemsTablePanel;
    private ItemValuesTablePanel itemValuesTablePanel;

    @Override
    protected void initData()
    {
        JPanel panel = getAssemblingSchemasTablePanel();
        Dimension size = panel.getPreferredSize();
        int width = size.width;
        panel = getSchemaItemsTablePanel();
        size = panel.getPreferredSize();
        if(size.width > 0)
            width = (width + size.width) / 2;
        assemblingSchemasSplitPane.setDividerLocation(width);
    }

    private AssemblingSchemasTablePanel getAssemblingSchemasTablePanel()
    {
        if(assemblingSchemasTablePanel == null)
        {
            assemblingSchemasTablePanel = new AssemblingSchemasTablePanel();
        }

        return assemblingSchemasTablePanel;
    }

    private SchemaItemsTablePanel getSchemaItemsTablePanel()
    {
        if(schemaItemsTablePanel == null)
        {
            schemaItemsTablePanel = new SchemaItemsTablePanel();
        }

        return schemaItemsTablePanel;
    }

    private ItemValuesTablePanel getItemValuesTablePanel()
    {
        if(itemValuesTablePanel == null)
        {
            itemValuesTablePanel = new ItemValuesTablePanel();
        }

        return itemValuesTablePanel;
    }


    protected AssemblingRemote getFormSession()
    {
        if(formSession == null)
        {
            formSession = getRemoteBean(this, AssemblingRemote.class);
        }

        return formSession;
    }

    private class AssemblingSchemasTablePanel
        extends AbstractTablePanel
    {
        private BindingGroup schemasBindingGroup;
        //private List<SimpleProduct> products;

        private EntityProperties entityProps;

        private AssemblingCategory category;


        public AssemblingSchemasTablePanel()
        {
        }

        @Override
        protected void initData()
        {
            super.initData();
            setVisible(AbstractTablePanel.Button.Classify, false);

            entityProps = getFormSession().getAssemblingSchemaEntityProperties();

            List<PropertyDetails> propertyDetails = 
                new ArrayList<PropertyDetails>(entityProps.getValues());

            //set custom display for 'assemblingCategory'
            //setCustomDisplay(propertyDetails, "assemblingCategory", 
            //    "${assemblingCategory.categoryName}");

            /*
            //set custom display for 'patternMaskFormat'
            setCustomDisplay(propertyDetails, "patternMaskFormat", 
                "${patternMaskFormat.patternName} (${patternMaskFormat.format})");

            //set custom display for 'producer'
            setCustomDisplay(propertyDetails, "producer", "${producer.displayName}");

            //add column
            addColumn(55, getString("ProductList.codeFormatted"), "${codeFormatted}", entityProps);
            */

            refreshDataTable(entityProps);
        }

        private void refreshDataTable(EntityProperties entProps)
        {
            if(schemasBindingGroup != null)
                schemasBindingGroup.unbind();

            schemasBindingGroup = new BindingGroup();

            assemblingCategoryLookup.getSelectedItem();

            AcaciaTable productsTable = getDataTable();

            /*JTableBinding tableBinding = productsTable.bind(schemasBindingGroup, getProducts(), entityProps, UpdateStrategy.READ);

            tableBinding.setEditable(false);
            productsTable.bindComboBoxCellEditor(schemasBindingGroup, getMeasureUnits(), entityProps.getPropertyDetails("measureUnit"));
            productsTable.bindComboBoxCellEditor(schemasBindingGroup, getMeasureUnits(MeasurementUnit.Category.Volume), entityProps.getPropertyDetails("dimensionUnit"));
            productsTable.bindComboBoxCellEditor(schemasBindingGroup, getMeasureUnits(MeasurementUnit.Category.MassWeight), entityProps.getPropertyDetails("weightUnit"));
            productsTable.bindComboBoxCellEditor(schemasBindingGroup, getFormSession().getProductColors(), entityProps.getPropertyDetails("productColor"));*/

            schemasBindingGroup.bind();
        }

         protected Object onChooseCity()
         {
            /*AssemblingCategoryListPanel listPanel = new AssemblingCategoryListPanel(category);

            log.info("Displaying cities for country: " + country);

            DialogResponse dResponse = listPanel.showDialog(this);
            if ( DialogResponse.SELECT.equals(dResponse) ){
                City selectedCity = (City) listPanel.getSelectedRowObject();
                if (countryComboBox.getSelectedItem() == null)
                    countryComboBox.setSelectedItem(selectedCity.getCountry());

                return selectedCity;
            } else {
                return null;
            }*/

             return null;
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private class SchemaItemsTablePanel
        extends AbstractTablePanel
    {
        public SchemaItemsTablePanel()
        {
        }

        @Override
        protected void initData()
        {
            super.initData();
            setVisible(AbstractTablePanel.Button.Classify, false);
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private class ItemValuesTablePanel
        extends AbstractTablePanel
    {
        public ItemValuesTablePanel()
        {
        }

        @Override
        protected void initData()
        {
            super.initData();
            setVisible(AbstractTablePanel.Button.Classify, false);
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }
}
