/*
 * LoginForm.java
 *
 * Created on 25 June 2008, 19:33
 */

package com.cosmos.acacia.crm.gui.users;

import com.cosmos.acacia.app.AcaciaSession;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.math.BigInteger;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.UnsupportedCallbackException;

import org.apache.log4j.Logger;
import org.jdesktop.application.Action;

import com.cosmos.acacia.app.AppSession;
import com.cosmos.acacia.crm.gui.users.UserUtils;
import com.cosmos.acacia.crm.bl.users.UsersRemote;
import com.cosmos.acacia.crm.data.User;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.swingb.DialogResponse;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.util.Locale;
import java.util.prefs.Preferences;
import javax.security.auth.callback.CallbackHandler;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class LoginForm extends AcaciaPanel {

    private static final String USERNAME = "username";
    private static final String PASSWORD = "password";
    private static final String LOCALE = "locale";

    protected static Logger log = Logger.getLogger(LoginForm.class);

    /** Creates new form LoginForm */
    public LoginForm(BigInteger parentId) {
        super(parentId);
        initComponents();
        initData();
    }

    /** Creates new form LoginForm */
    public LoginForm() {
        super((BigInteger) null);
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new com.cosmos.swingb.JBLabel();
        passwordLabel = new com.cosmos.swingb.JBLabel();
        usernameTextField = new com.cosmos.swingb.JBTextField();
        loginButton = new com.cosmos.swingb.JBButton();
        rememberMeCheckBox = new com.cosmos.swingb.JBCheckBox();
        rememberPasswordCheckBox = new com.cosmos.swingb.JBCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        forgottenPasswordButton = new com.cosmos.swingb.JBButton();
        newRegistrationButton = new com.cosmos.swingb.JBButton();
        jSeparator2 = new javax.swing.JSeparator();
        localeComboBox = new com.cosmos.swingb.JBComboBox();
        localeLabel = new com.cosmos.swingb.JBLabel();
        passwordTextField = new com.cosmos.swingb.JBPasswordField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(LoginForm.class);
        usernameLabel.setText(resourceMap.getString("usernameLabel.text")); // NOI18N
        usernameLabel.setName("usernameLabel"); // NOI18N

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        usernameTextField.setText(resourceMap.getString("usernameTextField.text")); // NOI18N
        usernameTextField.setName("usernameTextField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(LoginForm.class, this);
        loginButton.setAction(actionMap.get("login")); // NOI18N
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N

        rememberMeCheckBox.setText(resourceMap.getString("rememberMeCheckBox.text")); // NOI18N
        rememberMeCheckBox.setName("rememberMeCheckBox"); // NOI18N

        rememberPasswordCheckBox.setText(resourceMap.getString("rememberPasswordCheckBox.text")); // NOI18N
        rememberPasswordCheckBox.setName("rememberPasswordCheckBox"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        forgottenPasswordButton.setAction(actionMap.get("remindPassword")); // NOI18N
        forgottenPasswordButton.setText(resourceMap.getString("forgottenPasswordButton.text")); // NOI18N
        forgottenPasswordButton.setName("forgottenPasswordButton"); // NOI18N

        newRegistrationButton.setAction(actionMap.get("signup")); // NOI18N
        newRegistrationButton.setText(resourceMap.getString("newRegistrationButton.text")); // NOI18N
        newRegistrationButton.setName("newRegistrationButton"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        localeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        localeComboBox.setName("localeComboBox"); // NOI18N

        localeLabel.setText(resourceMap.getString("localeLabel.text")); // NOI18N
        localeLabel.setName("localeLabel"); // NOI18N

        passwordTextField.setText(resourceMap.getString("passwordTextField.text")); // NOI18N
        passwordTextField.setName("passwordTextField"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rememberMeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rememberPasswordCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(localeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(localeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(forgottenPasswordButton, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newRegistrationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rememberPasswordCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rememberMeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forgottenPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(126, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(44, 44, 44)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton forgottenPasswordButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private com.cosmos.swingb.JBComboBox localeComboBox;
    private com.cosmos.swingb.JBLabel localeLabel;
    private com.cosmos.swingb.JBButton loginButton;
    private com.cosmos.swingb.JBButton newRegistrationButton;
    private com.cosmos.swingb.JBLabel passwordLabel;
    private com.cosmos.swingb.JBPasswordField passwordTextField;
    private com.cosmos.swingb.JBCheckBox rememberMeCheckBox;
    private com.cosmos.swingb.JBCheckBox rememberPasswordCheckBox;
    private com.cosmos.swingb.JBLabel usernameLabel;
    private com.cosmos.swingb.JBTextField usernameTextField;
    // End of variables declaration//GEN-END:variables


    private UsersRemote formSession;
    private int dummyCharsAdded = 0;
    @Override
    protected void initData() {
        //loginButton.isDefaultButton();
        localeComboBox.removeAllItems();
        Locale[] locales = getFormSession().serveLocalesList();
        if (locales != null) {
            for (Locale locale : locales) {
                localeComboBox.addItem(locale);
            }
        }

        // Load the saved preferences for this machine
        final Preferences prefs = Preferences.userRoot();

        localeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                prefs.put(LOCALE, ((Locale) localeComboBox.getSelectedItem()).getLanguage());
            }
        });

        String username = prefs.get(USERNAME, null);
        if (username != null) {
            rememberMeCheckBox.setSelected(true);
            usernameTextField.setText(username);
        }

        String password = prefs.get(PASSWORD, null);
        if (password != null) {
            rememberPasswordCheckBox.setSelected(true);
            try {
                passwordTextField.setText(maskPassword(new String(getFormSession().decryptPassword(password))));
            } catch (NullPointerException ex){
                ex.printStackTrace();
                prefs.remove(PASSWORD);
            }
        }
        
        passwordTextField.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e) {
                dummyCharsAdded = 0;
            }
        });
        
        String locale = prefs.get(LOCALE, null);
        if (locale != null)
            localeComboBox.setSelectedItem(new Locale(locale));

        // preferences loaded

        AppSession.get().setValue(AppSession.USER_LOCALE, localeComboBox.getSelectedItem());
        this.requestFocus();
    }

    @Action
    public void login() {

        Preferences prefs = Preferences.userRoot();
        String username = usernameTextField.getText();
        if (rememberMeCheckBox.isSelected())
            prefs.put(USERNAME, username);
        else
            prefs.remove(PASSWORD);

        char[] password = passwordTextField.getPassword();

        if (rememberPasswordCheckBox.isSelected()) {
            String encryptedPassword = getFormSession().encryptPassword(password);
            prefs.put(PASSWORD, encryptedPassword);
        } else
            prefs.remove(PASSWORD);

        try {
            prefs.flush();
        } catch (Exception ex) {
            log.error("", ex);
        }

        User user = getFormSession().login(username, unmaskPassword(new String(password)).toCharArray());
        
        if (!exceptionOccurred) {
            getFormSession().updateOrganization(user, new OrganizationChoiceHandler());
            //Organization organizationDataObject =

            log.info(AppSession.get().getValue(AcaciaSession.USER_KEY));
            log.info(AppSession.get().getValue(AcaciaSession.ORGANIZATION_KEY));

            setDialogResponse(DialogResponse.LOGIN);
            close();
        } else {
            exceptionOccurred = false;
        }
            
    }

    @Action
    public void signup() {
        RequestRegistrationForm reqRegForm = new RequestRegistrationForm();
        reqRegForm.showDialog(this);
    }

    @Action
    public void remindPassword() {
    }
    
    private static final int SHOW_CHARS = 32;
    private String maskPassword(String password) {
        if (password == null || password.length() == 0)
            return password;
        
        String maskedPassword = new String(password);
        dummyCharsAdded = 32 - password.length();
        for (int i = 0; i < dummyCharsAdded; i ++) {
            maskedPassword += "a";
        }
        return maskedPassword;
    }
    
    private String unmaskPassword(String maskedPassword) {
        if (dummyCharsAdded == 0)
            return maskedPassword;
        
        String password = maskedPassword.substring(0, SHOW_CHARS - dummyCharsAdded);
        return password;
    }
    
    protected UsersRemote getFormSession()
    {
        if (formSession == null) {
            try
            {
                formSession = getBean(UsersRemote.class);
                UserUtils.updateUserLocale(formSession);
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }
        return formSession;
    }
}

class OrganizationChoiceHandler implements CallbackHandler, Serializable {

    @Override
    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        //callbacks[0
    }
}