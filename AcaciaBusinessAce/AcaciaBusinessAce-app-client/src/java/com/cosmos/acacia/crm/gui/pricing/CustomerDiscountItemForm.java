/*
 * CustomerDiscountItemForm.java
 *
 * Created on Петък, 2009, Януари 9, 18:56
 */

package com.cosmos.acacia.crm.gui.pricing;

import static com.cosmos.acacia.util.AcaciaUtils.getDecimalFormat;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.MathContext;
import java.text.MessageFormat;
import java.util.Arrays;

import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingx.combobox.ListComboBoxModel;

import com.cosmos.acacia.crm.bl.impl.BaseRemote;
import com.cosmos.acacia.crm.bl.pricing.CustomerDiscountRemote;
import com.cosmos.acacia.crm.data.CustomerDiscount;
import com.cosmos.acacia.crm.data.CustomerDiscountItem;
import com.cosmos.acacia.crm.gui.BaseItemForm;
import com.cosmos.acacia.crm.gui.ProductCategoriesTreePanel;
import com.cosmos.acacia.crm.gui.ProductsListPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.swingb.JBFormattedTextField;

/**
 * 
 * Created	:	18.01.2009
 * @author	Petar Milev
 *
 */
public class CustomerDiscountItemForm extends BaseItemForm<CustomerDiscount, CustomerDiscountItem>{

    private boolean forProduct;
    
    public CustomerDiscountItemForm(CustomerDiscountItem entity, CustomerDiscount parent, boolean forProduct) {
        super(entity, parent);
        this.forProduct = forProduct;
        initialize();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityFormButtonPanel1 = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        productVersionPanel = new com.cosmos.swingb.JBPanel();
        productField = new com.cosmos.acacia.gui.AcaciaComboList();
        productDiscountPercentField = new com.cosmos.swingb.JBPercentField();
        defaultDiscountLabel = new com.cosmos.swingb.JBLabel();
        productLabel = new com.cosmos.swingb.JBLabel();
        salesPriceLabel = new com.cosmos.swingb.JBLabel();
        discountLabel = new com.cosmos.swingb.JBLabel();
        customerPriceLabel = new com.cosmos.swingb.JBLabel();
        salesPriceDecimalField = new com.cosmos.swingb.JBDecimalField();
        customerPriceDecimalField = new com.cosmos.swingb.JBDecimalField();
        categoryVersionPanel = new com.cosmos.swingb.JBPanel();
        includeHeirs = new com.cosmos.swingb.JBCheckBox();
        categoryField = new com.cosmos.acacia.gui.AcaciaComboList();
        categoryLabel = new com.cosmos.swingb.JBLabel();
        includeHeirsLabel = new com.cosmos.swingb.JBLabel();
        categoryDiscountLabel = new com.cosmos.swingb.JBLabel();
        categoryDiscountPercentField = new com.cosmos.swingb.JBPercentField();

        setName("Form"); // NOI18N

        entityFormButtonPanel1.setName("entityFormButtonPanel1"); // NOI18N

        productVersionPanel.setName("productVersionPanel"); // NOI18N

        productField.setName("productField"); // NOI18N

        productDiscountPercentField.setName("productDiscountPercentField"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(CustomerDiscountItemForm.class);
        defaultDiscountLabel.setText(resourceMap.getString("defaultDiscountLabel.text")); // NOI18N
        defaultDiscountLabel.setName("defaultDiscountLabel"); // NOI18N

        productLabel.setText(resourceMap.getString("productLabel.text")); // NOI18N
        productLabel.setName("productLabel"); // NOI18N

        salesPriceLabel.setText(resourceMap.getString("salesPriceLabel.text")); // NOI18N
        salesPriceLabel.setName("salesPriceLabel"); // NOI18N

        discountLabel.setText(resourceMap.getString("discountLabel.text")); // NOI18N
        discountLabel.setName("discountLabel"); // NOI18N

        customerPriceLabel.setText(resourceMap.getString("customerPriceLabel.text")); // NOI18N
        customerPriceLabel.setName("customerPriceLabel"); // NOI18N

        salesPriceDecimalField.setEditable(false);
        salesPriceDecimalField.setName("salesPriceDecimalField"); // NOI18N

        customerPriceDecimalField.setEditable(false);
        customerPriceDecimalField.setName("customerPriceDecimalField"); // NOI18N

        javax.swing.GroupLayout productVersionPanelLayout = new javax.swing.GroupLayout(productVersionPanel);
        productVersionPanel.setLayout(productVersionPanelLayout);
        productVersionPanelLayout.setHorizontalGroup(
            productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productVersionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productVersionPanelLayout.createSequentialGroup()
                        .addComponent(productDiscountPercentField, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(defaultDiscountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(salesPriceDecimalField, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addComponent(customerPriceDecimalField, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))
                .addContainerGap())
        );
        productVersionPanelLayout.setVerticalGroup(
            productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productVersionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(productLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salesPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesPriceDecimalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productDiscountPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultDiscountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerPriceDecimalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        categoryVersionPanel.setName("categoryVersionPanel"); // NOI18N

        includeHeirs.setName("includeHeirs"); // NOI18N

        categoryField.setName("categoryField"); // NOI18N

        categoryLabel.setText(resourceMap.getString("categoryLabel.text")); // NOI18N
        categoryLabel.setName("categoryLabel"); // NOI18N

        includeHeirsLabel.setText(resourceMap.getString("includeHeirsLabel.text")); // NOI18N
        includeHeirsLabel.setName("includeHeirsLabel"); // NOI18N

        categoryDiscountLabel.setText(resourceMap.getString("categoryDiscountLabel.text")); // NOI18N
        categoryDiscountLabel.setName("categoryDiscountLabel"); // NOI18N

        categoryDiscountPercentField.setName("categoryDiscountPercentField"); // NOI18N

        javax.swing.GroupLayout categoryVersionPanelLayout = new javax.swing.GroupLayout(categoryVersionPanel);
        categoryVersionPanel.setLayout(categoryVersionPanelLayout);
        categoryVersionPanelLayout.setHorizontalGroup(
            categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryVersionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(includeHeirsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryDiscountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(includeHeirs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(categoryVersionPanelLayout.createSequentialGroup()
                        .addComponent(categoryField, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, categoryVersionPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(categoryDiscountPercentField, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        categoryVersionPanelLayout.setVerticalGroup(
            categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, categoryVersionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(includeHeirsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(includeHeirs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(categoryVersionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryDiscountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryDiscountPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productVersionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
            .addComponent(categoryVersionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(productVersionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryVersionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel categoryDiscountLabel;
    private com.cosmos.swingb.JBPercentField categoryDiscountPercentField;
    private com.cosmos.acacia.gui.AcaciaComboList categoryField;
    private com.cosmos.swingb.JBLabel categoryLabel;
    private com.cosmos.swingb.JBPanel categoryVersionPanel;
    private com.cosmos.swingb.JBDecimalField customerPriceDecimalField;
    private com.cosmos.swingb.JBLabel customerPriceLabel;
    private com.cosmos.swingb.JBLabel defaultDiscountLabel;
    private com.cosmos.swingb.JBLabel discountLabel;
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel1;
    private com.cosmos.swingb.JBCheckBox includeHeirs;
    private com.cosmos.swingb.JBLabel includeHeirsLabel;
    private com.cosmos.swingb.JBPercentField productDiscountPercentField;
    private com.cosmos.acacia.gui.AcaciaComboList productField;
    private com.cosmos.swingb.JBLabel productLabel;
    private com.cosmos.swingb.JBPanel productVersionPanel;
    private com.cosmos.swingb.JBDecimalField salesPriceDecimalField;
    private com.cosmos.swingb.JBLabel salesPriceLabel;
    // End of variables declaration//GEN-END:variables


    private boolean bound = false;

    @Override
    protected void bindComponents(BindingGroup bindGroup, EntityProperties entProps) {
        if ( forProduct ){
            // product
            if ( entity.getProduct()==null ){
                ProductsListPanel productList = new ProductsListPanel(getOrganizationDataObjectId());
                productField.bind(
                    bindGroup, 
                    productList,
                    entity,
                    getDetails("product"),
                    "${productName}",
                    UpdateStrategy.READ_WRITE);
                productField.addItemListener(new ItemListener() {
                    public void itemStateChanged(ItemEvent e) {
                        onProduct();
                    }
                }, true);
            }else{
                productField.getComboBox().setModel(new ListComboBoxModel(Arrays.asList(new Serializable(){
                    @Override
                    public String toString() {
                        return entity.getProduct().getProductDisplay();
                    }
                })));
                productField.getComboBox().setSelectedIndex(0);
                productField.setEnabled(false);
            }
            
            // discount
            Binding binding =
                    productDiscountPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("discountPercent"));
            binding.addBindingListener(new AbstractBindingListener() {
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    onDiscount();
                }
            });
        }else{
            // category
            if ( entity.getCategory()==null ){
                ProductCategoriesTreePanel categoriesPanel = new ProductCategoriesTreePanel(getOrganizationDataObjectId());
                categoryField.bind(bindGroup, categoriesPanel, entity, getDetails("category"));
                categoryField.addItemListener(new ItemListener() {
                    public void itemStateChanged(ItemEvent e) {
                        onCategory();
                    }
                }, true);
            }else{
                categoryField.getComboBox().setModel(new ListComboBoxModel(Arrays.asList(new Serializable(){
                    @Override
                    public String toString() {
                        return entity.getCategory().getCategoryName();
                    }
                })));
                categoryField.getComboBox().setSelectedIndex(0);
                categoryField.setEnabled(false);
            }
            
            // include heirs
            includeHeirs.bind(bindGroup, entity, entProps.getPropertyDetails("includeHeirs"));
            
            // discount
            Binding binding =
                    categoryDiscountPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("discountPercent"));
            binding.addBindingListener(new AbstractBindingListener() {
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    onDiscount();
                }
            });
        }
        
        bindGroup.bind();
        bound = true;
        
        afterBind();
    }
    
    protected void onCategory() {
    }
    protected void onProduct() {
        updatePrice();
    }
    protected void onDiscount() {
        updatePrice();
    }
    
    private void updatePrice() {
        if (!bound) {
            return;
        }
        
        if ( entity.getProduct()!=null ){
            // sale price
            String salePrice = "";
            if ( entity.getProduct().getSalePrice()!=null )
                salePrice = getDecimalFormat().format(entity.getProduct().getSalePrice());
            salesPriceDecimalField.setText((salePrice));
        }else{
            salesPriceDecimalField.setText("");
        }
        
        if ( !bindGroup.isContentValid() )
            customerPriceDecimalField.setText("");
        else{
            if ( entity.getProduct()!=null ){
                // price
                BigDecimal price = getPrice();
                customerPriceDecimalField.setText(getDecimalFormat().format(price));
            }else{
                customerPriceDecimalField.setText("");
            }
        }
    }
    
    private void afterBind() {
        if ( forProduct ){
            // default discount
            String defaultDiscountString = "0";
            if ( parent.getDiscountPercent()!=null )
                defaultDiscountString = getDecimalFormat().format(parent.getDiscountPercent());
            defaultDiscountLabel.setText(MessageFormat.format(getResourceMap().getString("defaultDiscountLabel.text"), defaultDiscountString));
            
            updatePrice();
        }
    }
    
    private BigDecimal getPrice() {
        //sale price
        BigDecimal salePrice = entity.getProduct().getSalePrice();
        if ( salePrice==null )
            return null;
        
        BigDecimal result = salePrice;
        
        //discount
        BigDecimal discountPercent = entity.getDiscountPercent();
        if (discountPercent==null)
            discountPercent = parent.getDiscountPercent();
        if ( discountPercent!=null ){
            BigDecimal discountPercentDec = discountPercent.divide(new BigDecimal(100), MathContext.DECIMAL64);
            result = result.subtract(result.multiply(discountPercentDec));
        }
        
        return result;
    }
    
    @Override
    protected void initComponentsCustom() {
        categoryVersionPanel.setVisible(!forProduct);
        productVersionPanel.setVisible(forProduct);
        salesPriceDecimalField.setHorizontalAlignment(JBFormattedTextField.TRAILING);
        customerPriceDecimalField.setHorizontalAlignment(JBFormattedTextField.TRAILING);
    }
    
    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel1;
    }
    @Override
    protected void createComponents() {
        initComponents();
    }
    @Override
    protected Class<? extends BaseRemote<CustomerDiscount, CustomerDiscountItem>> getFormSessionClass() {
        return CustomerDiscountRemote.class;
    }
}
