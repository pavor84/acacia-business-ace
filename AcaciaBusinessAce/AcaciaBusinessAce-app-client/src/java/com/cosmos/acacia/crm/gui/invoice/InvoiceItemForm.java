/*
 * InvoiceItemFormDraft.java
 *
 * Created on Сряда, 2008, Август 20, 15:07
 */

package com.cosmos.acacia.crm.gui.invoice;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.ButtonGroup;

import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

import com.cosmos.acacia.crm.bl.impl.ProductsListRemote;
import com.cosmos.acacia.crm.bl.invoice.InvoiceListRemote;
import com.cosmos.acacia.crm.data.ComplexProduct;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.InvoiceItem;
import com.cosmos.acacia.crm.data.Product;
import com.cosmos.acacia.crm.data.SimpleProduct;
import com.cosmos.acacia.crm.gui.ProductsListPanel;
import com.cosmos.acacia.crm.gui.warehouse.WarehouseListPanel;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.JBRadioButton;
import com.cosmos.swingb.SelectableListDialog;

/**
 * 
 * Created	:	10.09.2008
 * @author	Petar Milev
 *
 */
public class InvoiceItemForm extends BaseEntityPanel {

    private InvoiceItem entity;

    /** Creates new form InvoiceFormDraft */
    public InvoiceItemForm(InvoiceItem item) {
        super(item.getParentId());
        this.entity = item;
        initialize();
    }

    private void initialize() {
        initComponents();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBLabel1 = new com.cosmos.swingb.JBLabel();
        productField = new com.cosmos.acacia.gui.AcaciaComboList();
        measureUnitField = new com.cosmos.swingb.JBComboBox();
        jBLabel2 = new com.cosmos.swingb.JBLabel();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        orderedQtyField = new com.cosmos.swingb.JBTextField();
        shippedQtyField = new com.cosmos.swingb.JBTextField();
        jBLabel4 = new com.cosmos.swingb.JBLabel();
        returnedQtyField = new com.cosmos.swingb.JBTextField();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        jBLabel6 = new com.cosmos.swingb.JBLabel();
        unitPriceField = new com.cosmos.swingb.JBTextField();
        extendedPriceField = new com.cosmos.swingb.JBTextField();
        jBLabel8 = new com.cosmos.swingb.JBLabel();
        jBLabel7 = new com.cosmos.swingb.JBLabel();
        jBLabel9 = new com.cosmos.swingb.JBLabel();
        jBLabel10 = new com.cosmos.swingb.JBLabel();
        shipDateToField = new com.cosmos.swingb.JBDatePicker();
        shipDateFromField = new com.cosmos.swingb.JBDatePicker();
        shipWeekField = new com.cosmos.swingb.JBTextField();
        warehouseForShipField = new com.cosmos.acacia.gui.AcaciaComboList();
        jBLabel11 = new com.cosmos.swingb.JBLabel();
        jBLabel28 = new com.cosmos.swingb.JBLabel();
        totalItemDiscountValueField = new com.cosmos.swingb.JBTextField();
        totalItemDiscountPercentField = new com.cosmos.swingb.JBTextField();
        jBLabel33 = new com.cosmos.swingb.JBLabel();
        jBLabel12 = new com.cosmos.swingb.JBLabel();
        entityFormButtonPanel1 = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        productTypeRadioSimple = new com.cosmos.swingb.JBRadioButton();
        productTypeRadioComplex = new com.cosmos.swingb.JBRadioButton();
        jBLabel13 = new com.cosmos.swingb.JBLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productDescriptionField = new com.cosmos.swingb.JBTextPane();
        jBLabel14 = new com.cosmos.swingb.JBLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesField = new com.cosmos.swingb.JBTextPane();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(InvoiceItemForm.class);
        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        productField.setName("productField"); // NOI18N

        measureUnitField.setName("measureUnitField"); // NOI18N

        jBLabel2.setText(resourceMap.getString("jBLabel2.text")); // NOI18N
        jBLabel2.setName("jBLabel2"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        orderedQtyField.setName("orderedQtyField"); // NOI18N

        shippedQtyField.setEditable(false);
        shippedQtyField.setName("shippedQtyField"); // NOI18N

        jBLabel4.setText(resourceMap.getString("jBLabel4.text")); // NOI18N
        jBLabel4.setName("jBLabel4"); // NOI18N

        returnedQtyField.setEditable(false);
        returnedQtyField.setName("returnedQtyField"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        jBLabel6.setText(resourceMap.getString("jBLabel6.text")); // NOI18N
        jBLabel6.setName("jBLabel6"); // NOI18N

        unitPriceField.setName("unitPriceField"); // NOI18N

        extendedPriceField.setEditable(false);
        extendedPriceField.setName("extendedPriceField"); // NOI18N

        jBLabel8.setText(resourceMap.getString("jBLabel8.text")); // NOI18N
        jBLabel8.setName("jBLabel8"); // NOI18N

        jBLabel7.setText(resourceMap.getString("jBLabel7.text")); // NOI18N
        jBLabel7.setName("jBLabel7"); // NOI18N

        jBLabel9.setText(resourceMap.getString("jBLabel9.text")); // NOI18N
        jBLabel9.setName("jBLabel9"); // NOI18N

        jBLabel10.setText(resourceMap.getString("jBLabel10.text")); // NOI18N
        jBLabel10.setName("jBLabel10"); // NOI18N

        shipDateToField.setName("shipDateToField"); // NOI18N

        shipDateFromField.setName("shipDateFromField"); // NOI18N

        shipWeekField.setName("shipWeekField"); // NOI18N

        warehouseForShipField.setName("warehouseForShipField"); // NOI18N

        jBLabel11.setText(resourceMap.getString("jBLabel11.text")); // NOI18N
        jBLabel11.setName("jBLabel11"); // NOI18N

        jBLabel28.setText(resourceMap.getString("jBLabel28.text")); // NOI18N
        jBLabel28.setName("jBLabel28"); // NOI18N

        totalItemDiscountValueField.setName("totalItemDiscountValueField"); // NOI18N

        totalItemDiscountPercentField.setName("totalItemDiscountPercentField"); // NOI18N

        jBLabel33.setText(resourceMap.getString("jBLabel33.text")); // NOI18N
        jBLabel33.setName("jBLabel33"); // NOI18N

        jBLabel12.setText(resourceMap.getString("jBLabel12.text")); // NOI18N
        jBLabel12.setName("jBLabel12"); // NOI18N

        entityFormButtonPanel1.setName("entityFormButtonPanel1"); // NOI18N

        productTypeRadioSimple.setMnemonic('S');
        productTypeRadioSimple.setText(resourceMap.getString("productTypeRadioSimple.text")); // NOI18N
        productTypeRadioSimple.setName("productTypeRadioSimple"); // NOI18N

        productTypeRadioComplex.setMnemonic('C');
        productTypeRadioComplex.setText(resourceMap.getString("productTypeRadioComplex.text")); // NOI18N
        productTypeRadioComplex.setName("productTypeRadioComplex"); // NOI18N

        jBLabel13.setText(resourceMap.getString("jBLabel13.text")); // NOI18N
        jBLabel13.setName("jBLabel13"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        productDescriptionField.setName("productDescriptionField"); // NOI18N
        jScrollPane2.setViewportView(productDescriptionField);

        jBLabel14.setText(resourceMap.getString("jBLabel14.text")); // NOI18N
        jBLabel14.setName("jBLabel14"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        notesField.setName("notesField"); // NOI18N
        jScrollPane3.setViewportView(notesField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(jBLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(jBLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(productTypeRadioSimple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(productTypeRadioComplex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(productField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(measureUnitField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderedQtyField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shippedQtyField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnedQtyField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addComponent(unitPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(totalItemDiscountValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalItemDiscountPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(extendedPriceField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(shipWeekField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                        .addGap(387, 387, 387))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                            .addComponent(jBLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(shipDateToField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(shipDateFromField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(warehouseForShipField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productTypeRadioSimple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productTypeRadioComplex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shippedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extendedPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalItemDiscountValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalItemDiscountPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shipWeekField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shipDateFromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shipDateToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(warehouseForShipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel1;
    private com.cosmos.swingb.JBTextField extendedPriceField;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel10;
    private com.cosmos.swingb.JBLabel jBLabel11;
    private com.cosmos.swingb.JBLabel jBLabel12;
    private com.cosmos.swingb.JBLabel jBLabel13;
    private com.cosmos.swingb.JBLabel jBLabel14;
    private com.cosmos.swingb.JBLabel jBLabel2;
    private com.cosmos.swingb.JBLabel jBLabel28;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.swingb.JBLabel jBLabel33;
    private com.cosmos.swingb.JBLabel jBLabel4;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBLabel jBLabel6;
    private com.cosmos.swingb.JBLabel jBLabel7;
    private com.cosmos.swingb.JBLabel jBLabel8;
    private com.cosmos.swingb.JBLabel jBLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.cosmos.swingb.JBComboBox measureUnitField;
    private com.cosmos.swingb.JBTextPane notesField;
    private com.cosmos.swingb.JBTextField orderedQtyField;
    private com.cosmos.swingb.JBTextPane productDescriptionField;
    private com.cosmos.acacia.gui.AcaciaComboList productField;
    private com.cosmos.swingb.JBRadioButton productTypeRadioComplex;
    private com.cosmos.swingb.JBRadioButton productTypeRadioSimple;
    private com.cosmos.swingb.JBTextField returnedQtyField;
    private com.cosmos.swingb.JBDatePicker shipDateFromField;
    private com.cosmos.swingb.JBDatePicker shipDateToField;
    private com.cosmos.swingb.JBTextField shipWeekField;
    private com.cosmos.swingb.JBTextField shippedQtyField;
    private com.cosmos.swingb.JBTextField totalItemDiscountPercentField;
    private com.cosmos.swingb.JBTextField totalItemDiscountValueField;
    private com.cosmos.swingb.JBTextField unitPriceField;
    private com.cosmos.acacia.gui.AcaciaComboList warehouseForShipField;
    // End of variables declaration//GEN-END:variables

    private BindingGroup bindGroup;
    private InvoiceListRemote formSession;
    private EntityProperties entProps;
    private ProductsListRemote productListRemote;
    private boolean updatingShipDates;
    private Date lastShipDateFrom;
    private static Date lastShipDateTo;
    
    @Override
    public BindingGroup getBindingGroup() {
        return bindGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel1;
    }

    @Override
    public InvoiceItem getEntity() {
        return entity;
    }

    @Override
    public void performSave(boolean closeAfter) {
        entity = getFormSession().saveInvoiceItem(entity);
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(entity);
        if (closeAfter) {
            close();
        } else {
            bindGroup.unbind();
            initData();
        }
    }

    private InvoiceListRemote getFormSession() {
        if ( formSession==null )
            formSession = getBean(InvoiceListRemote.class);
        return formSession;
    }

    boolean updatingAmounts = false;
    ButtonGroup productTypeGroup = null;
    
    @SuppressWarnings("unchecked")
    @Override
    protected void initData() {
        entProps = getFormSession().getItemDetailEntityProperties();
        
        AcaciaToStringConverter resourceToStringConverter = new AcaciaToStringConverter();
        AutoCompleteDecorator.decorate(measureUnitField, resourceToStringConverter);
        
        bindGroup = new BindingGroup();
        
        productTypeGroup = new ButtonGroup();
        productTypeGroup.add(productTypeRadioSimple);
        productTypeGroup.add(productTypeRadioComplex);
        if ( entity.getProduct() instanceof ComplexProduct ){
            productTypeGroup.setSelected(productTypeRadioComplex.getModel(), true);
        }else{
            productTypeGroup.setSelected(productTypeRadioSimple.getModel(), true);
        }
        ActionListener productTypeListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onProductTypeAction((JBRadioButton)e.getSource());
            }
        };
        productTypeRadioSimple.addActionListener(productTypeListener);
        productTypeRadioComplex.addActionListener(productTypeListener);
        
        //auto set the dates if the item is new
        if ( entity.getId()==null && (lastShipDateTo!=null || lastShipDateFrom!=null) ){
            entity.setShipDateFrom(lastShipDateFrom);
            entity.setShipDateTo(lastShipDateTo);
        }
        
        //product
        bindProductField( entity.getProduct() instanceof ComplexProduct );
        
        //measure unit 
        measureUnitField.bind(bindGroup, getMeasureUnits(), entity, entProps.getPropertyDetails("measureUnit"));
        
        //ordered quantity
        Binding orderedQtyBinding = orderedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("orderedQuantity"));
        orderedQtyBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateExtendedPrice(binding.isContentValid());
            }
        });
        
        //shipped quantity
        shippedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("shippedQuantity"));
        
        //returned quantity
        returnedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("returnedQuantity"));

        //unit price
        Binding unitPriceBinding = unitPriceField.bind(bindGroup, entity, entProps.getPropertyDetails("unitPrice"));
        unitPriceBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateExtendedPrice(binding.isContentValid());
            }
        });
        
        //extended price
        extendedPriceField.bind(bindGroup, entity, entProps.getPropertyDetails("extendedPrice"));
        
        //variable for re-use
        Binding amountsBinding = null;
        
        //discount value 
        amountsBinding = totalItemDiscountValueField.bind(bindGroup, entity, entProps.getPropertyDetails("discountAmount"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( updatingAmounts )
                    return; 
                else{
                    updatingAmounts = true;
                    updateDiscountPercent(binding.isContentValid());
                    updatingAmounts = false;
                }
            }
        });
        
        //discount percent
        amountsBinding = totalItemDiscountPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("discountPercent"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( updatingAmounts )
                    return;
                else{
                    updatingAmounts = true;
                    updateDiscountAmount(binding.isContentValid());
                    updatingAmounts = false;
                }
            }
        });
        
        //ship week
        shipWeekField.bind(bindGroup, entity, entProps.getPropertyDetails("shipWeek"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipDates(binding.isContentValid());
                }
            });
        
        //ship date from
        shipDateFromField.bind(bindGroup, entity, entProps.getPropertyDetails("shipDateFrom"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipWeek(binding.isContentValid(), true, true);
                }
            });
        
        //ship date to
        shipDateToField.bind(bindGroup, entity, entProps.getPropertyDetails("shipDateTo"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipWeek(binding.isContentValid(), false, true);
                }
            });
        
        //warehouse
        PropertyDetails pd = entProps.getPropertyDetails("warehouse");
        pd.setRequired(true);
        WarehouseListPanel warehouseListPanel = new WarehouseListPanel(getOrganizationDataObjectId());
        warehouseForShipField.bind(
            bindGroup, 
            warehouseListPanel,
            entity,
            pd,
            "${address.addressName}",
            UpdateStrategy.READ_WRITE);
        
        //notes
        notesField.bind(bindGroup, entity, entProps.getPropertyDetails("notes"));
        
        //product description
        productDescriptionField.bind(bindGroup, entity, entProps.getPropertyDetails("productDescription"));
        
        bindGroup.bind(); 
        
        calculateShipWeek(true, true, false);
    }
    
    @SuppressWarnings("unchecked")
    Binding productFieldBinding = null;
    
    /**
     * @param complex - false if the field represents simple products, true if complex
     */
    private void bindProductField(boolean complex) {
        PropertyDetails pd = entProps.getPropertyDetails("product");
        pd.setRequired(true);
        
        //un-bind and remove old binding
        if ( productFieldBinding!=null ){
            if ( productFieldBinding.isBound() )
                productFieldBinding.unbind();
            if ( bindGroup.getBindings().contains(productFieldBinding))
                bindGroup.removeBinding(productFieldBinding);
        }
        
        //bind simple products to list box
        if ( !complex ){
            ProductsListPanel listPanel = new ProductsListPanel(getOrganizationDataObjectId());
            productFieldBinding = productField.bind(
                bindGroup, 
                listPanel,
                entity,
                pd,
                "${productName}",
                UpdateStrategy.READ_WRITE);
            productField.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    onSelectProduct();
                }
            });
            productFieldBinding.bind();
        //bind complex products to list box
        }else {
            //TODO - bind product field for complex products.
            //THE NEXT FUNCTIONALITY IS DUMMY - REPLACE AS APPROPRIATE 
            productFieldBinding = productField.bind(
                bindGroup, 
                new SelectableListDialog() {
                    @Override
                    public DialogResponse showDialog(Component parentComponent) {
                        return null;
                    }
                
                    @Override
                    public void setVisibleSelectButtons(boolean visible) {
                    }
                
                    @Override
                    public void setSelectedRowObject(Object selectedObject) {
                    }
                
                    @Override
                    public void setEditable(boolean editable) {
                    }
                
                    @Override
                    public boolean isEditable() {
                        return false;
                    }
                
                    @Override
                    public InvoiceItem getSelectedRowObject() {
                        return null;
                    }
                
                    @SuppressWarnings("unchecked")
                    @Override
                    public List getListData() {
                        return new ArrayList();
                    }

                    @Override
                    public void setEnabled(boolean enabled)
                    {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    @Override
                    public boolean isEnabled()
                    {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                },
                entity,
                pd,
                "${productName}",
                UpdateStrategy.READ_WRITE);
        }
    }

    protected void onSelectProduct() {
        //automatically copy description text from product if no such was entered
        if ( productDescriptionField.getText()==null || "".equals(productDescriptionField.getText().trim() )){
            Product p = (Product) productField.getSelectedItem();
            if ( p instanceof SimpleProduct )
                productDescriptionField.setText(((SimpleProduct)p).getDescription());
            else if ( p instanceof ComplexProduct ){
                ComplexProduct complexProduct = (ComplexProduct) p;
                productDescriptionField.setText(complexProduct.getAppliedSchema().getDescription());
            }
        }
    }

    protected void onProductTypeAction(JBRadioButton source) {
        bindProductField(source.equals(productTypeRadioComplex));
    }

    protected void updateDiscountPercent(boolean contentValid) {
        if ( !contentValid ){
            totalItemDiscountPercentField.setText("");
            return;
        }
        if ( "".equals(totalItemDiscountValueField.getText()) ){
            totalItemDiscountPercentField.setText("");
            return;
        }
        
        try{
            BigDecimal totalValue = new BigDecimal(extendedPriceField.getText());  
            BigDecimal discountAmount = new BigDecimal(totalItemDiscountValueField.getText());
            BigDecimal result = discountAmount.divide(totalValue, new MathContext(10)).multiply(new BigDecimal(100));
            result.setScale(4, RoundingMode.HALF_UP);
            totalItemDiscountPercentField.setText(""+result.toPlainString());
        }catch (Exception e){
            totalItemDiscountPercentField.setText("");
        }
    }

    protected void updateDiscountAmount(boolean contentValid) {
        if ( !contentValid ){
            totalItemDiscountValueField.setText("");
            return;
        }
        if ( "".equals(totalItemDiscountPercentField.getText()) ){
            totalItemDiscountValueField.setText("");
            return;
        }
        
        try{
            BigDecimal totalValue = new BigDecimal(extendedPriceField.getText());  
            BigDecimal discountPercent = new BigDecimal(totalItemDiscountPercentField.getText());
            BigDecimal result = discountPercent.divide(new BigDecimal(100), new MathContext(10)).multiply(totalValue);
            result.setScale(4, RoundingMode.HALF_EVEN);
            totalItemDiscountValueField.setText(""+result);
        }catch (Exception e){
            totalItemDiscountValueField.setText("");
        }
    }

    protected void calculateShipWeek(boolean contentValid, boolean fromDateChanged, boolean event) {
        //avoid update cycle
        if ( updatingShipDates )
            return;
        
        updatingShipDates = true;
        
        if ( !contentValid ){
            shipWeekField.setText("");
        }else{

            Date dateToUse = null;
            
            //if no 'from' date - use the 'to'
            if ( entity.getShipDateFrom()==null ){
                dateToUse = entity.getShipDateTo();
            //otherwise use the 'from'
            }else{
                dateToUse = entity.getShipDateFrom();
            }
            
            //auto set the 'to' date, if it is NULL or is the same as 'from' date 
            if ( event && fromDateChanged && entity.getShipDateFrom()!=null && 
                    (entity.getShipDateTo()==null 
                    //also if the 'to' date is before 'from' date, overwrite the 'to' with 'from'
                    || (entity.getShipDateFrom()!=null && entity.getShipDateFrom().after(entity.getShipDateTo()))
                    //at last if the previous value of 'from' date is the same as the current 'to', then update 'to' also
                    || (lastShipDateFrom!=null && lastShipDateFrom.equals(entity.getShipDateTo())))){
                shipDateToField.setDate(entity.getShipDateFrom());
            }
            
            if ( dateToUse==null ){
                shipWeekField.setText("");
            }else{
                Calendar c = Calendar.getInstance();
                c.setTime(dateToUse);
                Integer week = c.get(Calendar.WEEK_OF_YEAR);
                shipWeekField.setText(""+week);
            }
            
            if ( event ){
                lastShipDateFrom = entity.getShipDateFrom();
//                lastShipDateTo = entity.getShipDateTo();
            }
        }
        
        updatingShipDates = false;
    }

    protected void calculateShipDates(boolean contentValid) {
        if ( updatingShipDates )
            return;
        
        updatingShipDates = true;
        
        if ( !contentValid || "".equals(shipWeekField.getText())){
            shipDateFromField.setDate(null);
            shipDateToField.setDate(null);
        }else{
            Integer week = null;
            
            try{
                week = new Integer(shipWeekField.getText());
                
                Calendar c = Calendar.getInstance();
                c.set(Calendar.WEEK_OF_YEAR, week);
                
                shipDateFromField.setDate(c.getTime());
                c.add(Calendar.DAY_OF_WEEK, 5);
                shipDateToField.setDate(c.getTime());
            }catch (NumberFormatException e){
            }            
        }
        
        lastShipDateFrom = entity.getShipDateFrom();
//        lastShipDateTo = entity.getShipDateTo();
        
        updatingShipDates = false;
    }

    protected void updateExtendedPrice(boolean contentValid) {
        if ( !contentValid){
            extendedPriceField.setText("");
            return;
        }
        
        try{
            String price = unitPriceField.getText();
            String qty = orderedQtyField.getText();
            BigDecimal priceLong = new BigDecimal(price);
            BigDecimal qtyLong = new BigDecimal(qty);
            BigDecimal result = qtyLong.multiply(priceLong);
            result.setScale(4, RoundingMode.HALF_DOWN);
            extendedPriceField.setText(""+(result));
        }catch (Exception e) {
        }
    }

    private List<DbResource> getMeasureUnits()
    {
        return getProductListRemote().getMeasureUnits();
    }

    private ProductsListRemote getProductListRemote() {
        if ( productListRemote==null )
            productListRemote = getBean(ProductsListRemote.class);
        return productListRemote;
    }
}
