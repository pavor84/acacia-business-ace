/*
 * AssemblingCategoriesTreePanel.java
 *
 * Created on Сряда, 2008, Юни 4, 23:17
 */

package com.cosmos.acacia.crm.gui.assembling;

import com.cosmos.acacia.crm.bl.assembling.AssemblingRemote;
import com.cosmos.acacia.crm.data.assembling.AssemblingCategory;
import com.cosmos.acacia.gui.AbstractTreeEnabledTablePanel;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.BaseTreePanel;
import com.cosmos.swingb.SelectableListDialog;
import java.math.BigInteger;
import java.util.List;
import javax.ejb.EJB;

/**
 *
 * @author  Miro
 */
public class AssemblingCategoriesTreePanel
    extends BaseTreePanel<AssemblingCategory>
    implements SelectableListDialog
{
    @EJB
    private static AssemblingRemote formSession;

    //private AssemblingCategoryListPanel categoryListPanel;
    private AssemblingCategoryTreeTablePanel categoryListPanel;
    private boolean editable;


    /** Creates new form AssemblingCategoriesTreePanel */
    public AssemblingCategoriesTreePanel(BigInteger parentDataObjectId)
    {
        super(parentDataObjectId);
        //initComponents();
        setWindowAncestorCount(1);
        System.out.println("AssemblingCategoriesTreePanel()");
    }

    public AssemblingCategoriesTreePanel()
    {
        this(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    @Override
    protected AssemblingCategory updateParent(
        AssemblingCategory newParent,
        AssemblingCategory newChildren)
    {
        try
        {
            AssemblingCategory updatedCategory = getFormSession().updateParents(newParent, newChildren);

            return updatedCategory;
        }
        catch(Exception ex)
        {
            handleException(ex);
            return null;
        }
    }

    @Override
    protected void initData()
    {
        //categoryListPanel = new AssemblingCategoryListPanel(true);
        categoryListPanel = new AssemblingCategoryTreeTablePanel(null);

        toStringConverter = new AcaciaToStringConverter("${categoryName}");
        getTree().setToStringConverter(toStringConverter);

        //load all categories and init the tree
        List<AssemblingCategory> categories = getFormSession().getAssemblingCategories(null, getShowAllHeirs());

        refreshTreeModel(categories);
    }

    @Override
    protected void onTableRefreshed()
    {
        //load all categories and refresh the tree
        List<AssemblingCategory> categories = getFormSession().getAssemblingCategories(null, getShowAllHeirs());

        refreshTreeModel(categories);
    }

    private TreeEnabledTablePanel treeEnabledTablePanel;
    @Override
    //AssemblingCategoryTreeTablePanel
    public AbstractTreeEnabledTablePanel<AssemblingCategory> getListPanel()
    {
        //return categoryListPanel;
        if(treeEnabledTablePanel == null)
        {
            treeEnabledTablePanel = new TreeEnabledTablePanel(categoryListPanel);
        }

        return treeEnabledTablePanel;
    }

    private class TreeEnabledTablePanel
        extends AbstractTreeEnabledTablePanel
    {
        private AssemblingCategoryTreeTablePanel treeTablePanel;

        public TreeEnabledTablePanel(AssemblingCategoryTreeTablePanel treeTablePanel)
        {
            super(treeTablePanel.getMainDataObject());
            this.treeTablePanel = treeTablePanel;
        }

        @Override
        protected List getItems()
        {
            return treeTablePanel.getListData();
        }

        @Override
        protected Object onEditEntity(Object entity)
        {
            return treeTablePanel.onEditEntity((AssemblingCategory)entity);
        }

        @Override
        public void refreshDataTable()
        {
            treeTablePanel.refreshDataTable();
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            return treeTablePanel.deleteRow((AssemblingCategory)rowObject);
        }

        @Override
        protected Object newRow()
        {
            return treeTablePanel.newEntity(null);
        }

        @Override
        public boolean canCreate()
        {
            return treeTablePanel.canCreate();
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            return treeTablePanel.canModify((AssemblingCategory)rowObject);
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            return treeTablePanel.canDelete((AssemblingCategory)rowObject);
        }
    }

    @Override
    public AssemblingCategory getParent(AssemblingCategory child)
    {
        return getFormSession().getParent(child);
        //return child.getParentCategory();
    }

    @Override
    public void setParent(AssemblingCategory entity, AssemblingCategory parent)
    {
        //entity.setParentCategory(parent);
        if(parent != null)
            entity.setParentId(parent.getAssemblingCategoryId());
        else
            entity.setParentId(null);
    }

    @Override
    protected String getRootNodeDisplay()
    {
        return getResourceMap().getString("CategoryTree.rootNodeDisplay");
    }

    protected AssemblingRemote getFormSession()
    {
        if(formSession == null)
        {
            formSession = getBean(AssemblingRemote.class);
        }

        return formSession;
    }

    // SelectableListDialog

    @Override
    public Object getSelectedRowObject()
    {
        return categoryListPanel.getSelectedRowObject();
    }

    @Override
    public void setSelectedRowObject(Object selectedObject)
    {
        categoryListPanel.setSelectedRowObject(selectedObject);
    }

    @Override
    public List getListData()
    {
        return categoryListPanel.getListData();
    }

    @Override
    public void setEditable(boolean editable)
    {
        this.editable = editable;
        categoryListPanel.setEditable(editable);
    }

    @Override
    public boolean isEditable()
    {
        return editable;
    }

    @Override
    public void setVisibleSelectButtons(boolean visible)
    {
        categoryListPanel.setVisibleSelectButtons(visible);
    }

}
