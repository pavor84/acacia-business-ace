/*
 * AbstractEntityPanel.java
 *
 * Created on Четвъртък, 2008, Март 27, 21:42
 */

package com.cosmos.acacia.gui;

import java.awt.BorderLayout;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;

import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.jdesktop.application.Action;
import org.jdesktop.application.ApplicationAction;
import org.jdesktop.application.ApplicationActionMap;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingx.error.ErrorInfo;

import com.cosmos.acacia.crm.validation.ValidationException;
import com.cosmos.acacia.crm.validation.ValidationMessage;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.JBComboBox;
import com.cosmos.swingb.JBErrorPane;
import com.cosmos.swingb.JBTextField;
import java.math.BigInteger;

/**
 *
 * @author  Miro
 */
public abstract class AbstractEntityPanel
    extends AcaciaPanel
{
    
    /** Creates new form AbstractEntityPanel */
    public AbstractEntityPanel(BigInteger parentDataObjectId)
    {
        super(parentDataObjectId);
        initComponents();
        initData();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new com.cosmos.swingb.JBPanel();
        closeButton = new com.cosmos.swingb.JBButton();
        saveButton = new com.cosmos.swingb.JBButton();
        entityPanelHolder = new com.cosmos.swingb.JBPanel();

        setName("Form"); // NOI18N

        buttonsPanel.setName("buttonsPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(AbstractEntityPanel.class, this);
        closeButton.setAction(actionMap.get("closeAction")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        saveButton.setAction(actionMap.get("saveAction")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, saveButton});

        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, saveButton});

        entityPanelHolder.setName("entityPanelHolder"); // NOI18N
        entityPanelHolder.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(entityPanelHolder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entityPanelHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBPanel buttonsPanel;
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.swingb.JBPanel entityPanelHolder;
    private com.cosmos.swingb.JBButton saveButton;
    // End of variables declaration//GEN-END:variables


    protected abstract BindingGroup getBindingGroup();
    protected abstract JPanel getEntityPanel();
    protected abstract Object save()
        throws Exception;

    protected void initData()
    {
        setDialogResponse(DialogResponse.CLOSE);

        JPanel entityPanel;
        if((entityPanel = getEntityPanel()) != null)
        {
            entityPanelHolder.add(entityPanel, BorderLayout.CENTER);
        }

        setSaveActionState();

        BindingGroup bindingGroup;
        if((bindingGroup = getBindingGroup()) != null)
        {
            bindingGroup.addBindingListener(new AbstractBindingListener()
            {

                @SuppressWarnings("unchecked")
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    setSaveActionState();
                }
            });
        }
    }

    protected void setSaveActionState()
    {
        BindingGroup bindingGroup;
        if((bindingGroup = getBindingGroup()) != null)
        {
            setEnabled(Button.Save, bindingGroup.isContentValid());
        }
    }

    @Action
    public void closeAction()
    {
        BindingGroup bindingGroup;
        if((bindingGroup = getBindingGroup()) != null && bindingGroup.isContentChanged())
        {
            if(!closeDialogConfirmation())
                return;
        }

        setDialogResponse(DialogResponse.CLOSE);
        close();
    }

    @Action
    public void saveAction()
    {
        try
        {
            Object entity = save();
            setDialogResponse(DialogResponse.SAVE);
            setSelectedValue(entity);
            close();
        }
        catch(Exception ex)
        {
            ValidationException ve = extractValidationException(ex);
            if ( ve!=null ){
                updateFieldsStyle(ve.getMessages());
                String message = getValidationErrorsMessage(ve);
                JBErrorPane.showDialog(this, createSaveErrorInfo(message, null));
            }else{
                ex.printStackTrace();
                // TODO: Log that error
                String basicMessage = getResourceMap().getString("saveAction.Action.error.basicMessage", ex.getMessage());
                ErrorInfo errorInfo = createSaveErrorInfo(basicMessage, ex);
                JBErrorPane.showDialog(this, errorInfo);
            }
        }
    }

    public enum Button
    {
        Save("saveAction"),
        Close("closeAction");

        private Button(String actionName)
        {
            this.actionName = actionName;
        }

        private String actionName;

        public String getActionName() {
            return actionName;
        }
    };

    public javax.swing.Action getAction(Button button)
    {
        ApplicationActionMap actionMap = getApplicationActionMap();
        if(actionMap != null && button != null)
        {
            return actionMap.get(button.getActionName());
        }

        return null;
    }

    public void setEnabled(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setEnabled(enabled);
        }
    }

    public void setSelected(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setSelected(enabled);
        }
    }

    public void setVisible(Button button, boolean visible) {       
        switch(button)
        {
            case Save:
                saveButton.setVisible(visible);
                break;

            case Close:
                closeButton.setVisible(visible);
                break;
        }
    }

    public boolean isVisible(Button button) {
        switch(button)
        {
            case Save:
                return saveButton.isVisible();

            case Close:
                return closeButton.isVisible();
        }

        throw new IllegalArgumentException("Unknown or unsupported Button enumeration: " + button);
    }

    @Override
    protected Class getResourceStopClass()
    {
        return AbstractEntityPanel.class;
    }

    @Override
    protected void dialogWindowClosing(WindowEvent event)
    {
        BindingGroup bindingGroup;
        if((bindingGroup = getBindingGroup()) != null && bindingGroup.isContentChanged())
        {
            if(!closeDialogConfirmation())
                return;
        }

        setDialogResponse(DialogResponse.CLOSE);
        super.dialogWindowClosing(event);
    }

    protected boolean closeDialogConfirmation()
    {
        ResourceMap resource = getResourceMap();
        String title = resource.getString("closeAction.ConfirmDialog.unsavedData.title");
        String message = resource.getString("closeAction.ConfirmDialog.unsavedData.message");
        Icon icon = resource.getImageIcon("closeAction.ConfirmDialog.unsavedData.icon");
        int result = JOptionPane.showConfirmDialog(
                this.getParent(),
                message,
                title,
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                icon);
        return JOptionPane.YES_OPTION == result;
    }

    /**
     * Iterates through all fields and updates there appearance to error state if 
     * some of the messages is related to their respective property.
     * 
     * Note: currently - test support.
     * @param messages
     */
    @SuppressWarnings("unchecked")
    private void updateFieldsStyle(List<ValidationMessage> messages)
    {
        //compose a set for easier and faster lookup
        BindingGroup bindingGroup;
        if((bindingGroup = getBindingGroup()) != null)
        {
            bindingGroup.getBindings();
            Set<String> errorProperties = new HashSet<String>();
            for(ValidationMessage msg : messages)
            {
                if(msg.getTarget() != null)
                {
                    String el = msg.getTarget();
                    errorProperties.add(el);
                }
            }

            for(Binding binding : bindingGroup.getBindings())
            {
                if(binding.getTargetObject() instanceof JBTextField)
                {
                    JBTextField textField = (JBTextField)binding.getTargetObject();
                    if(errorProperties.contains(textField.getPropertyName()))
                        textField.setStyleInvalid("");//temporary code, TODO fix
                }
                else if(binding.getTargetObject() instanceof JBComboBox)
                {
                    JBComboBox comboBox = (JBComboBox)binding.getTargetObject();
                    if(errorProperties.contains(comboBox.getPropertyName()))
                        comboBox.setStyleInvalid(); 
                }
            }
        }
    }

    /**
     * @param basicMessage
     * @param ex - may be null
     * @return
     */
    private ErrorInfo createSaveErrorInfo(String basicMessage, Exception ex) {
        ResourceMap resource = getResourceMap();
        String title = resource.getString("saveAction.Action.error.title");
        
        String detailedMessage = resource.getString("saveAction.Action.error.detailedMessage");
        String category = getEntityPanel().getClass().getName() + ": saveAction.";
        Level errorLevel = Level.WARNING;
        
        Map<String, String> state = new HashMap<String, String>();
        //state.put("productId", String.valueOf(product.getProductId()));
        //state.put("productName", String.valueOf(product.getProductName()));
        //state.put("productCode", String.valueOf(product.getProductCode()));
        
        ErrorInfo errorInfo = new ErrorInfo(title, basicMessage, detailedMessage, category, ex, errorLevel, state);
        return errorInfo;
    }
}
