/*
 * InvoiceItemFormDraft.java
 *
 * Created on Сряда, 2008, Август 20, 15:07
 */

package com.cosmos.acacia.crm.gui.invoice;

import static com.cosmos.acacia.util.AcaciaUtils.getDecimalFormat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.EnumSet;
import java.util.List;

import javax.swing.ButtonGroup;

import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

import com.cosmos.acacia.crm.bl.impl.ProductsListRemote;
import com.cosmos.acacia.crm.bl.invoice.InvoiceListRemote;
import com.cosmos.acacia.crm.data.ComplexProduct;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.InvoiceItem;
import com.cosmos.acacia.crm.data.Product;
import com.cosmos.acacia.crm.data.SimpleProduct;
import com.cosmos.acacia.crm.data.WarehouseProduct;
import com.cosmos.acacia.crm.enums.MeasurementUnit;
import com.cosmos.acacia.crm.gui.ProductsListPanel;
import com.cosmos.acacia.crm.gui.assembling.ProductAssemblerPanel;
import com.cosmos.acacia.crm.gui.warehouse.WarehouseListPanel;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.acacia.util.AcaciaUtils;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.DialogResponse;

/**
 * 
 * Created	:	10.09.2008
 * @author	Petar Milev
 *
 */
public class InvoiceItemForm extends BaseEntityPanel {

    private InvoiceItem entity;

    /** Creates new form InvoiceFormDraft */
    public InvoiceItemForm(InvoiceItem item) {
        super(item.getParentId());
        this.entity = item;
        initialize();
    }

    private void initialize() {
        initComponents();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBLabel1 = new com.cosmos.swingb.JBLabel();
        measureUnitField = new com.cosmos.swingb.JBComboBox();
        jBLabel2 = new com.cosmos.swingb.JBLabel();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        jBLabel4 = new com.cosmos.swingb.JBLabel();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        jBLabel6 = new com.cosmos.swingb.JBLabel();
        jBLabel8 = new com.cosmos.swingb.JBLabel();
        jBLabel7 = new com.cosmos.swingb.JBLabel();
        jBLabel9 = new com.cosmos.swingb.JBLabel();
        jBLabel10 = new com.cosmos.swingb.JBLabel();
        shipDateToField = new com.cosmos.swingb.JBDatePicker();
        shipDateFromField = new com.cosmos.swingb.JBDatePicker();
        shipWeekField = new com.cosmos.swingb.JBTextField();
        warehouseForShipField = new com.cosmos.acacia.gui.AcaciaComboList();
        jBLabel11 = new com.cosmos.swingb.JBLabel();
        jBLabel12 = new com.cosmos.swingb.JBLabel();
        entityFormButtonPanel1 = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productDescriptionField = new com.cosmos.swingb.JBTextPane();
        jBLabel14 = new com.cosmos.swingb.JBLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesField = new com.cosmos.swingb.JBTextPane();
        forUnitsLabel = new com.cosmos.swingb.JBLabel();
        productDetailsButton = new com.cosmos.swingb.JBButton();
        productOrSchemaTextField = new com.cosmos.swingb.JBTextField();
        clearProductButton = new com.cosmos.swingb.JBButton();
        selectProductOrSchemaButton = new com.cosmos.swingb.JBButton();
        orderedQtyField = new com.cosmos.swingb.JBFormattedTextField();
        shippedQtyField = new com.cosmos.swingb.JBFormattedTextField();
        returnedQtyField = new com.cosmos.swingb.JBFormattedTextField();
        unitPriceField = new com.cosmos.swingb.JBFormattedTextField();
        extendedPriceField = new com.cosmos.swingb.JBFormattedTextField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(InvoiceItemForm.class);
        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        measureUnitField.setName("measureUnitField"); // NOI18N

        jBLabel2.setText(resourceMap.getString("jBLabel2.text")); // NOI18N
        jBLabel2.setName("jBLabel2"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        jBLabel4.setText(resourceMap.getString("jBLabel4.text")); // NOI18N
        jBLabel4.setName("jBLabel4"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        jBLabel6.setText(resourceMap.getString("jBLabel6.text")); // NOI18N
        jBLabel6.setName("jBLabel6"); // NOI18N

        jBLabel8.setText(resourceMap.getString("jBLabel8.text")); // NOI18N
        jBLabel8.setName("jBLabel8"); // NOI18N

        jBLabel7.setText(resourceMap.getString("jBLabel7.text")); // NOI18N
        jBLabel7.setName("jBLabel7"); // NOI18N

        jBLabel9.setText(resourceMap.getString("jBLabel9.text")); // NOI18N
        jBLabel9.setName("jBLabel9"); // NOI18N

        jBLabel10.setText(resourceMap.getString("jBLabel10.text")); // NOI18N
        jBLabel10.setName("jBLabel10"); // NOI18N

        shipDateToField.setName("shipDateToField"); // NOI18N

        shipDateFromField.setName("shipDateFromField"); // NOI18N

        shipWeekField.setName("shipWeekField"); // NOI18N

        warehouseForShipField.setName("warehouseForShipField"); // NOI18N

        jBLabel11.setText(resourceMap.getString("jBLabel11.text")); // NOI18N
        jBLabel11.setName("jBLabel11"); // NOI18N

        jBLabel12.setText(resourceMap.getString("jBLabel12.text")); // NOI18N
        jBLabel12.setName("jBLabel12"); // NOI18N

        entityFormButtonPanel1.setName("entityFormButtonPanel1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        productDescriptionField.setName("productDescriptionField"); // NOI18N
        jScrollPane2.setViewportView(productDescriptionField);

        jBLabel14.setText(resourceMap.getString("jBLabel14.text")); // NOI18N
        jBLabel14.setName("jBLabel14"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        notesField.setName("notesField"); // NOI18N
        jScrollPane3.setViewportView(notesField);

        forUnitsLabel.setText(resourceMap.getString("forUnitsLabel.text")); // NOI18N
        forUnitsLabel.setName("forUnitsLabel"); // NOI18N

        productDetailsButton.setMnemonic('D');
        productDetailsButton.setText(resourceMap.getString("productDetailsButton.text")); // NOI18N
        productDetailsButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        productDetailsButton.setName("productDetailsButton"); // NOI18N

        productOrSchemaTextField.setEditable(false);
        productOrSchemaTextField.setName("productOrSchemaTextField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(InvoiceItemForm.class, this);
        clearProductButton.setAction(actionMap.get("clearProductOrSchema")); // NOI18N
        clearProductButton.setName("clearProductButton"); // NOI18N

        selectProductOrSchemaButton.setAction(actionMap.get("productOrSchemaSelectAction")); // NOI18N
        selectProductOrSchemaButton.setIcon(resourceMap.getIcon("selectProductOrSchemaButton.icon")); // NOI18N
        selectProductOrSchemaButton.setText(resourceMap.getString("selectProductOrSchemaButton.text")); // NOI18N
        selectProductOrSchemaButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
        selectProductOrSchemaButton.setName("selectProductOrSchemaButton"); // NOI18N

        orderedQtyField.setText(resourceMap.getString("orderedQtyField.text")); // NOI18N
        orderedQtyField.setName("orderedQtyField"); // NOI18N

        shippedQtyField.setEditable(false);
        shippedQtyField.setText(resourceMap.getString("shippedQtyField.text")); // NOI18N
        shippedQtyField.setName("shippedQtyField"); // NOI18N

        returnedQtyField.setEditable(false);
        returnedQtyField.setText(resourceMap.getString("returnedQtyField.text")); // NOI18N
        returnedQtyField.setName("returnedQtyField"); // NOI18N

        unitPriceField.setEditable(false);
        unitPriceField.setText(resourceMap.getString("unitPriceField.text")); // NOI18N
        unitPriceField.setName("unitPriceField"); // NOI18N

        extendedPriceField.setEditable(false);
        extendedPriceField.setText(resourceMap.getString("extendedPriceField.text")); // NOI18N
        extendedPriceField.setName("extendedPriceField"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(jBLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jBLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                                .addGap(27, 27, 27))
                            .addComponent(jBLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jBLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jBLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jBLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jBLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jBLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(warehouseForShipField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(unitPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forUnitsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                            .addComponent(shipDateToField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(productOrSchemaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectProductOrSchemaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(productDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(measureUnitField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(orderedQtyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(shippedQtyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(returnedQtyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(extendedPriceField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                                    .addComponent(shipWeekField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                                    .addComponent(shipDateFromField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(productOrSchemaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectProductOrSchemaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(clearProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(productDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shippedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnedQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forUnitsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extendedPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shipWeekField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shipDateFromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shipDateToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warehouseForShipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton clearProductButton;
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel1;
    private com.cosmos.swingb.JBFormattedTextField extendedPriceField;
    private com.cosmos.swingb.JBLabel forUnitsLabel;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel10;
    private com.cosmos.swingb.JBLabel jBLabel11;
    private com.cosmos.swingb.JBLabel jBLabel12;
    private com.cosmos.swingb.JBLabel jBLabel14;
    private com.cosmos.swingb.JBLabel jBLabel2;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.swingb.JBLabel jBLabel4;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBLabel jBLabel6;
    private com.cosmos.swingb.JBLabel jBLabel7;
    private com.cosmos.swingb.JBLabel jBLabel8;
    private com.cosmos.swingb.JBLabel jBLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.cosmos.swingb.JBComboBox measureUnitField;
    private com.cosmos.swingb.JBTextPane notesField;
    private com.cosmos.swingb.JBFormattedTextField orderedQtyField;
    private com.cosmos.swingb.JBTextPane productDescriptionField;
    private com.cosmos.swingb.JBButton productDetailsButton;
    private com.cosmos.swingb.JBTextField productOrSchemaTextField;
    private com.cosmos.swingb.JBFormattedTextField returnedQtyField;
    private com.cosmos.swingb.JBButton selectProductOrSchemaButton;
    private com.cosmos.swingb.JBDatePicker shipDateFromField;
    private com.cosmos.swingb.JBDatePicker shipDateToField;
    private com.cosmos.swingb.JBTextField shipWeekField;
    private com.cosmos.swingb.JBFormattedTextField shippedQtyField;
    private com.cosmos.swingb.JBFormattedTextField unitPriceField;
    private com.cosmos.acacia.gui.AcaciaComboList warehouseForShipField;
    // End of variables declaration//GEN-END:variables

    private BindingGroup bindGroup;
    private InvoiceListRemote formSession;
    private EntityProperties entProps;
    private ProductsListRemote productListRemote;
    private boolean updatingShipDates;
    private Date lastShipDateFrom;
    private static Date lastShipDateTo;
    
    @Override
    public BindingGroup getBindingGroup() {
        return bindGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel1;
    }

    @Override
    public InvoiceItem getEntity() {
        return entity;
    }

    @Override
    public void performSave(boolean closeAfter) {
        entity = getFormSession().saveInvoiceItem(entity);
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(entity);
        if (closeAfter) {
            close();
        } else {
            bindGroup.unbind();
            initData();
        }
    }

    private InvoiceListRemote getFormSession() {
        if ( formSession==null )
            formSession = getBean(InvoiceListRemote.class);
        return formSession;
    }

    boolean updatingAmounts = false;
    ButtonGroup productTypeGroup = null;
    
    @SuppressWarnings("unchecked")
    @Override
    protected void initData() {
        entProps = getFormSession().getItemDetailEntityProperties();
        
        AcaciaToStringConverter resourceToStringConverter = new AcaciaToStringConverter();
        AutoCompleteDecorator.decorate(measureUnitField, resourceToStringConverter);
        
        bindGroup = new BindingGroup();
        
        //auto set the dates if the item is new
        if ( entity.getId()==null && (lastShipDateTo!=null || lastShipDateFrom!=null) ){
            entity.setShipDateFrom(lastShipDateFrom);
            entity.setShipDateTo(lastShipDateTo);
        }
        
        //product
        bindProductField( entity.getProduct() instanceof ComplexProduct );
        
        //measure unit 
        bindMeasureUnitField(new ArrayList());
        
        //ordered quantity
        Binding orderedQtyBinding = orderedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("orderedQuantity"), AcaciaUtils.getDecimalFormat());
        
        orderedQtyBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateExtendedPrice(binding.isContentValid());
            }
        });
        
        //shipped quantity
        shippedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("shippedQuantity"), getDecimalFormat());
        
        //returned quantity
        returnedQtyField.bind(bindGroup, entity, entProps.getPropertyDetails("returnedQuantity"), getDecimalFormat());
        
        //unit price
        Binding unitPriceBinding = unitPriceField.bind(bindGroup, entity, entProps.getPropertyDetails("unitPrice"), getDecimalFormat());
        unitPriceBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateExtendedPrice(binding.isContentValid());
            }
        });
        
        //extended price
        extendedPriceField.bind(bindGroup, entity, entProps.getPropertyDetails("extendedPrice"), getDecimalFormat());
        
        //variable for re-use
//        Binding amountsBinding = null;
        
        //discount value 
//        amountsBinding = totalItemDiscountValueField.bind(bindGroup, entity, entProps.getPropertyDetails("discountAmount"));
//        amountsBinding.addBindingListener(new AbstractBindingListener() {
//            @Override
//            public void targetChanged(Binding binding, PropertyStateEvent event) {
//                if ( updatingAmounts )
//                    return; 
//                else{
//                    updatingAmounts = true;
//                    updateDiscountPercent(binding.isContentValid());
//                    updatingAmounts = false;
//                }
//            }
//        });
        
        //discount percent
//        amountsBinding = totalItemDiscountPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("discountPercent"));
//        amountsBinding.addBindingListener(new AbstractBindingListener() {
//            @Override
//            public void targetChanged(Binding binding, PropertyStateEvent event) {
//                if ( updatingAmounts )
//                    return;
//                else{
//                    updatingAmounts = true;
//                    updateDiscountAmount(binding.isContentValid());
//                    updatingAmounts = false;
//                }
//            }
//        });
        
        //ship week
        shipWeekField.bind(bindGroup, entity, entProps.getPropertyDetails("shipWeek"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipDates(binding.isContentValid());
                }
            });
        
        //ship date from
        shipDateFromField.bind(bindGroup, entity, entProps.getPropertyDetails("shipDateFrom"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipWeek(binding.isContentValid(), true, true);
                }
            });
        
        //ship date to
        shipDateToField.bind(bindGroup, entity, entProps.getPropertyDetails("shipDateTo"))
            .addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    calculateShipWeek(binding.isContentValid(), false, true);
                }
            });
        
        //warehouse
        PropertyDetails pd = entProps.getPropertyDetails("warehouse");
        pd.setRequired(true);
        WarehouseListPanel warehouseListPanel = new WarehouseListPanel(getOrganizationDataObjectId());
        warehouseForShipField.bind(
            bindGroup, 
            warehouseListPanel,
            entity,
            pd,
            "${address.addressName}",
            UpdateStrategy.READ_WRITE);
        
        //notes
        notesField.bind(bindGroup, entity, entProps.getPropertyDetails("notes"));
        
        //product description
        productDescriptionField.bind(bindGroup, entity, entProps.getPropertyDetails("productDescription"));
        
        productDetailsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onComplexProductDetails();
            }
        });
        
        bindGroup.bind(); 
        
        calculateShipWeek(true, true, false);
        updateUnitLabel();
        updateExtendedPrice(true);
        product = entity.getProduct();
        onSelectProduct();
    }
    
    protected void onComplexProductDetails() {
        ComplexProductDetailsPanel detailsPanel = new ComplexProductDetailsPanel((ComplexProduct)product);
        detailsPanel.showDialog(this);
    }
    
    @Override
    public void setReadonly() {
        super.setReadonly();
        clearProductButton.setEnabled(false);
        selectProductOrSchemaButton.setEnabled(false);
        warehouseForShipField.setEnabled(false);
    }

    @SuppressWarnings("unchecked")
    private Binding measureUnitBinding = null;
    
    private void bindMeasureUnitField(List<DbResource> mUnits) {
        if ( measureUnitBinding!=null ){
            measureUnitBinding.unbind();
            bindGroup.removeBinding(measureUnitBinding);
        }
        measureUnitBinding = measureUnitField.bind(bindGroup, mUnits, entity, entProps.getPropertyDetails("measureUnit"));
        measureUnitBinding.bind();
        measureUnitField.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                updateExtendedPrice(measureUnitField.getSelectedItem() instanceof DbResource);
            }
        });
    }

    @SuppressWarnings("unchecked")
    Binding productFieldBinding = null;
    
    /**
     * @param complex - false if the field represents simple products, true if complex
     */
    private void bindProductField(boolean complex) {
        
    }
    
    private Product product;
    
    @Action
    public void productOrSchemaSelectAction()
    {
        if(product == null)
        {
            ComplexProductSelectionPanel selectionPanel = new ComplexProductSelectionPanel(getOrganizationDataObjectId());
            DialogResponse response = selectionPanel.showDialog(this);
            if(DialogResponse.SELECT.equals(response))
            {
                product = (Product)selectionPanel.getSelectedValue();
                onSelectProduct();
            }
        }
        else if(product instanceof ComplexProduct)
        {
            ProductAssemblerPanel asPanel = new ProductAssemblerPanel();
            DialogResponse response = asPanel.showDialog(this);
            if(DialogResponse.SELECT.equals(response))
            {
                product = (ComplexProduct)asPanel.getSelectedValue();
                onSelectProduct();
            }
        }
        else if(product instanceof SimpleProduct)
        {
            SimpleProduct simpleProduct = (SimpleProduct) product;
            ProductsListPanel productsPanel = new ProductsListPanel(simpleProduct.getParentId());
            productsPanel.setSelectedRowObject(simpleProduct);
            DialogResponse response = productsPanel.showDialog(this);
            if(DialogResponse.SELECT.equals(response))
            {
                product = (SimpleProduct)productsPanel.getSelectedRowObject();
                onSelectProduct();
            }
        }
    }
    
    protected void onSelectProduct() {
        Product p = product;
        WarehouseProduct wp = null;
        if ( p instanceof SimpleProduct )
            wp = getFormSession().getWarehouseProduct((SimpleProduct) p);
        
        if ( p==null ){
            productOrSchemaTextField.setText("");
            entity.setProduct(null);
        }
        else{
            productOrSchemaTextField.setText(p.getProductName());
            entity.setProduct(p);
        }
        
        //automatically copy description text from product if no such was entered
        if ( productDescriptionField.getText()==null || "".equals(productDescriptionField.getText().trim() )){
            if ( p instanceof SimpleProduct )
                productDescriptionField.setText(((SimpleProduct)p).getDescription());
            else if ( p instanceof ComplexProduct ){
                ComplexProduct complexProduct = (ComplexProduct) p;
                productDescriptionField.setText(complexProduct.getAppliedSchema().getDescription());
            }
        }
        
        //update the unit price
        BigDecimal salePrice = null;
        //get from warehouse product first
        if ( wp!=null )
            salePrice = (BigDecimal) ELProperty.create("${salePrice}").getValue(wp);
        //try product if still null
        if ( salePrice==null && p!=null )
            salePrice = (BigDecimal) ELProperty.create("${salePrice}").getValue(p);
        //write the field if price is ok
        if ( salePrice!=null ){
            unitPriceField.setValue(salePrice);
        }else{
            unitPriceField.setValue(null);
        }
        
        updateUnitLabel();
        updateMeasureUnits(p);
        
        productDetailsButton.setEnabled(p instanceof ComplexProduct);
    }

    private void updateMeasureUnits(Product product) {
        List<DbResource> possibleUnits = new ArrayList<DbResource>();
        DbResource unitResource = null;
        if ( product!=null )
            unitResource = product.getMeasureUnit();
        if ( unitResource!=null ){
            MeasurementUnit unit = (MeasurementUnit) unitResource.getEnumValue();
            EnumSet<MeasurementUnit> unitsFromCategory = 
                MeasurementUnit.getMeasurementUnitsByCategory(unit.getCategory());
            for (DbResource unitR : getMeasureUnits()) {
                if ( unitsFromCategory.contains(unitR.getEnumValue()))
                    possibleUnits.add(unitR);
            }
        }
        
        bindMeasureUnitField(possibleUnits);
    }

    private void updateUnitLabel() {
        Product p = product;
        String priceLabelDisplay = "";
        //update the unit label
        if ( p!=null ){
            int quantityPerPackage = 1;
            if ( p instanceof SimpleProduct )
                quantityPerPackage = ((SimpleProduct)p).getQuantityPerPackage();
            MeasurementUnit measureUnit = null;
            DbResource unitResource = (DbResource) ELProperty.create("${measureUnit}").getValue(p);
            if ( unitResource!=null )
                measureUnit = (MeasurementUnit) unitResource.getEnumValue();
            
            priceLabelDisplay = getResourceMap().getString("unitPriceLabel.measureUnitPrefix") 
                + " " + quantityPerPackage + " ";
            if ( measureUnit!=null )
                priceLabelDisplay += measureUnit.getShortUnitName();
        }
        forUnitsLabel.setText(priceLabelDisplay);
    }

//    protected void updateDiscountPercent(boolean contentValid) {
//        if ( !contentValid ){
//            totalItemDiscountPercentField.setText("");
//            return;
//        }
//        if ( "".equals(totalItemDiscountValueField.getText()) ){
//            totalItemDiscountPercentField.setText("");
//            return;
//        }
//        
//        try{
//            BigDecimal totalValue = new BigDecimal(extendedPriceField.getText());  
//            BigDecimal discountAmount = new BigDecimal(totalItemDiscountValueField.getText());
//            BigDecimal result = discountAmount.divide(totalValue, new MathContext(10)).multiply(new BigDecimal(100));
//            result.setScale(4, RoundingMode.HALF_UP);
//            totalItemDiscountPercentField.setText(""+result.toPlainString());
//        }catch (Exception e){
//            totalItemDiscountPercentField.setText("");
//        }
//    }
//
//    protected void updateDiscountAmount(boolean contentValid) {
//        if ( !contentValid ){
//            totalItemDiscountValueField.setText("");
//            return;
//        }
//        if ( "".equals(totalItemDiscountPercentField.getText()) ){
//            totalItemDiscountValueField.setText("");
//            return;
//        }
//        
//        try{
//            BigDecimal totalValue = new BigDecimal(extendedPriceField.getText());  
//            BigDecimal discountPercent = new BigDecimal(totalItemDiscountPercentField.getText());
//            BigDecimal result = discountPercent.divide(new BigDecimal(100), new MathContext(10)).multiply(totalValue);
//            result.setScale(4, RoundingMode.HALF_EVEN);
//            totalItemDiscountValueField.setText(""+result);
//        }catch (Exception e){
//            totalItemDiscountValueField.setText("");
//        }
//    }

    protected void calculateShipWeek(boolean contentValid, boolean fromDateChanged, boolean event) {
        //avoid update cycle
        if ( updatingShipDates )
            return;
        
        updatingShipDates = true;
        
        if ( !contentValid ){
            shipWeekField.setText("");
        }else{

            Date dateToUse = null;
            
            //if no 'from' date - use the 'to'
            if ( entity.getShipDateFrom()==null ){
                dateToUse = entity.getShipDateTo();
            //otherwise use the 'from'
            }else{
                dateToUse = entity.getShipDateFrom();
            }
            
            //auto set the 'to' date, if it is NULL or is the same as 'from' date 
            if ( event && fromDateChanged && entity.getShipDateFrom()!=null && 
                    (entity.getShipDateTo()==null 
                    //also if the 'to' date is before 'from' date, overwrite the 'to' with 'from'
                    || (entity.getShipDateFrom()!=null && entity.getShipDateFrom().after(entity.getShipDateTo()))
                    //at last if the previous value of 'from' date is the same as the current 'to', then update 'to' also
                    || (lastShipDateFrom!=null && lastShipDateFrom.equals(entity.getShipDateTo())))){
                shipDateToField.setDate(entity.getShipDateFrom());
            }
            
            if ( dateToUse==null ){
                shipWeekField.setText("");
            }else{
                Calendar c = Calendar.getInstance();
                c.setTime(dateToUse);
                Integer week = c.get(Calendar.WEEK_OF_YEAR);
                shipWeekField.setText(""+week);
            }
            
            if ( event ){
                lastShipDateFrom = entity.getShipDateFrom();
//                lastShipDateTo = entity.getShipDateTo();
            }
        }
        
        updatingShipDates = false;
    }

    protected void calculateShipDates(boolean contentValid) {
        if ( updatingShipDates )
            return;
        
        updatingShipDates = true;
        
        if ( !contentValid || "".equals(shipWeekField.getText())){
            shipDateFromField.setDate(null);
            shipDateToField.setDate(null);
        }else{
            Integer week = null;
            
            try{
                week = new Integer(shipWeekField.getText());
                
                Calendar c = Calendar.getInstance();
                c.set(Calendar.WEEK_OF_YEAR, week);
                
                shipDateFromField.setDate(c.getTime());
                c.add(Calendar.DAY_OF_WEEK, 5);
                shipDateToField.setDate(c.getTime());
            }catch (NumberFormatException e){
            }            
        }
        
        lastShipDateFrom = entity.getShipDateFrom();
//        lastShipDateTo = entity.getShipDateTo();
        
        updatingShipDates = false;
    }

    protected void updateExtendedPrice(boolean contentValid) {
        if ( !contentValid){
            extendedPriceField.setValue(null);
            return;
        }
        
        try{
            String price = unitPriceField.getText();
            String qty = orderedQtyField.getText();
            BigDecimal priceLong = new BigDecimal(price);
            BigDecimal qtyLong = new BigDecimal(qty);
            BigDecimal pricedPackagesQuantity = getPricedPackagesQuantity(qtyLong);
            BigDecimal result = pricedPackagesQuantity.multiply(priceLong, MathContext.DECIMAL64);
            extendedPriceField.setValue(result);
        }catch (NumberFormatException e) {
            extendedPriceField.setValue(null);
        }
    }

    private BigDecimal getPricedPackagesQuantity(BigDecimal orderedQuantity) {
        DbResource currentUnitRes = (DbResource) measureUnitField.getSelectedItem();
        DbResource originUnitRes = null;
        Product p = product;
        if ( p!=null )
            originUnitRes = p.getMeasureUnit();
        if ( currentUnitRes==null || originUnitRes==null )
            return new BigDecimal("0");
        MeasurementUnit currentUnit = (MeasurementUnit) currentUnitRes.getEnumValue();
        MeasurementUnit originUnit = (MeasurementUnit) originUnitRes.getEnumValue();
        
        BigDecimal currentQuantity = currentUnit.getCgsUnitValue();
        currentQuantity = currentQuantity.multiply(orderedQuantity);
        
        BigDecimal oneUnitQuantity = originUnit.getCgsUnitValue();
        if ( p instanceof SimpleProduct ){
            oneUnitQuantity = oneUnitQuantity.multiply(
                new BigDecimal( ((SimpleProduct)p).getQuantityPerPackage()) );
        }
        
        BigDecimal pricePackagesForThisQuantity =
            currentQuantity.divide(oneUnitQuantity, MathContext.DECIMAL64);
        
        return pricePackagesForThisQuantity;
    }

    /**
     * The price in the product is given for its default measure unit.
     * In the current form we can selected other measure unit (from the same category).
     * @return
     */
//    private BigDecimal getUnitMultiplier() {
//        DbResource unitToRes = (DbResource) measureUnitField.getSelectedItem();
//        DbResource unitFromRes = null;
//        Product product = (Product)productField.getSelectedItem();
//        if ( product!=null )
//            unitFromRes = product.getMeasureUnit();
//        if ( unitToRes==null || unitFromRes==null )
//            return new BigDecimal("0");
//        MeasurementUnit unitTo = (MeasurementUnit) unitToRes.getEnumValue();
//        MeasurementUnit unitFrom = (MeasurementUnit) unitFromRes.getEnumValue();
//        
//        BigDecimal to = unitTo.getCgsUnitValue();
//        if ( product instanceof SimpleProduct ){
//            SimpleProduct simpleProduct = (SimpleProduct) product;
//            to = to.multiply(new BigDecimal(simpleProduct.getQuantityPerPackage()));
//        }
//        BigDecimal from = unitFrom.getCgsUnitValue();
//        
//        System.out.println(" to "+to+" from "+from);
//        BigDecimal result = from.divide(to);
//        
//        return result;
//    }

    private List<DbResource> measureUnits = null;
    private List<DbResource> getMeasureUnits()
    {
        if ( measureUnits==null )
            measureUnits = getProductListRemote().getMeasureUnits();
        return measureUnits;
    }

    private ProductsListRemote getProductListRemote() {
        if ( productListRemote==null )
            productListRemote = getBean(ProductsListRemote.class);
        return productListRemote;
    }
    
    @Action
    public void clearProductOrSchema(){
        product = null;
        onSelectProduct();
    }
}
