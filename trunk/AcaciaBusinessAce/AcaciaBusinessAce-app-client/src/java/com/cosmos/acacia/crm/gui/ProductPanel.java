/*
 * ProductPanel.java
 *
 * Created on Четвъртък, 2008, Февруари 14, 19:15
 */

package com.cosmos.acacia.crm.gui;

import static com.cosmos.acacia.util.AcaciaUtils.getDecimalFormat;
import static com.cosmos.acacia.util.AcaciaUtils.getIntegerFormat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;

import javax.ejb.EJB;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

import org.jdesktop.application.Action;
import org.jdesktop.application.ApplicationAction;
import org.jdesktop.application.ApplicationActionMap;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.error.ErrorInfo;

import com.cosmos.acacia.crm.bl.impl.ProductsListRemote;
import com.cosmos.acacia.crm.bl.users.RightsManagerRemote;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.ProductCategory;
import com.cosmos.acacia.crm.data.SimpleProduct;
import com.cosmos.acacia.crm.enums.Currency;
import com.cosmos.acacia.crm.enums.MeasurementUnit;
import com.cosmos.acacia.crm.enums.SpecialPermission;
import com.cosmos.acacia.crm.gui.contactbook.BusinessPartnersListPanel;
import com.cosmos.acacia.crm.validation.ValidationException;
import com.cosmos.acacia.crm.validation.ValidationMessage;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.AcaciaPercentValueField.EditType;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.JBComboBox;
import com.cosmos.swingb.JBErrorPane;
import com.cosmos.swingb.JBFormattedTextField;
import com.cosmos.swingb.JBTextField;

/**
 *
 * Created	:	28.07.2008
 * @author	Petar Milev
 *
 */
public class ProductPanel extends AcaciaPanel {
    
    private ProductPricingPanel pricingPanel;
    
    private RightsManagerRemote rightsManager = AcaciaPanel.getBean(RightsManagerRemote.class, false);

    public ProductPanel(SimpleProduct product) {
        super(product.getParentId());
        this.product = product;
        init();
    }

    /** Creates new form ProductPanel */
    public ProductPanel(BigInteger parentDataObjectId) {
        super(parentDataObjectId);
        init();
    }

    private void init()
    {
        initComponents();
        initComponentsCustom();
        initData();
    }

    private void initComponentsCustom() {
        //pricing button
        jBButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onProductPricing();
            }
        });
    }

    protected void onProductPricing() {
        pricingPanel.showDialog(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productNameLabel = new com.cosmos.swingb.JBLabel();
        productNameTextField = new com.cosmos.swingb.JBTextField();
        productCodeTextField = new com.cosmos.swingb.JBTextField();
        productCodeLabel = new com.cosmos.swingb.JBLabel();
        measureUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        productCategoryLabel = new com.cosmos.swingb.JBLabel();
        buttonPanel = new com.cosmos.swingb.JBPanel();
        closeButton = new com.cosmos.swingb.JBButton();
        saveButton = new com.cosmos.swingb.JBButton();
        measureUnitLabel = new com.cosmos.swingb.JBLabel();
        purchasedProductCheckBox = new com.cosmos.swingb.JBCheckBox();
        salableProductCheckBox = new com.cosmos.swingb.JBCheckBox();
        obsoleteProductCheckBox = new com.cosmos.swingb.JBCheckBox();
        productColorLabel = new com.cosmos.swingb.JBLabel();
        productColorComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        quantitiesOnStockPanel = new com.cosmos.swingb.JBPanel();
        maxQuantityTextField = new com.cosmos.swingb.JBFormattedTextField();
        maxQuantityLabel = new com.cosmos.swingb.JBLabel();
        defaultQuantityTextField = new com.cosmos.swingb.JBFormattedTextField();
        defaultQuantityLabel = new com.cosmos.swingb.JBLabel();
        minQuantityTextField = new com.cosmos.swingb.JBFormattedTextField();
        minQuantityLabel = new com.cosmos.swingb.JBLabel();
        pricesPanel = new com.cosmos.swingb.JBPanel();
        listPriceTextField = new com.cosmos.swingb.JBFormattedTextField();
        listPriceLabel = new com.cosmos.swingb.JBLabel();
        salesPriceTextField = new com.cosmos.swingb.JBFormattedTextField();
        salesPriceLabel = new com.cosmos.swingb.JBLabel();
        jBButton1 = new com.cosmos.swingb.JBButton();
        maxQuantityLabel1 = new com.cosmos.swingb.JBLabel();
        quantityPerPackageTextField = new com.cosmos.swingb.JBFormattedTextField();
        quantityPerPackageLabel = new com.cosmos.swingb.JBLabel();
        dimensionPanel = new com.cosmos.swingb.JBPanel();
        dimensionUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        dimensionHeightTextField = new com.cosmos.swingb.JBFormattedTextField();
        dimensionLengthTextField = new com.cosmos.swingb.JBFormattedTextField();
        dimensionWidthTextField = new com.cosmos.swingb.JBFormattedTextField();
        dimensionUnitLabel = new com.cosmos.swingb.JBLabel();
        dimensionWidthLabel = new com.cosmos.swingb.JBLabel();
        dimensionLengthLabel = new com.cosmos.swingb.JBLabel();
        dimensionHeightLabel = new com.cosmos.swingb.JBLabel();
        cubageField = new com.cosmos.swingb.JBFormattedTextField();
        dimensionUnitLabel1 = new com.cosmos.swingb.JBLabel();
        descriptionPanel = new com.cosmos.swingb.JBPanel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextPane = new com.cosmos.swingb.JBTextPane();
        dimensionPanel1 = new com.cosmos.swingb.JBPanel();
        weightUnitLabel = new com.cosmos.swingb.JBLabel();
        weightUnitComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        weightLabel = new com.cosmos.swingb.JBLabel();
        weightTextField = new com.cosmos.swingb.JBFormattedTextField();
        deliveryTimeLabel = new com.cosmos.swingb.JBLabel();
        deliveryTimeTextField = new com.cosmos.swingb.JBFormattedTextField();
        codePreviewField = new com.cosmos.swingb.JBTextField();
        codePreviewLabel = new com.cosmos.swingb.JBLabel();
        categoryField = new com.cosmos.acacia.gui.AcaciaComboList();
        productCategoryLabel1 = new com.cosmos.swingb.JBLabel();
        codeFormatField = new com.cosmos.acacia.gui.AcaciaComboList();
        producerField = new com.cosmos.acacia.gui.AcaciaComboList();
        productColorLabel1 = new com.cosmos.swingb.JBLabel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(ProductPanel.class);
        productNameLabel.setText(resourceMap.getString("productNameLabel.text")); // NOI18N
        productNameLabel.setName("productNameLabel"); // NOI18N

        productNameTextField.setName("productNameTextField"); // NOI18N

        productCodeTextField.setName("productCodeTextField"); // NOI18N

        productCodeLabel.setText(resourceMap.getString("productCodeLabel.text")); // NOI18N
        productCodeLabel.setName("productCodeLabel"); // NOI18N

        measureUnitComboBox.setName("measureUnitComboBox"); // NOI18N

        productCategoryLabel.setText(resourceMap.getString("productCategoryLabel.text")); // NOI18N
        productCategoryLabel.setName("productCategoryLabel"); // NOI18N

        buttonPanel.setName("buttonPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(ProductPanel.class, this);
        closeButton.setAction(actionMap.get("closeAction")); // NOI18N
        closeButton.setIcon(resourceMap.getIcon("closeButton.icon")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        saveButton.setAction(actionMap.get("saveAction")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(660, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, saveButton});

        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, saveButton});

        measureUnitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        measureUnitLabel.setText(resourceMap.getString("measureUnitLabel.text")); // NOI18N
        measureUnitLabel.setName("measureUnitLabel"); // NOI18N

        purchasedProductCheckBox.setText(resourceMap.getString("purchasedProductCheckBox.text")); // NOI18N
        purchasedProductCheckBox.setName("purchasedProductCheckBox"); // NOI18N

        salableProductCheckBox.setText(resourceMap.getString("salableProductCheckBox.text")); // NOI18N
        salableProductCheckBox.setName("salableProductCheckBox"); // NOI18N

        obsoleteProductCheckBox.setText(resourceMap.getString("obsoleteProductCheckBox.text")); // NOI18N
        obsoleteProductCheckBox.setName("obsoleteProductCheckBox"); // NOI18N

        productColorLabel.setText(resourceMap.getString("productColorLabel.text")); // NOI18N
        productColorLabel.setName("productColorLabel"); // NOI18N

        productColorComboBox.setName("productColorComboBox"); // NOI18N

        quantitiesOnStockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("quantitiesOnStockPanel.border.title"))); // NOI18N
        quantitiesOnStockPanel.setName("quantitiesOnStockPanel"); // NOI18N

        maxQuantityTextField.setColumns(7);
        maxQuantityTextField.setName("maxQuantityTextField"); // NOI18N

        maxQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxQuantityLabel.setText(resourceMap.getString("maxQuantityLabel.text")); // NOI18N
        maxQuantityLabel.setName("maxQuantityLabel"); // NOI18N

        defaultQuantityTextField.setColumns(7);
        defaultQuantityTextField.setName("defaultQuantityTextField"); // NOI18N

        defaultQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        defaultQuantityLabel.setText(resourceMap.getString("defaultQuantityLabel.text")); // NOI18N
        defaultQuantityLabel.setName("defaultQuantityLabel"); // NOI18N

        minQuantityTextField.setColumns(7);
        minQuantityTextField.setName("minQuantityTextField"); // NOI18N

        minQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        minQuantityLabel.setText(resourceMap.getString("minQuantityLabel.text")); // NOI18N
        minQuantityLabel.setName("minQuantityLabel"); // NOI18N

        javax.swing.GroupLayout quantitiesOnStockPanelLayout = new javax.swing.GroupLayout(quantitiesOnStockPanel);
        quantitiesOnStockPanel.setLayout(quantitiesOnStockPanelLayout);
        quantitiesOnStockPanelLayout.setHorizontalGroup(
            quantitiesOnStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quantitiesOnStockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(minQuantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minQuantityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultQuantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultQuantityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxQuantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxQuantityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addContainerGap())
        );
        quantitiesOnStockPanelLayout.setVerticalGroup(
            quantitiesOnStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quantitiesOnStockPanelLayout.createSequentialGroup()
                .addGroup(quantitiesOnStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pricesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("pricesPanel.border.title"))); // NOI18N
        pricesPanel.setName("pricesPanel"); // NOI18N

        listPriceTextField.setColumns(7);
        listPriceTextField.setName("listPriceTextField"); // NOI18N

        listPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        listPriceLabel.setText(resourceMap.getString("listPriceLabel.text")); // NOI18N
        listPriceLabel.setName("listPriceLabel"); // NOI18N

        salesPriceTextField.setColumns(7);
        salesPriceTextField.setName("salesPriceTextField"); // NOI18N

        salesPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        salesPriceLabel.setText(resourceMap.getString("salesPriceLabel.text")); // NOI18N
        salesPriceLabel.setName("salesPriceLabel"); // NOI18N

        jBButton1.setText(resourceMap.getString("jBButton1.text")); // NOI18N
        jBButton1.setName("jBButton1"); // NOI18N

        maxQuantityLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxQuantityLabel1.setText(resourceMap.getString("maxQuantityLabel1.text")); // NOI18N
        maxQuantityLabel1.setName("maxQuantityLabel1"); // NOI18N

        javax.swing.GroupLayout pricesPanelLayout = new javax.swing.GroupLayout(pricesPanel);
        pricesPanel.setLayout(pricesPanelLayout);
        pricesPanelLayout.setHorizontalGroup(
            pricesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pricesPanelLayout.createSequentialGroup()
                .addComponent(salesPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salesPriceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listPriceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxQuantityLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addContainerGap())
        );
        pricesPanelLayout.setVerticalGroup(
            pricesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pricesPanelLayout.createSequentialGroup()
                .addGroup(pricesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxQuantityLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        quantityPerPackageTextField.setName("quantityPerPackageTextField"); // NOI18N

        quantityPerPackageLabel.setText(resourceMap.getString("quantityPerPackageLabel.text")); // NOI18N
        quantityPerPackageLabel.setName("quantityPerPackageLabel"); // NOI18N

        dimensionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("dimensionPanel.border.title"))); // NOI18N
        dimensionPanel.setName("dimensionPanel"); // NOI18N

        dimensionUnitComboBox.setName("dimensionUnitComboBox"); // NOI18N

        dimensionHeightTextField.setColumns(7);
        dimensionHeightTextField.setName("dimensionHeightTextField"); // NOI18N

        dimensionLengthTextField.setColumns(7);
        dimensionLengthTextField.setName("dimensionLengthTextField"); // NOI18N

        dimensionWidthTextField.setColumns(7);
        dimensionWidthTextField.setName("dimensionWidthTextField"); // NOI18N

        dimensionUnitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dimensionUnitLabel.setText(resourceMap.getString("dimensionUnitLabel.text")); // NOI18N
        dimensionUnitLabel.setName("dimensionUnitLabel"); // NOI18N

        dimensionWidthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dimensionWidthLabel.setText(resourceMap.getString("dimensionWidthLabel.text")); // NOI18N
        dimensionWidthLabel.setName("dimensionWidthLabel"); // NOI18N

        dimensionLengthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dimensionLengthLabel.setText(resourceMap.getString("dimensionLengthLabel.text")); // NOI18N
        dimensionLengthLabel.setName("dimensionLengthLabel"); // NOI18N

        dimensionHeightLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dimensionHeightLabel.setText(resourceMap.getString("dimensionHeightLabel.text")); // NOI18N
        dimensionHeightLabel.setName("dimensionHeightLabel"); // NOI18N

        cubageField.setEditable(false);
        cubageField.setText(resourceMap.getString("cubageField.text")); // NOI18N
        cubageField.setName("cubageField"); // NOI18N

        dimensionUnitLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dimensionUnitLabel1.setText(resourceMap.getString("dimensionUnitLabel1.text")); // NOI18N
        dimensionUnitLabel1.setName("dimensionUnitLabel1"); // NOI18N

        javax.swing.GroupLayout dimensionPanelLayout = new javax.swing.GroupLayout(dimensionPanel);
        dimensionPanel.setLayout(dimensionPanelLayout);
        dimensionPanelLayout.setHorizontalGroup(
            dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dimensionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dimensionUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionUnitLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cubageField, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(dimensionUnitComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionWidthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionWidthTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionLengthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionLengthTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionHeightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionHeightTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addContainerGap())
        );
        dimensionPanelLayout.setVerticalGroup(
            dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dimensionPanelLayout.createSequentialGroup()
                .addGroup(dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimensionUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionWidthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionLengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionHeightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dimensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimensionUnitLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cubageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        descriptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("descriptionPanel.border.title"))); // NOI18N
        descriptionPanel.setName("descriptionPanel"); // NOI18N

        descriptionScrollPane.setName("descriptionScrollPane"); // NOI18N

        descriptionTextPane.setName("descriptionTextPane"); // NOI18N
        descriptionScrollPane.setViewportView(descriptionTextPane);

        javax.swing.GroupLayout descriptionPanelLayout = new javax.swing.GroupLayout(descriptionPanel);
        descriptionPanel.setLayout(descriptionPanelLayout);
        descriptionPanelLayout.setHorizontalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE)
                .addContainerGap())
        );
        descriptionPanelLayout.setVerticalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanelLayout.createSequentialGroup()
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addContainerGap())
        );

        dimensionPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Delivery information"));
        dimensionPanel1.setName("dimensionPanel1"); // NOI18N

        weightUnitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        weightUnitLabel.setText(resourceMap.getString("weightUnitLabel.text")); // NOI18N
        weightUnitLabel.setName("weightUnitLabel"); // NOI18N

        weightUnitComboBox.setName("weightUnitComboBox"); // NOI18N

        weightLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        weightLabel.setText(resourceMap.getString("weightLabel.text")); // NOI18N
        weightLabel.setName("weightLabel"); // NOI18N

        weightTextField.setColumns(7);
        weightTextField.setName("weightTextField"); // NOI18N

        deliveryTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        deliveryTimeLabel.setText(resourceMap.getString("deliveryTimeLabel.text")); // NOI18N
        deliveryTimeLabel.setName("deliveryTimeLabel"); // NOI18N

        deliveryTimeTextField.setColumns(7);
        deliveryTimeTextField.setName("deliveryTimeTextField"); // NOI18N

        javax.swing.GroupLayout dimensionPanel1Layout = new javax.swing.GroupLayout(dimensionPanel1);
        dimensionPanel1.setLayout(dimensionPanel1Layout);
        dimensionPanel1Layout.setHorizontalGroup(
            dimensionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dimensionPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weightUnitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(weightUnitComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(weightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(weightTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(deliveryTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deliveryTimeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addContainerGap())
        );
        dimensionPanel1Layout.setVerticalGroup(
            dimensionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dimensionPanel1Layout.createSequentialGroup()
                .addGroup(dimensionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deliveryTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deliveryTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        codePreviewField.setEditable(false);
        codePreviewField.setText(resourceMap.getString("codePreviewField.text")); // NOI18N
        codePreviewField.setName("codePreviewField"); // NOI18N

        codePreviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        codePreviewLabel.setText(resourceMap.getString("codePreviewLabel.text")); // NOI18N
        codePreviewLabel.setName("codePreviewLabel"); // NOI18N

        categoryField.setName("categoryField"); // NOI18N

        productCategoryLabel1.setText(resourceMap.getString("productCategoryLabel1.text")); // NOI18N
        productCategoryLabel1.setName("productCategoryLabel1"); // NOI18N

        codeFormatField.setName("codeFormatField"); // NOI18N

        producerField.setName("producerField"); // NOI18N

        productColorLabel1.setText(resourceMap.getString("productColorLabel1.text")); // NOI18N
        productColorLabel1.setName("productColorLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dimensionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productColorLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(productCategoryLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(productNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(productCodeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(productColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(productCategoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(quantityPerPackageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(productCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(measureUnitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(measureUnitComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                            .addComponent(productNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                            .addComponent(categoryField, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(purchasedProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(salableProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(obsoleteProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(producerField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                                    .addComponent(quantityPerPackageTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                                    .addComponent(productColorComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                                    .addComponent(codeFormatField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codePreviewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codePreviewField, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))))
                    .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pricesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantitiesOnStockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dimensionPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measureUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productCategoryLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codePreviewField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codePreviewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(purchasedProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salableProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(obsoleteProductCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codeFormatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productColorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityPerPackageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityPerPackageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(productColorLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(producerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantitiesOnStockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pricesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimensionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBPanel buttonPanel;
    private com.cosmos.acacia.gui.AcaciaComboList categoryField;
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.acacia.gui.AcaciaComboList codeFormatField;
    private com.cosmos.swingb.JBTextField codePreviewField;
    private com.cosmos.swingb.JBLabel codePreviewLabel;
    private com.cosmos.swingb.JBFormattedTextField cubageField;
    private com.cosmos.swingb.JBLabel defaultQuantityLabel;
    private com.cosmos.swingb.JBFormattedTextField defaultQuantityTextField;
    private com.cosmos.swingb.JBLabel deliveryTimeLabel;
    private com.cosmos.swingb.JBFormattedTextField deliveryTimeTextField;
    private com.cosmos.swingb.JBPanel descriptionPanel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private com.cosmos.swingb.JBTextPane descriptionTextPane;
    private com.cosmos.swingb.JBLabel dimensionHeightLabel;
    private com.cosmos.swingb.JBFormattedTextField dimensionHeightTextField;
    private com.cosmos.swingb.JBLabel dimensionLengthLabel;
    private com.cosmos.swingb.JBFormattedTextField dimensionLengthTextField;
    private com.cosmos.swingb.JBPanel dimensionPanel;
    private com.cosmos.swingb.JBPanel dimensionPanel1;
    private com.cosmos.acacia.gui.AcaciaComboBox dimensionUnitComboBox;
    private com.cosmos.swingb.JBLabel dimensionUnitLabel;
    private com.cosmos.swingb.JBLabel dimensionUnitLabel1;
    private com.cosmos.swingb.JBLabel dimensionWidthLabel;
    private com.cosmos.swingb.JBFormattedTextField dimensionWidthTextField;
    private com.cosmos.swingb.JBButton jBButton1;
    private com.cosmos.swingb.JBLabel listPriceLabel;
    private com.cosmos.swingb.JBFormattedTextField listPriceTextField;
    private com.cosmos.swingb.JBLabel maxQuantityLabel;
    private com.cosmos.swingb.JBLabel maxQuantityLabel1;
    private com.cosmos.swingb.JBFormattedTextField maxQuantityTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox measureUnitComboBox;
    private com.cosmos.swingb.JBLabel measureUnitLabel;
    private com.cosmos.swingb.JBLabel minQuantityLabel;
    private com.cosmos.swingb.JBFormattedTextField minQuantityTextField;
    private com.cosmos.swingb.JBCheckBox obsoleteProductCheckBox;
    private com.cosmos.swingb.JBPanel pricesPanel;
    private com.cosmos.acacia.gui.AcaciaComboList producerField;
    private com.cosmos.swingb.JBLabel productCategoryLabel;
    private com.cosmos.swingb.JBLabel productCategoryLabel1;
    private com.cosmos.swingb.JBLabel productCodeLabel;
    private com.cosmos.swingb.JBTextField productCodeTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox productColorComboBox;
    private com.cosmos.swingb.JBLabel productColorLabel;
    private com.cosmos.swingb.JBLabel productColorLabel1;
    private com.cosmos.swingb.JBLabel productNameLabel;
    private com.cosmos.swingb.JBTextField productNameTextField;
    private com.cosmos.swingb.JBCheckBox purchasedProductCheckBox;
    private com.cosmos.swingb.JBPanel quantitiesOnStockPanel;
    private com.cosmos.swingb.JBLabel quantityPerPackageLabel;
    private com.cosmos.swingb.JBFormattedTextField quantityPerPackageTextField;
    private com.cosmos.swingb.JBCheckBox salableProductCheckBox;
    private com.cosmos.swingb.JBLabel salesPriceLabel;
    private com.cosmos.swingb.JBFormattedTextField salesPriceTextField;
    private com.cosmos.swingb.JBButton saveButton;
    private com.cosmos.swingb.JBLabel weightLabel;
    private com.cosmos.swingb.JBFormattedTextField weightTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox weightUnitComboBox;
    private com.cosmos.swingb.JBLabel weightUnitLabel;
    // End of variables declaration//GEN-END:variables

    @EJB
    private ProductsListRemote formSession;

    private BindingGroup productBindingGroup;
    private SimpleProduct product;
    @SuppressWarnings("unchecked")
    private Binding productCodeBinding;
    //used for binding
    private BigDecimal purchasePrice;
    private BigDecimal costPrice;
    private BigDecimal salePrice;

    protected void initData()
    {
        setDialogResponse(DialogResponse.CLOSE);

        AcaciaToStringConverter resourceToStringConverter = new AcaciaToStringConverter();
        AutoCompleteDecorator.decorate(dimensionUnitComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(measureUnitComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(productColorComboBox, resourceToStringConverter);
        AutoCompleteDecorator.decorate(weightUnitComboBox, resourceToStringConverter);

        if(product == null)
        {
            product = getFormSession().newProduct(getParentDataObjectId());
        }
        
//        updateProductPricingProperties();

        BindingGroup bindingGroup = getBindingGroup();

        setSaveActionState();

        if(bindingGroup != null)
        {
            bindingGroup.addBindingListener(new AbstractBindingListener()
            {

                @SuppressWarnings("unchecked")
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    setSaveActionState();
                }
            });
        }

    }

//    private void updateProductPricingProperties() {
//        if ( product.getDiscount()!=null ){
//            product.setDiscountPercent(product.getDiscount().getValue());
//        }
//        if ( product.getDuty()!=null ){
//            product.setDutyPercent(product.getDuty().getValue());
//        }
//        if ( product.getTransport()!=null ){
//            BigDecimal percentDec = product.getTransport().getValue().divide(new BigDecimal(100), MathContext.DECIMAL64);
//            BigDecimal transpAmt = product.getPurchasePrice().multiply(percentDec);
//            product.setTransportPrice(transpAmt);
//        }
//        if ( product.getProfit()!=null ){
//            //product.setProfitValue(profitValue);
//        }
//    }

    protected BindingGroup getBindingGroup()
    {
        if(productBindingGroup == null)
        {
            productBindingGroup = new BindingGroup();

            EntityProperties entityProps = getProductEntityProperties();

            PropertyDetails propDetails = entityProps.getPropertyDetails("productName");
            productNameTextField.bind(productBindingGroup, product, propDetails);

            propDetails = entityProps.getPropertyDetails("productCode");
            productCodeBinding = productCodeTextField.bind(productBindingGroup, product, propDetails);
            productCodeBinding.addBindingListener(new AbstractBindingListener() {
                @SuppressWarnings("unchecked")
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    if ( binding.isContentValid() )
                        updateCodePreview();
                    else
                        codePreviewField.setText("");
                }
            });

            propDetails = entityProps.getPropertyDetails("measureUnit");
            measureUnitComboBox.bind(productBindingGroup, getMeasureUnits(), product, propDetails);

            propDetails = entityProps.getPropertyDetails("category");
            ProductCategoriesTreePanel categoryListPanel = new ProductCategoriesTreePanel(getParentDataObjectId());
            categoryField.bind(productBindingGroup, categoryListPanel, product, propDetails,
                "${categoryName}", UpdateStrategy.READ_WRITE);
            
            propDetails = entityProps.getPropertyDetails("purchased");
            purchasedProductCheckBox.bind(productBindingGroup, product, propDetails);

            propDetails = entityProps.getPropertyDetails("salable");
            salableProductCheckBox.bind(productBindingGroup, product, propDetails);

            propDetails = entityProps.getPropertyDetails("obsolete");
            obsoleteProductCheckBox.bind(productBindingGroup, product, propDetails);

            propDetails = entityProps.getPropertyDetails("patternMaskFormat");
            PatternMaskFormatListPanel formatsListPanel = new PatternMaskFormatListPanel(getParentDataObjectId());
            codeFormatField.bind(productBindingGroup, formatsListPanel, product, propDetails,
                "${patternName} (${format})", UpdateStrategy.READ_WRITE);
            codeFormatField.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    updateCodePreview();
                }
            }, true);

            propDetails = entityProps.getPropertyDetails("productColor");
            productColorComboBox.bind(productBindingGroup, getProductColors(), product, propDetails);

            minQuantityTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("minimumQuantity"), getDecimalFormat());
            maxQuantityTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("maximumQuantity"), getDecimalFormat());
            defaultQuantityTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("defaultQuantity"), getDecimalFormat());
            
            this.setPurchasePrice(product.getPurchasePrice());
            this.setCostPrice(product.getPurchasePrice());
            this.setSalePrice(product.getSalePrice());
            
            pricingPanel = new ProductPricingPanel(product);
            //list price in current form
            final Binding listPriceFieldBinding = listPriceTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("listPrice"), getDecimalFormat());
            listPriceTextField.setEditable(false);
            //list price in pricing panel
            Binding pricingPanelListBinding = pricingPanel.getListPriceField().bind(productBindingGroup, product, entityProps.getPropertyDetails("listPrice"), getDecimalFormat());
            pricingPanelListBinding.addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    Object newValue = binding.getTargetProperty().getValue(pricingPanel.getListPriceField());
                    listPriceFieldBinding.getTargetProperty().setValue(listPriceTextField, newValue);
                    
                    //update discount calculation
                    BigDecimal listPrice = null;
                    boolean valid = binding.isContentValid() && !"".equals(event.getNewValue());
                    if ( valid )
                        listPrice = product.getListPrice();
                        
                    pricingPanel.getDiscountField().totalValueChanged(listPrice);
                    
                    //update purchase price field
                    pricingPanel.updatePurchasePriceField(valid);
                }
            });
            
            //sale price in current form
            final Binding salesPriceFieldBinding = salesPriceTextField.bind(productBindingGroup, this, 
                createPricePropertyDetails("salePrice"), getDecimalFormat());
            salesPriceTextField.setEditable(false);
            //sale price in pricing panel
            Binding pricingPanelSalesBinding = pricingPanel.getSalesPriceField().bind(productBindingGroup, product, 
               createPricePropertyDetails("salePrice"), getDecimalFormat());
            pricingPanelSalesBinding.addBindingListener(new AbstractBindingListener() {
                @Override
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    Object newValue = binding.getTargetProperty().getValue(pricingPanel.getSalesPriceField());
                    salesPriceFieldBinding.getTargetProperty().setValue(salesPriceTextField, newValue);
                }
            });
            pricingPanel.updateSalePriceField(true);
            
            //purchase price in current form
            final Binding purchasePriceFieldBinding = pricingPanel.getPurchasePriceField().bind(productBindingGroup, this, 
                createPricePropertyDetails("purchasePrice"), getDecimalFormat());
            purchasePriceFieldBinding.addBindingListener(new AbstractBindingListener() {
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    pricingPanel.onPurchasePriceUpdated(binding.isContentValid() && !"".equals(event.getNewValue()));
                }
            });
            pricingPanel.updatePurchasePriceField(true);
            
            //cost price in current form
            final Binding costPriceFieldBinding = pricingPanel.getCostPriceField().bind(productBindingGroup, this, 
                    createPricePropertyDetails("costPrice"), getDecimalFormat());
            costPriceFieldBinding.addBindingListener(new AbstractBindingListener() {
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    pricingPanel.onCostPriceUpdated(binding.isContentValid() && !"".equals(event.getNewValue()));
                }
            });
            pricingPanel.updateCostPriceField(true);
            
            // currency
            pricingPanel.getCurrencyField().bind(productBindingGroup, getEnumResources(Currency.class), product,
                entityProps.getPropertyDetails("currency"));
            
            // discount
            pricingPanel.getDiscountField().bind(productBindingGroup, product, entityProps.getPropertyDetails("discountPercent"), getDecimalFormat(),
                true, EditType.NONE, product.getListPrice());
            
            // transport
            Binding transportBinding = pricingPanel.getTransportPriceField().bind(productBindingGroup, product, entityProps.getPropertyDetails("transportPrice"), getDecimalFormat(),
                false, EditType.VALUE, product.getPurchasePrice());
            transportBinding.addBindingListener(new AbstractBindingListener() {
                public void targetChanged(Binding binding, PropertyStateEvent event) {
                    pricingPanel.updateCostPriceField(true);
                }
            });
            
            // duty
            pricingPanel.getDutyField().bind(productBindingGroup, product, entityProps.getPropertyDetails("dutyPercent"), getDecimalFormat(),
                true, EditType.NONE, product.getPurchasePrice());
            
            // profit
            pricingPanel.getProfitField().bind(productBindingGroup, product, entityProps.getPropertyDetails("profitPercent"), getDecimalFormat(),
                true, EditType.NONE, product.getCostPrice());
            
            quantityPerPackageTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("quantityPerPackage"), getIntegerFormat());

            dimensionUnitComboBox.bind(
                    productBindingGroup,
                    getMeasureUnits(MeasurementUnit.Category.Volume),
                    product,
                    entityProps.getPropertyDetails("dimensionUnit"));
            dimensionWidthTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("dimensionWidth"), getDecimalFormat());
            dimensionLengthTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("dimensionLength"), getDecimalFormat());
            dimensionHeightTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("dimensionHeight"), getDecimalFormat());

            weightUnitComboBox.bind(
                    productBindingGroup,
                    getMeasureUnits(MeasurementUnit.Category.MassWeight),
                    product,
                    entityProps.getPropertyDetails("weightUnit"));
            weightTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("weight"), getDecimalFormat());

            deliveryTimeTextField.bind(productBindingGroup, product, entityProps.getPropertyDetails("deliveryTime"), getIntegerFormat());

            propDetails = entityProps.getPropertyDetails("producer");
            
            BusinessPartnersListPanel producterListPanel = BusinessPartnersListPanel.createProducersPanel(getParentDataObjectId());
            producerField.bind(productBindingGroup, producterListPanel, product, propDetails,
                "${displayName}", UpdateStrategy.READ_WRITE);
            
            propDetails = entityProps.getPropertyDetails("description");
            descriptionTextPane.bind(productBindingGroup, product, propDetails);
            
            jBButton1.setEnabled(rightsManager.isAllowed(SpecialPermission.ProductPricing));

            productBindingGroup.bind();
            
            //additionally update the percent/value pairs
            pricingPanel.getDiscountField().totalValueChanged(product.getListPrice());
            pricingPanel.getTransportPriceField().totalValueChanged(product.getPurchasePrice());
            pricingPanel.getDutyField().totalValueChanged(product.getPurchasePrice());
            pricingPanel.getProfitField().totalValueChanged(product.getCostPrice());
        }

        return productBindingGroup;
    }

    private PropertyDetails createPricePropertyDetails(String propertyName){
        PropertyDetails pd = new PropertyDetails(propertyName, propertyName, BigDecimal.class.getName());
        pd.setEditable(false);
        return pd;
    }

    @SuppressWarnings("unchecked")
    protected Object onChooseCategory() {
        ProductCategoriesTreePanelBackup panel = new ProductCategoriesTreePanelBackup(null);
        panel.getCategoryListPanel().setVisible(com.cosmos.acacia.gui.AbstractTablePanel.Button.Select, true);
        panel.getCategoryListPanel().setVisible(com.cosmos.acacia.gui.AbstractTablePanel.Button.Unselect, true);

        DialogResponse dResponse = panel.showDialog(this);

        if ( DialogResponse.SELECT.equals(dResponse) ){

            ProductCategory category = (ProductCategory)
                panel.getCategoryListPanel().getSelectedRowObject();

            return category;
        }else{
            return null;
        }
    }

    private List<DbResource> productColors;
    private List<DbResource> getProductColors() {
        if ( productColors==null ){
            productColors = getFormSession().getProductColors();
        }

        return productColors;
    }

//    private UpdateFormatListener updateFormatListener
//        = new UpdateFormatListener();
//
//    private class UpdateFormatListener extends AbstractBindingListener {
//
//        @SuppressWarnings("unchecked")
//        @Override
//        public void targetChanged(Binding binding, PropertyStateEvent event) {
//            if (binding.isContentValid())
//                updateFormatField();
//        }
//    }

    protected void updateCodePreview() {
        if ( product!=null )
            codePreviewField.setText(product.getCodeFormatted());
        else
            codePreviewField.setText("");
    }

//    protected void updateFormatField() {
//
//        PatternMaskFormat f = (PatternMaskFormat) patternMaskField.getSelectedItem();
//        if ( f==null ){
//            patternMaskBinding.getTargetObject();
//            patternMaskBinding.setTargetObject(f);
//        }
//
//        ProductCategory category = (ProductCategory)
//            panel.getCategoryListPanel().getSelectedRowObject();
//        if ( category!=null ){
//            PatternMaskFormat categoryFormat = category.getPatternMaskFormat();
//
//            //if the currently selected format is not set or is probably set from the
//            //previous category selection - then replace it
//            if ( oldFormat==null || oldFormatInheritedByOldCategory ){
//                patternMaskBinding.setTargetObject(categoryFormat);
//            }
//        }else if ( oldFormatInheritedByOldCategory ){
//            patternMaskBinding.setTargetObject(null);
//        }
//        return category;
//    }

    protected void setSaveActionState()
    {
        setEnabled(Button.Save, productBindingGroup.isContentValid());
    }

    protected ProductsListRemote getFormSession() {
        if(formSession == null)
            formSession = getBean(ProductsListRemote.class);

        return formSession;
    }

    @Action
    public void saveAction() {
        try
        {
            System.out.println("Save: product: " + product);
            product = getFormSession().saveProduct(product);
            setDialogResponse(DialogResponse.SAVE);
            setSelectedValue(product);
            close();
        }
        catch(Exception ex)
        {
            ValidationException ve = extractValidationException(ex);
            if ( ve!=null ){
                updateFieldsStyle(ve.getMessages());
                String message = getValidationErrorsMessage(ve);
                JBErrorPane.showDialog(this, createSaveErrorInfo(message, null));
            }else{
                ex.printStackTrace();
                // TODO: Log that error
                String basicMessage = getResourceMap().getString("saveAction.Action.error.basicMessage", ex.getMessage());
                ErrorInfo errorInfo = createSaveErrorInfo(basicMessage, ex);
                JBErrorPane.showDialog(this, errorInfo);
            }
        }
    }

    /**
     * Iterates through all fields and updates there appearance to error state if
     * some of the messages is related to their respective property.
     *
     * Note: currently - test support.
     * @param messages
     */
    @SuppressWarnings("unchecked")
    private void updateFieldsStyle(List<ValidationMessage> messages) {
        //compose a set for easier and faster lookup
        productBindingGroup.getBindings();
        Set<String> errorProperties = new HashSet<String>();
        for (ValidationMessage msg : messages) {
            if ( msg.getTarget()!=null ){
                String el = msg.getTarget();
                errorProperties.add(el);
            }
        }

        for (Binding binding : productBindingGroup.getBindings()) {
            if ( binding.getTargetObject() instanceof JBTextField ){
                JBTextField textField = (JBTextField)binding.getTargetObject();
                if ( errorProperties.contains(textField.getPropertyName()) )
                    textField.setStyleInvalid("");//temporary code, TODO fix
            }else if ( binding.getTargetObject() instanceof JBFormattedTextField){
                JBFormattedTextField textField = (JBFormattedTextField)binding.getTargetObject();
                if ( errorProperties.contains(textField.getPropertyName()) )
                    textField.setStyleInvalid("");
            }else if ( binding.getTargetObject() instanceof JBComboBox){
                JBComboBox comboBox = (JBComboBox)binding.getTargetObject();
                if ( errorProperties.contains(comboBox.getPropertyName()) )
                    comboBox.setStyleInvalid();
            }
        }
    }

    /**
     * @param basicMessage
     * @param ex - may be null
     * @return
     */
    private ErrorInfo createSaveErrorInfo(String basicMessage, Exception ex) {
        ResourceMap resource = getResourceMap();
        String title = resource.getString("saveAction.Action.error.title");

        String detailedMessage = resource.getString("saveAction.Action.error.detailedMessage");
        String category = ProductPanel.class.getName() + ": saveAction.";
        Level errorLevel = Level.WARNING;

        Map<String, String> state = new HashMap<String, String>();
        state.put("productId", String.valueOf(product.getProductId()));
        state.put("productName", String.valueOf(product.getProductName()));
        state.put("productCode", String.valueOf(product.getProductCode()));

        ErrorInfo errorInfo = new ErrorInfo(title, basicMessage, detailedMessage, category, ex, errorLevel, state);
        return errorInfo;
    }

    @Action
    public void closeAction() {
        if(productBindingGroup.isContentChanged())
        {
            ResourceMap resource = getResourceMap();
            String title = resource.getString("closeAction.ConfirmDialog.unsavedData.title");
            String message = resource.getString("closeAction.ConfirmDialog.unsavedData.message");
            Icon icon = resource.getImageIcon("closeAction.ConfirmDialog.unsavedData.icon");
            int result = JOptionPane.showConfirmDialog(
                    this.getParent(),
                    message,
                    title,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    icon);
            if(JOptionPane.YES_OPTION != result)
            {
                return;
            }
        }

        setDialogResponse(DialogResponse.CLOSE);
        close();
    }
    
    protected EntityProperties getProductEntityProperties()
    {
        return getFormSession().getProductEntityProperties();
    }

    private List<DbResource> getMeasureUnits()
    {
        return getFormSession().getMeasureUnits();
    }

    private List<DbResource> getMeasureUnits(MeasurementUnit.Category category)
    {
        return getFormSession().getMeasureUnits(category);
    }

    @Action
    public void newProductCategory() {
        JOptionPane.showConfirmDialog(
            this.getParent(),
            "Functionality not implemented!",
            "Not implemented", JOptionPane.DEFAULT_OPTION);
    }

    @Action
    public void newPatternMaskFormat() {
    }

    @Action
    public void newProductColor() {
    }

    @Action
    public void newProducer() {
        JOptionPane.showConfirmDialog(
            this.getParent(),
            "Functionality not implemented!",
            "Not implemented",JOptionPane.DEFAULT_OPTION);
    }

    public enum Button
    {
        Save("saveAction"),
        Close("closeAction");

        private Button(String actionName)
        {
            this.actionName = actionName;
        }

        private String actionName;

        public String getActionName() {
            return actionName;
        }
    };

    public javax.swing.Action getAction(Button button)
    {
        ApplicationActionMap actionMap = getApplicationActionMap();
        if(actionMap != null && button != null)
        {
            return actionMap.get(button.getActionName());
        }

        return null;
    }

    public void setEnabled(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setEnabled(enabled);
        }
    }

    public void setSelected(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setSelected(enabled);
        }
    }

    public void setVisible(Button button, boolean visible) {
        switch(button)
        {
            case Save:
                saveButton.setVisible(visible);
                break;

            case Close:
                closeButton.setVisible(visible);
                break;
        }
    }

    public boolean isVisible(Button button) {
        switch(button)
        {
            case Save:
                return saveButton.isVisible();

            case Close:
                return closeButton.isVisible();
        }

        throw new IllegalArgumentException("Unknown or unsupported Button enumeration: " + button);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected Class getResourceStopClass()
    {
        return AcaciaPanel.class;
    }

    public static void main(String[] args) throws Exception{
//        MaskFormatter f = new MaskFormatter("###-###-#");
//        f.setValidCharacters("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ()!@#$%^*_+=`';:\",.<>/?");
//        f.setValidCharacters("34234234");
//        f.setValidCharacters("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
//        String result = f.valueToString(new String("42323"));
//        System.out.println(result);

//        MaskFormatter formatter = new MaskFormatter("0x***");
//        formatter.setValidCharacters("0123456789abcdefABCDEF");

        MaskFormatter formatter = new MaskFormatter("###-####");
        formatter.setPlaceholderCharacter('_');
        System.out.println(formatter.stringToValue("123-1234"));

    }

    public BigDecimal getPurchasePrice() {
        return purchasePrice;
    }

    public void setPurchasePrice(BigDecimal purchasePrice) {
        this.purchasePrice = purchasePrice;
    }

    public BigDecimal getCostPrice() {
        return costPrice;
    }

    public void setCostPrice(BigDecimal costPrice) {
        this.costPrice = costPrice;
    }

    public BigDecimal getSalePrice() {
        return salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }
}
