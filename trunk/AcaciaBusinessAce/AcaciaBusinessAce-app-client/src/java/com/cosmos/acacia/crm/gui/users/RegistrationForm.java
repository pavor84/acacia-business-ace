/*
 * RegistrationForm.java
 *
 * Created on 25 June 2008, 20:46
 */

package com.cosmos.acacia.crm.gui.users;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.JOptionPane;

import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.BindingGroup;

import com.cosmos.acacia.crm.bl.users.UsersRemote;
import com.cosmos.acacia.crm.data.Address;
import com.cosmos.acacia.crm.data.ContactPerson;
import com.cosmos.acacia.crm.data.Organization;
import com.cosmos.acacia.crm.data.User;
import com.cosmos.acacia.crm.gui.contactbook.AddressListPanel;
import com.cosmos.acacia.crm.gui.contactbook.ContactPersonsListPanel;
import com.cosmos.acacia.crm.gui.contactbook.OrganizationsListPanel;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.acacia.gui.AbstractTablePanel.Button;
import com.cosmos.beansbinding.EntityProperties;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class RegistrationForm extends BaseEntityPanel {


    /** Creates new form RegistrationForm */
    public RegistrationForm(String email) {
        super(null);
        this.email = email;
        init();
    }

    @Override
    protected void init()
    {
        initComponents();
        super.init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        organizationComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        organizationLabel = new com.cosmos.swingb.JBLabel();
        branchComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        branchLabel = new com.cosmos.swingb.JBLabel();
        usernameLabel = new com.cosmos.swingb.JBLabel();
        usernameTextField = new com.cosmos.swingb.JBTextField();
        passwordLabel = new com.cosmos.swingb.JBLabel();
        passwordLabel2 = new com.cosmos.swingb.JBLabel();
        personLabel = new com.cosmos.swingb.JBLabel();
        personComboList = new com.cosmos.acacia.gui.AcaciaComboList();
        registerButton = new com.cosmos.swingb.JBButton();
        passwordTextField = new com.cosmos.swingb.JBPasswordField();
        passwordTextField2 = new com.cosmos.swingb.JBPasswordField();

        setName("Form"); // NOI18N

        organizationComboList.setName("organizationComboList"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(RegistrationForm.class);
        organizationLabel.setText(resourceMap.getString("organizationLabel.text")); // NOI18N
        organizationLabel.setName("organizationLabel"); // NOI18N

        branchComboList.setName("branchComboList"); // NOI18N

        branchLabel.setText(resourceMap.getString("branchLabel.text")); // NOI18N
        branchLabel.setName("branchLabel"); // NOI18N

        usernameLabel.setText(resourceMap.getString("usernameLabel.text")); // NOI18N
        usernameLabel.setName("usernameLabel"); // NOI18N

        usernameTextField.setText(resourceMap.getString("usernameTextField.text")); // NOI18N
        usernameTextField.setName("usernameTextField"); // NOI18N

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        passwordLabel2.setText(resourceMap.getString("passwordLabel2.text")); // NOI18N
        passwordLabel2.setName("passwordLabel2"); // NOI18N

        personLabel.setText(resourceMap.getString("personLabel.text")); // NOI18N
        personLabel.setName("personLabel"); // NOI18N

        personComboList.setName("personComboList"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(RegistrationForm.class, this);
        registerButton.setAction(actionMap.get("register")); // NOI18N
        registerButton.setText(resourceMap.getString("registerButton.text")); // NOI18N
        registerButton.setName("registerButton"); // NOI18N

        passwordTextField.setText(resourceMap.getString("passwordTextField.text")); // NOI18N
        passwordTextField.setName("passwordTextField"); // NOI18N

        passwordTextField2.setText(resourceMap.getString("passwordTextField2.text")); // NOI18N
        passwordTextField2.setName("passwordTextField2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(branchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(32, 32, 32))
                                .addComponent(organizationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                            .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(organizationComboList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                                    .addComponent(branchComboList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                                    .addComponent(personComboList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)))
                            .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .addComponent(passwordTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)))
                    .addComponent(personLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(organizationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(organizationComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(branchComboList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(branchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personComboList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(personLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.acacia.gui.AcaciaComboList branchComboList;
    private com.cosmos.swingb.JBLabel branchLabel;
    private com.cosmos.acacia.gui.AcaciaComboList organizationComboList;
    private com.cosmos.swingb.JBLabel organizationLabel;
    private com.cosmos.swingb.JBLabel passwordLabel;
    private com.cosmos.swingb.JBLabel passwordLabel2;
    private com.cosmos.swingb.JBPasswordField passwordTextField;
    private com.cosmos.swingb.JBPasswordField passwordTextField2;
    private com.cosmos.acacia.gui.AcaciaComboList personComboList;
    private com.cosmos.swingb.JBLabel personLabel;
    private com.cosmos.swingb.JBButton registerButton;
    private com.cosmos.swingb.JBLabel usernameLabel;
    private com.cosmos.swingb.JBTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    private BindingGroup userBindingGroup;
    private User user;
    private UsersRemote formSession;
    private String email;

    @Override
    protected void initData() {
       setResizable(false);

       if (user == null)
           user = getFormSession().createUser();

       userBindingGroup = new BindingGroup();

       // Setting the email address to the verified one from the code-verification step
       user.setEmailAddress(email);

       EntityProperties entityProps = getFormSession().getUserEntityProperties();
       usernameTextField.bind(userBindingGroup, user, entityProps.getPropertyDetails("userName"));
       passwordTextField.bind(userBindingGroup, user, entityProps.getPropertyDetails("userPassword"));

       OrganizationsListPanel organizationsTable = new OrganizationsListPanel(null);
       organizationComboList.initUnbound(organizationsTable);

       organizationComboList.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                Organization organization = (Organization) organizationComboList.getSelectedItem();
                if (organization == null) {
                    branchComboList.getComboBox().removeAllItems();
                    branchComboList.setEnabled(false);
                    return;
                }

                branchComboList.setEnabled(true);
                AddressListPanel branchesTable = new AddressListPanel(organization.getId());
                branchesTable.setVisible(Button.New, false);
                branchComboList.initUnbound(branchesTable);

                branchComboList.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        Address branch = (Address) branchComboList.getSelectedItem();

                        if (branch == null) {
                            personComboList.getComboBox().removeAllItems();
                            personComboList.setEnabled(false);
                            return;
                        }
                        personComboList.setEnabled(true);
                        ContactPersonsListPanel personsTable = new ContactPersonsListPanel(branch.getId());
                        personComboList.initUnbound(personsTable);
                    }

                });
            }
       });

       branchComboList.setEnabled(false);
       personComboList.setEnabled(false);

       userBindingGroup.bind();
    }

    @Action
    public void register() {
        try {
            if (user.getUserPassword().equals(new String(passwordTextField2.getPassword()))) {
                if (personComboList.getSelectedItem() != null)
                    user.setPerson(((ContactPerson) personComboList.getSelectedItem()).getContact());

                getFormSession().signup(user,
                        (Organization) organizationComboList.getSelectedItem(),
                        (Address) branchComboList.getSelectedItem());

                JOptionPane.showMessageDialog(this, getResourceMap().getString("signup.successful"));
                this.close();
            } else {
                JOptionPane.showMessageDialog(this, getResourceMap().getString("passwords.inconsistent"));
            }
        } catch (Exception ex){
            checkForValidationException(ex);
        }
    }

    protected UsersRemote getFormSession() {
        if (formSession == null)
        {
             try
             {
                 formSession = getBean(UsersRemote.class);
                 //UserUtils.updateUserLocale(formSession);
             }
             catch(Exception ex)
             {
                 ex.printStackTrace();
             }
        }

         return formSession;
    }

    @Override
    public BindingGroup getBindingGroup() {
        return userBindingGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        // Not used
        return null;
    }

    @Override
    public Object getEntity() {
        return user;
    }

    @Override
    public void performSave(boolean closeAfter) {
        // Not used

    }

}
