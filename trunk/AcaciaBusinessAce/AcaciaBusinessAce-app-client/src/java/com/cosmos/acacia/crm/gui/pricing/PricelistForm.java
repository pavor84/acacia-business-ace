package com.cosmos.acacia.crm.gui.pricing;

import static com.cosmos.acacia.util.AcaciaUtils.getDecimalFormat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import org.jdesktop.beansbinding.BindingGroup;

import com.cosmos.acacia.crm.bl.impl.EnumResourceRemote;
import com.cosmos.acacia.crm.bl.pricing.PricelistRemote;
import com.cosmos.acacia.crm.data.Pricelist;
import com.cosmos.acacia.crm.enums.Currency;
import com.cosmos.acacia.gui.AbstractTablePanelListener;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.beansbinding.validation.NumericRangeValidator;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.listeners.TableModificationListener;

/**
 * 
 * Created	:	28.12.2008
 * @author	Petar Milev
 *
 */
public class PricelistForm extends BaseEntityPanel {
    
    private Pricelist entity;
    
    private BindingGroup bindGroup;
    private PricelistRemote formSession = getBean(PricelistRemote.class);
    private EnumResourceRemote enumResourceRemote = getBean(EnumResourceRemote.class);
    private EntityProperties entProps;
    
    private Integer activeFromHoursValue;
    private Integer activeToHoursValue;
    private Integer activeFromMinutesValue;
    private Integer activeToMinutesValue;
    
    private PricelistItemListPanel itemsTablePanel;

    /** Creates new form */
    public PricelistForm(Pricelist pricelist) {
        super(pricelist.getParentId());
        this.entity = pricelist;
        initialize();
    }

    private void initialize() {
        initComponents();
        initComponentsCustom();
        init();
    }

    private void initComponentsCustom() {
        itemsTablePanel = new PricelistItemListPanel(entity);

        itemsTablePanel.addTableModificationListener(new TableModificationListener() {
            public void rowModified(Object row) {
            }
            public void rowDeleted(Object row) {
            }
            public void rowAdded(Object row) {
            }
        });

        itemsTablePanel.addTablePanelListener(new AbstractTablePanelListener() {
            @Override
            public void tableRefreshed() {
            }
        });

        // Adding the nested table listener to ensure that purchase order is
        // saved before adding
        // items to it.
        addNestedFormListener(itemsTablePanel);

        tableHolderPanel1.add(itemsTablePanel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameField = new com.cosmos.swingb.JBTextField();
        jBLabel1 = new com.cosmos.swingb.JBLabel();
        LabelActiveFrom = new com.cosmos.swingb.JBLabel();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        entityFormButtonPanel1 = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        forPeriodField = new com.cosmos.swingb.JBCheckBox();
        jBLabel13 = new com.cosmos.swingb.JBLabel();
        activeFromField = new com.cosmos.swingb.JBDatePicker();
        activeFromHours = new com.cosmos.swingb.JBTextField();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        activeFromMinunites = new com.cosmos.swingb.JBTextField();
        jBLabel6 = new com.cosmos.swingb.JBLabel();
        activeToHours = new com.cosmos.swingb.JBTextField();
        jBLabel7 = new com.cosmos.swingb.JBLabel();
        activeToMinutes = new com.cosmos.swingb.JBTextField();
        jBLabel8 = new com.cosmos.swingb.JBLabel();
        minTurnoverField = new com.cosmos.swingb.JBFormattedTextField();
        currencyField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel11 = new com.cosmos.swingb.JBLabel();
        jBLabel9 = new com.cosmos.swingb.JBLabel();
        jBLabel2 = new com.cosmos.swingb.JBLabel();
        activeField = new com.cosmos.swingb.JBCheckBox();
        jBLabel14 = new com.cosmos.swingb.JBLabel();
        activeToField = new com.cosmos.swingb.JBDatePicker();
        jBLabel10 = new com.cosmos.swingb.JBLabel();
        discountField = new com.cosmos.swingb.JBFormattedTextField();
        monthsField = new com.cosmos.swingb.JBTextField();
        tableHolderPanel1 = new com.cosmos.acacia.gui.TableHolderPanel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(PricelistForm.class);
        nameField.setText(resourceMap.getString("nameField.text")); // NOI18N
        nameField.setName("nameField"); // NOI18N

        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        LabelActiveFrom.setText(resourceMap.getString("LabelActiveFrom.text")); // NOI18N
        LabelActiveFrom.setName("LabelActiveFrom"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        entityFormButtonPanel1.setName("entityFormButtonPanel1"); // NOI18N

        forPeriodField.setName("forPeriodField"); // NOI18N

        jBLabel13.setText(resourceMap.getString("jBLabel13.text")); // NOI18N
        jBLabel13.setName("jBLabel13"); // NOI18N

        activeFromField.setName("activeFromField"); // NOI18N

        activeFromHours.setName("activeFromHours"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        activeFromMinunites.setName("activeFromMinunites"); // NOI18N

        jBLabel6.setText(resourceMap.getString("jBLabel6.text")); // NOI18N
        jBLabel6.setName("jBLabel6"); // NOI18N

        activeToHours.setName("activeToHours"); // NOI18N

        jBLabel7.setText(resourceMap.getString("jBLabel7.text")); // NOI18N
        jBLabel7.setName("jBLabel7"); // NOI18N

        activeToMinutes.setName("activeToMinutes"); // NOI18N

        jBLabel8.setText(resourceMap.getString("jBLabel8.text")); // NOI18N
        jBLabel8.setName("jBLabel8"); // NOI18N

        minTurnoverField.setText(resourceMap.getString("minTurnoverField.text")); // NOI18N
        minTurnoverField.setName("minTurnoverField"); // NOI18N

        currencyField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BGN", "EUR", "USD" }));
        currencyField.setName("currencyField"); // NOI18N

        jBLabel11.setText(resourceMap.getString("jBLabel11.text")); // NOI18N
        jBLabel11.setName("jBLabel11"); // NOI18N

        jBLabel9.setText(resourceMap.getString("jBLabel9.text")); // NOI18N
        jBLabel9.setName("jBLabel9"); // NOI18N

        jBLabel2.setText(resourceMap.getString("jBLabel2.text")); // NOI18N
        jBLabel2.setName("jBLabel2"); // NOI18N

        activeField.setName("activeField"); // NOI18N

        jBLabel14.setText(resourceMap.getString("jBLabel14.text")); // NOI18N
        jBLabel14.setName("jBLabel14"); // NOI18N

        activeToField.setName("activeToField"); // NOI18N

        jBLabel10.setText(resourceMap.getString("jBLabel10.text")); // NOI18N
        jBLabel10.setName("jBLabel10"); // NOI18N

        discountField.setName("discountField"); // NOI18N

        monthsField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        monthsField.setText(resourceMap.getString("monthsField.text")); // NOI18N
        monthsField.setName("monthsField"); // NOI18N

        tableHolderPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("tableHolderPanel1.border.title"))); // NOI18N
        tableHolderPanel1.setName("tableHolderPanel1"); // NOI18N

        javax.swing.GroupLayout tableHolderPanel1Layout = new javax.swing.GroupLayout(tableHolderPanel1);
        tableHolderPanel1.setLayout(tableHolderPanel1Layout);
        tableHolderPanel1Layout.setHorizontalGroup(
            tableHolderPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
        );
        tableHolderPanel1Layout.setVerticalGroup(
            tableHolderPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tableHolderPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(LabelActiveFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jBLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jBLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jBLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(forPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeFromField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeFromHours, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeFromMinunites, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(activeToField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeToHours, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeToMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(minTurnoverField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthsField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(discountField, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                            .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(forPeriodField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(activeFromHours, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(activeFromMinunites, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabelActiveFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(activeFromField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(activeToHours, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(activeToMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jBLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(activeToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minTurnoverField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(activeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableHolderPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entityFormButtonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel LabelActiveFrom;
    private com.cosmos.swingb.JBCheckBox activeField;
    private com.cosmos.swingb.JBDatePicker activeFromField;
    private com.cosmos.swingb.JBTextField activeFromHours;
    private com.cosmos.swingb.JBTextField activeFromMinunites;
    private com.cosmos.swingb.JBDatePicker activeToField;
    private com.cosmos.swingb.JBTextField activeToHours;
    private com.cosmos.swingb.JBTextField activeToMinutes;
    private com.cosmos.acacia.gui.AcaciaComboBox currencyField;
    private com.cosmos.swingb.JBFormattedTextField discountField;
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel1;
    private com.cosmos.swingb.JBCheckBox forPeriodField;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel10;
    private com.cosmos.swingb.JBLabel jBLabel11;
    private com.cosmos.swingb.JBLabel jBLabel13;
    private com.cosmos.swingb.JBLabel jBLabel14;
    private com.cosmos.swingb.JBLabel jBLabel2;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBLabel jBLabel6;
    private com.cosmos.swingb.JBLabel jBLabel7;
    private com.cosmos.swingb.JBLabel jBLabel8;
    private com.cosmos.swingb.JBLabel jBLabel9;
    private com.cosmos.swingb.JBFormattedTextField minTurnoverField;
    private com.cosmos.swingb.JBTextField monthsField;
    private com.cosmos.swingb.JBTextField nameField;
    private com.cosmos.acacia.gui.TableHolderPanel tableHolderPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public BindingGroup getBindingGroup() {
        return bindGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel1;
    }

    @Override
    public Object getEntity() {
        return entity;
    }

    @SuppressWarnings("deprecation")
    @Override
    public void performSave(boolean closeAfter) {
        if ( entity.getActiveFrom()!=null ){
            entity.getActiveFrom().setHours(activeFromHoursValue==null?0:activeFromHoursValue);
            entity.getActiveFrom().setMinutes(activeFromMinutesValue==null?0:activeFromMinutesValue);
        }
        if ( entity.getActiveTo()!=null ){
            entity.getActiveTo().setHours(activeToHoursValue==null?0:activeToHoursValue);
            entity.getActiveTo().setMinutes(activeToMinutesValue==null?0:activeToMinutesValue);
        }
        if ( entity.getMinTurnover()==null ){
            entity.setCurrency(null);
            entity.setMonths(null);
        }
        
        entity = formSession.savePricelist(entity);
        itemsTablePanel.setPricelist(entity);
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(entity);
        if (closeAfter) {
            close();
        } else {
            bindGroup.unbind();
            initData();
        }
    }

    @Override
    protected void initData() {
        
        if (entProps == null)
            entProps = getFormSession().getDetailEntityProperties();

        if (bindGroup == null)
            bindGroup = new BindingGroup();

        bindComponents(bindGroup, entProps);
    }
    
    /**
     * Binds all components to the specified group and entity properties.
     * The group shouldn't be yet bound, or should be 'unbound'.
     * After all components are bound, some additional calculation and initialization is performed.
     */
    @SuppressWarnings("deprecation")
    protected void bindComponents(BindingGroup bindGroup, EntityProperties entProps) {
        if ( entity.getActiveFrom()!=null ){
            activeFromHoursValue = entity.getActiveFrom().getHours();
            activeFromMinutesValue = entity.getActiveFrom().getMinutes();
        }
        if ( entity.getActiveTo()!=null ){
            activeToHoursValue = entity.getActiveTo().getHours();
            activeToMinutesValue = entity.getActiveTo().getMinutes();
        }

        // name 
        nameField.bind(bindGroup, entity, entProps.getPropertyDetails("name"));
        
        // for period
        forPeriodField.bind(bindGroup, entity, entProps.getPropertyDetails("forPeriod"));
        forPeriodField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onForPeriodAction();
            }
        });
        
        // active from
        activeFromField.bind(bindGroup, entity, entProps.getPropertyDetails("activeFrom"));
        
        // active from hours
        activeFromHours.bind(bindGroup, this, createHoursPropertyDetails("activeFromHoursValue"));
        
        // active from minutes
        activeFromMinunites.bind(bindGroup, this, createMinutesPropertyDetails("activeFromMinutesValue"));
        
        // active to
        activeToField.bind(bindGroup, entity, entProps.getPropertyDetails("activeTo"));
        
        // active to hours
        activeToHours.bind(bindGroup, this, createHoursPropertyDetails("activeToHoursValue"));
        
        // active to minutes
        activeToMinutes.bind(bindGroup, this, createMinutesPropertyDetails("activeToMinutesValue"));

        // minimum turnover
        minTurnoverField.bind(bindGroup, entity, entProps.getPropertyDetails("minTurnover"), getDecimalFormat());
        
        // currency
        currencyField.bind(bindGroup, enumResourceRemote.getEnumResources(Currency.class), 
            entity, entProps.getPropertyDetails("currency"));
        
        // months
        monthsField.bind(bindGroup, entity, entProps.getPropertyDetails("months"));
        
        // default discount
        discountField.bind(bindGroup, entity, entProps.getPropertyDetails("defaultDiscount"), getDecimalFormat());
        
        // active
        activeField.bind(bindGroup, entity, entProps.getPropertyDetails("active"));
        
        bindGroup.bind();
        
        //do between-components updates
        onForPeriodAction();
    }

    private PropertyDetails createHoursPropertyDetails(String propertyName) {
        PropertyDetails pd =  new PropertyDetails(propertyName, "Hours", Integer.class.getName());
        NumericRangeValidator validator = new NumericRangeValidator();
        validator.setMinValue(0);
        validator.setMaxValue(23);
        pd.setValidator(validator);
        return pd;
    }
    
    private PropertyDetails createMinutesPropertyDetails(String propertyName) {
        PropertyDetails pd =  new PropertyDetails(propertyName, "Minutes", Integer.class.getName());
        NumericRangeValidator validator = new NumericRangeValidator();
        validator.setMinValue(0);
        validator.setMaxValue(59);
        pd.setValidator(validator);
        return pd;
    }

    protected void onForPeriodAction() {
        boolean checked = forPeriodField.isSelected();
        activeFromField.setEnabled(checked);
        activeFromHours.setEnabled(checked);
        activeFromMinunites.setEnabled(checked);
        activeToField.setEnabled(checked);
        activeToHours.setEnabled(checked);
        activeToMinutes.setEnabled(checked);
        
        if ( !checked ){
            activeFromHours.setText("");
            activeFromMinunites.setText("");
            activeFromField.setDate(null);
            activeToHours.setText("");
            activeToMinutes.setText("");
            activeToField.setDate(null);
        }
    }

    @Override
    public void setReadonly() {
        super.setReadonly();
    }

    public PricelistRemote getFormSession() {
        return formSession;
    }

    public Integer getActiveToHoursValue() {
        return activeToHoursValue;
    }

    public void setActiveToHoursValue(Integer activeToHoursValue) {
        this.activeToHoursValue = activeToHoursValue;
    }

    public Integer getActiveFromHoursValue() {
        return activeFromHoursValue;
    }

    public void setActiveFromHoursValue(Integer activeFromHoursValue) {
        this.activeFromHoursValue = activeFromHoursValue;
    }

    public Integer getActiveFromMinutesValue() {
        return activeFromMinutesValue;
    }

    public void setActiveFromMinutesValue(Integer activeFromMinutesValue) {
        this.activeFromMinutesValue = activeFromMinutesValue;
    }

    public Integer getActiveToMinutesValue() {
        return activeToMinutesValue;
    }

    public void setActiveToMinutesValue(Integer activeToMinutesValue) {
        this.activeToMinutesValue = activeToMinutesValue;
    }
}
