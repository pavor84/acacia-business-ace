/*
 * ComplexProductPanel.java
 *
 * Created on Неделя, 2008, Октомври 12, 23:47
 */

package com.cosmos.acacia.crm.gui.assembling;

import com.cosmos.acacia.crm.gui.ProductItemTreeTableNode;
import com.cosmos.acacia.crm.bl.assembling.AssemblingRemote;
import com.cosmos.acacia.crm.data.product.ComplexProduct;
import com.cosmos.acacia.crm.data.product.Product;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.swingb.JBTreeTable;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.ejb.EJB;
import javax.swing.DefaultComboBoxModel;
import org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode;
import org.jdesktop.swingx.treetable.DefaultTreeTableModel;
import org.jdesktop.swingx.treetable.TreeTableNode;

/**
 *
 * @author  Miro
 */
public class ComplexProductPanel
    extends AcaciaPanel
{
    @EJB
    private AssemblingRemote formSession;

    /** Creates new form ComplexProductPanel */
    public ComplexProductPanel() {
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        complexProductLabel = new com.cosmos.swingb.JBLabel();
        complexProductComboBox = new com.cosmos.swingb.JBComboBox();
        productsScrollPane = new javax.swing.JScrollPane();
        productsTreeTable = new JBTreeTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(ComplexProductPanel.class);
        complexProductLabel.setText(resourceMap.getString("complexProductLabel.text")); // NOI18N
        complexProductLabel.setName("complexProductLabel"); // NOI18N

        complexProductComboBox.setName("complexProductComboBox"); // NOI18N

        productsScrollPane.setName("productsScrollPane"); // NOI18N

        productsTreeTable.setName("productsTreeTable"); // NOI18N
        productsScrollPane.setViewportView(productsTreeTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(productsScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(complexProductLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(complexProductComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(complexProductLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(complexProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBComboBox complexProductComboBox;
    private com.cosmos.swingb.JBLabel complexProductLabel;
    private javax.swing.JScrollPane productsScrollPane;
    private org.jdesktop.swingx.JXTreeTable productsTreeTable;
    // End of variables declaration//GEN-END:variables


    private DefaultMutableTreeTableNode emptyNode =
        new DefaultMutableTreeTableNode();

    @Override
    protected void initData()
    {
        complexProductComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent event)
            {
                DefaultTreeTableModel treeTableModel =
                    (DefaultTreeTableModel)productsTreeTable.getTreeTableModel();
                TreeTableNode rootNode;
                ComplexProduct product =
                    (ComplexProduct)complexProductComboBox.getSelectedItem();
                if(product == null)
                {
                    rootNode = emptyNode;
                }
                else
                {
                    rootNode = new ProductItemTreeTableNode(product, getFormSession());
                }

                treeTableModel.setRoot(rootNode);
            }
        }, true);

        DefaultComboBoxModel comboBoxModel = 
            (DefaultComboBoxModel)complexProductComboBox.getModel();
        for(ComplexProduct product : getComplexProducts())
        {
            comboBoxModel.addElement(product);
        }

    }

    private List<ComplexProduct> getComplexProducts()
    {
        int size;
        List<Product> products = 
            getFormSession().getChildProducts(null);
        if((products = getFormSession().getChildProducts(null)) != null &&
            (size = products.size()) > 0)
        {
            List<ComplexProduct> complexProducts = new ArrayList<ComplexProduct>(size);
            for(Product product : products)
            {
                if(product instanceof ComplexProduct)
                    complexProducts.add((ComplexProduct)product);
            }

            return complexProducts;
        }

        return Collections.emptyList();
    }

    protected AssemblingRemote getFormSession()
    {
        if(formSession == null)
        {
            formSession = getBean(AssemblingRemote.class);
        }

        return formSession;
    }
}
