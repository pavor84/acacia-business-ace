package com.cosmos.acacia.crm.gui;

import java.awt.Component;
import javax.ejb.EJB;
import javax.naming.InitialContext;

import javax.swing.JList;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.BindingGroup;

import com.cosmos.acacia.crm.bl.impl.ClassifiersRemote;
import com.cosmos.acacia.crm.data.Classifier;
import com.cosmos.acacia.crm.data.ClassifierGroup;
import com.cosmos.acacia.crm.data.DataObject;
import com.cosmos.acacia.crm.data.DataObjectType;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.swingb.DialogResponse;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class ClassifierPanel extends BaseEntityPanel {

    protected static Logger log = Logger.getLogger(ClassifierPanel.class);

    /** Creates new form ContactPersonPanel */
    public ClassifierPanel(Classifier classifier) {
        super(classifier.getDataObject().getParentDataObject());
        this.classifier = classifier;
        init();
    }

    /** Creates new form ContactPersonPanel */
    public ClassifierPanel(DataObject parentDataObject) {
        super(parentDataObject);
        init();
    }

    @Override
    protected void init()
    {
        initComponents();
        super.init();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityFormButtonPanel = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        codeTextField = new com.cosmos.swingb.JBTextField();
        nameTextField = new com.cosmos.swingb.JBTextField();
        descriptionPanel3 = new com.cosmos.swingb.JBPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        descriptionTextPane3 = new com.cosmos.swingb.JBTextPane();
        codeLabel = new com.cosmos.swingb.JBLabel();
        nameLabel = new com.cosmos.swingb.JBLabel();
        groupComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        groupLabel = new com.cosmos.swingb.JBLabel();
        dataObjectTypesPanel = new com.cosmos.acacia.gui.TableHolderPanel();
        dataObjectTypeComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBButton1 = new com.cosmos.swingb.JBButton();

        entityFormButtonPanel.setName("entityFormButtonPanel"); // NOI18N

        codeTextField.setName("codeTextField"); // NOI18N

        nameTextField.setName("nameTextField"); // NOI18N
        nameTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                nameTextFieldAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        descriptionPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        descriptionPanel3.setName("descriptionPanel3"); // NOI18N

        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane6.setName("jScrollPane6"); // NOI18N

        descriptionTextPane3.setName("descriptionTextPane3"); // NOI18N
        jScrollPane6.setViewportView(descriptionTextPane3);

        javax.swing.GroupLayout descriptionPanel3Layout = new javax.swing.GroupLayout(descriptionPanel3);
        descriptionPanel3.setLayout(descriptionPanel3Layout);
        descriptionPanel3Layout.setHorizontalGroup(
            descriptionPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
        );
        descriptionPanel3Layout.setVerticalGroup(
            descriptionPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(ClassifierPanel.class);
        codeLabel.setText(resourceMap.getString("codeLabel.text")); // NOI18N
        codeLabel.setName("codeLabel"); // NOI18N

        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        groupComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        groupComboBox.setName("groupComboBox"); // NOI18N

        groupLabel.setText(resourceMap.getString("groupLabel.text")); // NOI18N
        groupLabel.setName("groupLabel"); // NOI18N

        dataObjectTypesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("dataObjectTypesPanel.border.title"))); // NOI18N
        dataObjectTypesPanel.setName("dataObjectTypesPanel"); // NOI18N

        javax.swing.GroupLayout dataObjectTypesPanelLayout = new javax.swing.GroupLayout(dataObjectTypesPanel);
        dataObjectTypesPanel.setLayout(dataObjectTypesPanelLayout);
        dataObjectTypesPanelLayout.setHorizontalGroup(
            dataObjectTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );
        dataObjectTypesPanelLayout.setVerticalGroup(
            dataObjectTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 159, Short.MAX_VALUE)
        );

        dataObjectTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dataObjectTypeComboBox.setName("dataObjectTypeComboBox"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(ClassifierPanel.class, this);
        jBButton1.setAction(actionMap.get("addConstraintAction")); // NOI18N
        jBButton1.setName("jBButton1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                    .addComponent(descriptionPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(codeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(groupLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groupComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))))
                    .addComponent(dataObjectTypesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dataObjectTypeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(groupLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataObjectTypesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataObjectTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(descriptionPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_nameTextFieldAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel codeLabel;
    private com.cosmos.swingb.JBTextField codeTextField;
    private com.cosmos.acacia.gui.AcaciaComboBox dataObjectTypeComboBox;
    private com.cosmos.acacia.gui.TableHolderPanel dataObjectTypesPanel;
    private com.cosmos.swingb.JBPanel descriptionPanel3;
    private com.cosmos.swingb.JBTextPane descriptionTextPane3;
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel;
    private com.cosmos.acacia.gui.AcaciaComboBox groupComboBox;
    private com.cosmos.swingb.JBLabel groupLabel;
    private com.cosmos.swingb.JBButton jBButton1;
    private javax.swing.JScrollPane jScrollPane6;
    private com.cosmos.swingb.JBLabel nameLabel;
    private com.cosmos.swingb.JBTextField nameTextField;
    // End of variables declaration//GEN-END:variables

    @EJB
    private ClassifiersRemote formSession;

    private EntityProperties entityProps;

    private BindingGroup classifierBindingGroup;
    private Classifier classifier;
    private DataObjectTypesListPanel dataObjectTypesTable;
    
    @Override
    protected void initData() {
        setResizable(false);

        log.info("initData().classifier: " + classifier);
        if(classifier == null)
        {
            classifier = getFormSession().newClassifier();
        }

        classifierBindingGroup = new BindingGroup();

        entityProps = getClassifierEntityProperties();

        codeTextField.bind(classifierBindingGroup, classifier, entityProps.getPropertyDetails("classifierCode"));
        nameTextField.bind(classifierBindingGroup, classifier, entityProps.getPropertyDetails("classifierName"));
        groupComboBox.bind(classifierBindingGroup, getClassifierGroups(), classifier, entityProps.getPropertyDetails("classifierGroup"));
        
        populateComboBox(dataObjectTypeComboBox, getDataObjectTypes());
        
        dataObjectTypesTable = new DataObjectTypesListPanel(null, classifier);
        dataObjectTypesTable.setVisibleButtons(8 + 16);
        dataObjectTypesPanel.add(dataObjectTypesTable);
        addNestedFormListener(dataObjectTypesTable);

        
        classifierBindingGroup.bind();
    }


    protected List<ClassifierGroup> getClassifierGroups() {
        return getFormSession().getClassifierGroups();
    }
    
    protected List<DataObjectType> getDataObjectTypes() {
        return getFormSession().getDataObjectTypes();
    }

    public void populateComboBox(JComboBox combo, List<DataObjectType> data) {
        
        combo.setModel(new DefaultComboBoxModel(data.toArray()));
        
        AcaciaToStringConverter resourceToStringConverter = new AcaciaToStringConverter("${dataObjectType}");
        AutoCompleteDecorator.decorate(combo, resourceToStringConverter);

        combo.setRenderer(new DataObjectTypeCellRenderer());
        
    }
    
    protected ClassifiersRemote getFormSession()
    {
        if(formSession == null)
        {
            try
            {
                formSession = InitialContext.doLookup(ClassifiersRemote.class.getName());
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }

        return formSession;
    }

    @Action
    @Override
    public void closeAction() {
        setDialogResponse(DialogResponse.CLOSE);
        close();
    }

    protected EntityProperties getClassifierEntityProperties()
    {
        return getFormSession().getClassifierEntityProperties();
    }


    @Override
    public BindingGroup getBindingGroup() {
        return classifierBindingGroup;
    }

    @Override
    public void performSave(boolean closeAfter) {
        log.info("Save: classifier: " + classifier);
        classifier = getFormSession().saveClassifier(
                classifier,
                classifier.getClassifierGroup().getDataObject());
        
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(classifier);
        if (closeAfter)
            close();
    }

    @Override
    public Object getEntity() {
        return classifier;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel;
    }

    @Action
    public void addConstraintAction() {
        if (dataObjectTypesTable.canNestedOperationProceed()) {
            getFormSession().addDataObjectTypeConstraint(classifier, (DataObjectType) dataObjectTypeComboBox.getSelectedItem());
            dataObjectTypesTable.refreshAction();
        }
    }
}

class DataObjectTypeCellRenderer extends DefaultListCellRenderer {
    @Override
    public Component getListCellRendererComponent(JList list,
            Object value, int index, boolean isSelected, boolean cellHasFocus)
    {
        return super.getListCellRendererComponent(list, ((DataObjectType) value).getDataObjectType(), 
                index, isSelected, cellHasFocus);
    }   
}
