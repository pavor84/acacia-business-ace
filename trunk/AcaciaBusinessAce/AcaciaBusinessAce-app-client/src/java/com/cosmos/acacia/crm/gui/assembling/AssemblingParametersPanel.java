/*
 * AssemblingParametersPanel.java
 *
 * Created on 10 August 2008, 22:03
 */

package com.cosmos.acacia.crm.gui.assembling;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.jdesktop.application.Action;

import com.cosmos.acacia.crm.assembling.AlgorithmException;
import com.cosmos.acacia.crm.assembling.ProductAssembler;
import com.cosmos.acacia.crm.bl.assembling.AssemblingRemote;
import com.cosmos.acacia.crm.bl.impl.EntityManagerFacadeRemote;
import com.cosmos.acacia.crm.data.ComplexProduct;
import com.cosmos.acacia.crm.data.assembling.AssemblingSchema;
import com.cosmos.acacia.crm.data.assembling.AssemblingSchemaItem;
import com.cosmos.acacia.crm.validation.ValidationException;
import com.cosmos.acacia.gui.AcaciaPanel;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class AssemblingParametersPanel extends AcaciaPanel {

    /** Creates new form AssemblingParametersPanel */
    public AssemblingParametersPanel(AssemblingSchema schema) {
        super((BigInteger) null);
        this.schema = schema;
        this.items = getFormSession().getAssemblingSchemaItems(schema);
        initComponents();
        initData();
        this.schemaLabel.setText(schema.getSchemaCode() + ": " + schema.getSchemaName());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        parametersTable = new com.cosmos.swingb.JBTable();
        assembleButton = new com.cosmos.swingb.JBButton();
        schemaLabel = new com.cosmos.swingb.JBLabel();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        parametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        parametersTable.setName("parametersTable"); // NOI18N
        jScrollPane1.setViewportView(parametersTable);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(AssemblingParametersPanel.class, this);
        assembleButton.setAction(actionMap.get("assemble")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(AssemblingParametersPanel.class);
        assembleButton.setText(resourceMap.getString("assembleButton.text")); // NOI18N
        assembleButton.setName("assembleButton"); // NOI18N

        schemaLabel.setText(resourceMap.getString("schemaLabel.text")); // NOI18N
        schemaLabel.setName("schemaLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assembleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(schemaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schemaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assembleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton assembleButton;
    private javax.swing.JScrollPane jScrollPane1;
    private com.cosmos.swingb.JBTable parametersTable;
    private com.cosmos.swingb.JBLabel schemaLabel;
    // End of variables declaration//GEN-END:variables

    private List<AssemblingSchemaItem> items;
    private AssemblingSchema schema;

    private AssemblingRemote formSession;

    @Override
    protected void initData() {
        DefaultTableModel model = (DefaultTableModel) parametersTable.getModel();

        for (AssemblingSchemaItem item : items) {
            Object[] data = new Object[2];
            data[0] = item.getMessageCode() + ": " + item.getMessageText();
            data[1] = item.getDefaultValue();
            model.addRow(data);
        }
        parametersTable.setEditable(true);
    }

    @Action
    public void assemble() {
        // Setting AssemblingSchemaItem, Object - will convert later
        Map<AssemblingSchemaItem, Object> params =
            new HashMap<AssemblingSchemaItem, Object>();

        TableModel model = parametersTable.getModel();
        for (int i = 0; i < items.size(); i ++) {
            params.put(items.get(i), model.getValueAt(i, 1));
        }
        ProductAssembler assembler =
            new ProductAssembler(schema);

        try {
            ComplexProduct product = assembler.assemble(params);
            log.info("Product: " + product);
        } catch (AlgorithmException ex) {
            log.info("EXC: " + ex.getMessage());
            ValidationException vex = new ValidationException();
            vex.addMessage(ex.getMessage());
            throw vex;
        }
    }


    protected AssemblingRemote getFormSession() {
        if (formSession == null)
            formSession = getBean(AssemblingRemote.class);

        return formSession;
    }
}
