/*
 * OrderConfirmationForm3.java
 *
 * Created on Понеделник, 2008, Юли 21, 16:28
 */

package com.cosmos.acacia.crm.gui.purchaseorders;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;

import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;

import com.cosmos.acacia.crm.bl.purchaseorder.OrderConfirmationListRemote;
import com.cosmos.acacia.crm.data.BusinessPartner;
import com.cosmos.acacia.crm.data.Classifier;
import com.cosmos.acacia.crm.data.ContactPerson;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.OrderConfirmation;
import com.cosmos.acacia.crm.data.OrderConfirmationItem;
import com.cosmos.acacia.crm.enums.OrderConfirmationType;
import com.cosmos.acacia.crm.gui.contactbook.BusinessPartnersListPanel;
import com.cosmos.acacia.gui.AbstractTablePanel;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.listeners.TableModificationListener;

/**
 * 
 * Created	:	22.07.2008
 * @author	Petar Milev
 *
 */
public class OrderConfirmationForm extends BaseEntityPanel {
    
    protected static Logger log = Logger.getLogger(OrderConfirmationForm.class);

    private OrderConfirmation entity;
    
    private EntityProperties entProps;

    private BindingGroup bindGroup;
    
    private OrderConfirmationListRemote formSession = getBean(OrderConfirmationListRemote.class);

    /** Creates new form OrderConfirmationFormDraft */
    public OrderConfirmationForm(OrderConfirmation confirmation) {
        super(confirmation.getParentId());
        this.entity = confirmation;
        initialize();
    }
    
    private void initialize() {
        initComponents();
        initComponentsCustom();
        init();
    }

    private void initComponentsCustom() {
        // Using an AbstractTablePanel implementation
        itemsTablePanel = new OrderConfirmationItemListPanel(entity.getOrderConfirmationId());
        itemsTablePanel.setVisible(AbstractTablePanel.Button.NewModifyDelete);
        itemsTablePanel.getButtonsMap().get(AbstractTablePanel.Button.Special).
            addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    onMatchButton();
                }
            });
        if ( entity.getId()!=null ){
            showMatchButton();
        }
        
        itemsTablePanel.addTableModificationListener(new TableModificationListener() {
            @Override
            public void rowModified(Object row) {
                onItemsTableChange();
            }
        
            @Override
            public void rowDeleted(Object row) {
                onItemsTableChange();
            }
        
            @Override
            public void rowAdded(Object row) {
                onItemsTableChange();
            }
        });
        
        // Adding the nested table listener to ensure that purchase order is saved before adding
        //items to it. 
        addNestedFormListener(itemsTablePanel);

        tableHolderPanel1.add(itemsTablePanel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBPanel1 = new com.cosmos.swingb.JBPanel();
        branchField = new com.cosmos.swingb.JBTextField();
        jBLabel1 = new com.cosmos.swingb.JBLabel();
        documentNumberField = new com.cosmos.swingb.JBTextField();
        jBLabel2 = new com.cosmos.swingb.JBLabel();
        documentDateField = new com.cosmos.swingb.JBDatePicker();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        supplierField = new com.cosmos.acacia.gui.AcaciaComboList();
        jBLabel4 = new com.cosmos.swingb.JBLabel();
        supplierContactField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        documentTypeField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel13 = new com.cosmos.swingb.JBLabel();
        jBPanel2 = new com.cosmos.swingb.JBPanel();
        currencyField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel6 = new com.cosmos.swingb.JBLabel();
        invoiceSubValueField = new com.cosmos.swingb.JBTextField();
        jBLabel7 = new com.cosmos.swingb.JBLabel();
        jBLabel8 = new com.cosmos.swingb.JBLabel();
        vatPercentField = new com.cosmos.swingb.JBTextField();
        discountAmountField = new com.cosmos.swingb.JBTextField();
        jBLabel9 = new com.cosmos.swingb.JBLabel();
        jBLabel10 = new com.cosmos.swingb.JBLabel();
        discountPercentField = new com.cosmos.swingb.JBTextField();
        jBLabel11 = new com.cosmos.swingb.JBLabel();
        transportPriceField = new com.cosmos.swingb.JBTextField();
        jBLabel12 = new com.cosmos.swingb.JBLabel();
        totalValueField = new com.cosmos.swingb.JBTextField();
        sumItemsButton = new com.cosmos.swingb.JBButton();
        tableHolderPanel1 = new com.cosmos.acacia.gui.TableHolderPanel();
        jBPanel3 = new com.cosmos.swingb.JBPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesField = new com.cosmos.swingb.JBTextPane();
        formButtonPanel = new com.cosmos.acacia.gui.EntityFormButtonPanel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(OrderConfirmationForm.class);
        jBPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jBPanel1.border.title"))); // NOI18N
        jBPanel1.setName("jBPanel1"); // NOI18N

        branchField.setEditable(false);
        branchField.setText(resourceMap.getString("branchField.text")); // NOI18N
        branchField.setName("branchField"); // NOI18N

        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        documentNumberField.setName("documentNumberField"); // NOI18N

        jBLabel2.setText(resourceMap.getString("jBLabel2.text")); // NOI18N
        jBLabel2.setName("jBLabel2"); // NOI18N

        documentDateField.setName("documentDateField"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        supplierField.setName("supplierField"); // NOI18N

        jBLabel4.setText(resourceMap.getString("jBLabel4.text")); // NOI18N
        jBLabel4.setName("jBLabel4"); // NOI18N

        supplierContactField.setName("supplierContactField"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        documentTypeField.setName("documentTypeField"); // NOI18N

        jBLabel13.setText(resourceMap.getString("jBLabel13.text")); // NOI18N
        jBLabel13.setName("jBLabel13"); // NOI18N

        javax.swing.GroupLayout jBPanel1Layout = new javax.swing.GroupLayout(jBPanel1);
        jBPanel1.setLayout(jBPanel1Layout);
        jBPanel1Layout.setHorizontalGroup(
            jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(branchField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jBLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(documentDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .addComponent(documentNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))))
                .addGap(14, 14, 14)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jBLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jBLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(documentTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierContactField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jBPanel1Layout.setVerticalGroup(
            jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel1Layout.createSequentialGroup()
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(branchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(documentNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(documentDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(supplierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(supplierContactField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(documentTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jBPanel2.border.title"))); // NOI18N
        jBPanel2.setName("jBPanel2"); // NOI18N

        currencyField.setName("currencyField"); // NOI18N

        jBLabel6.setText(resourceMap.getString("jBLabel6.text")); // NOI18N
        jBLabel6.setName("jBLabel6"); // NOI18N

        invoiceSubValueField.setName("invoiceSubValueField"); // NOI18N

        jBLabel7.setText(resourceMap.getString("jBLabel7.text")); // NOI18N
        jBLabel7.setName("jBLabel7"); // NOI18N

        jBLabel8.setText(resourceMap.getString("jBLabel8.text")); // NOI18N
        jBLabel8.setName("jBLabel8"); // NOI18N

        vatPercentField.setName("vatPercentField"); // NOI18N

        discountAmountField.setName("discountAmountField"); // NOI18N

        jBLabel9.setText(resourceMap.getString("jBLabel9.text")); // NOI18N
        jBLabel9.setName("jBLabel9"); // NOI18N

        jBLabel10.setText(resourceMap.getString("jBLabel10.text")); // NOI18N
        jBLabel10.setName("jBLabel10"); // NOI18N

        discountPercentField.setName("discountPercentField"); // NOI18N

        jBLabel11.setText(resourceMap.getString("jBLabel11.text")); // NOI18N
        jBLabel11.setName("jBLabel11"); // NOI18N

        transportPriceField.setName("transportPriceField"); // NOI18N

        jBLabel12.setText(resourceMap.getString("jBLabel12.text")); // NOI18N
        jBLabel12.setFont(resourceMap.getFont("jBLabel12.font")); // NOI18N
        jBLabel12.setName("jBLabel12"); // NOI18N

        totalValueField.setName("totalValueField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(OrderConfirmationForm.class, this);
        sumItemsButton.setAction(actionMap.get("calculateSumFromItemsAction")); // NOI18N
        sumItemsButton.setMnemonic('S');
        sumItemsButton.setText(resourceMap.getString("sumItemsButton.text")); // NOI18N
        sumItemsButton.setName("sumItemsButton"); // NOI18N

        javax.swing.GroupLayout jBPanel2Layout = new javax.swing.GroupLayout(jBPanel2);
        jBPanel2.setLayout(jBPanel2Layout);
        jBPanel2Layout.setHorizontalGroup(
            jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(jBLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(jBLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(vatPercentField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addComponent(invoiceSubValueField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sumItemsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jBLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jBLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(discountPercentField, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(discountAmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(transportPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(totalValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );
        jBPanel2Layout.setVerticalGroup(
            jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel2Layout.createSequentialGroup()
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discountAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoiceSubValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vatPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountPercentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transportPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumItemsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableHolderPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("tableHolderPanel1.border.title"))); // NOI18N
        tableHolderPanel1.setName("tableHolderPanel1"); // NOI18N

        javax.swing.GroupLayout tableHolderPanel1Layout = new javax.swing.GroupLayout(tableHolderPanel1);
        tableHolderPanel1.setLayout(tableHolderPanel1Layout);
        tableHolderPanel1Layout.setHorizontalGroup(
            tableHolderPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 905, Short.MAX_VALUE)
        );
        tableHolderPanel1Layout.setVerticalGroup(
            tableHolderPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        jBPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jBPanel3.border.title"))); // NOI18N
        jBPanel3.setName("jBPanel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        notesField.setName("notesField"); // NOI18N
        jScrollPane1.setViewportView(notesField);

        javax.swing.GroupLayout jBPanel3Layout = new javax.swing.GroupLayout(jBPanel3);
        jBPanel3.setLayout(jBPanel3Layout);
        jBPanel3Layout.setHorizontalGroup(
            jBPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                .addContainerGap())
        );
        jBPanel3Layout.setVerticalGroup(
            jBPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        formButtonPanel.setName("formButtonPanel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableHolderPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableHolderPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBTextField branchField;
    private com.cosmos.acacia.gui.AcaciaComboBox currencyField;
    private com.cosmos.swingb.JBTextField discountAmountField;
    private com.cosmos.swingb.JBTextField discountPercentField;
    private com.cosmos.swingb.JBDatePicker documentDateField;
    private com.cosmos.swingb.JBTextField documentNumberField;
    private com.cosmos.acacia.gui.AcaciaComboBox documentTypeField;
    private com.cosmos.acacia.gui.EntityFormButtonPanel formButtonPanel;
    private com.cosmos.swingb.JBTextField invoiceSubValueField;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel10;
    private com.cosmos.swingb.JBLabel jBLabel11;
    private com.cosmos.swingb.JBLabel jBLabel12;
    private com.cosmos.swingb.JBLabel jBLabel13;
    private com.cosmos.swingb.JBLabel jBLabel2;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.swingb.JBLabel jBLabel4;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBLabel jBLabel6;
    private com.cosmos.swingb.JBLabel jBLabel7;
    private com.cosmos.swingb.JBLabel jBLabel8;
    private com.cosmos.swingb.JBLabel jBLabel9;
    private com.cosmos.swingb.JBPanel jBPanel1;
    private com.cosmos.swingb.JBPanel jBPanel2;
    private com.cosmos.swingb.JBPanel jBPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private com.cosmos.swingb.JBTextPane notesField;
    private com.cosmos.swingb.JBButton sumItemsButton;
    private com.cosmos.acacia.gui.AcaciaComboBox supplierContactField;
    private com.cosmos.acacia.gui.AcaciaComboList supplierField;
    private com.cosmos.acacia.gui.TableHolderPanel tableHolderPanel1;
    private com.cosmos.swingb.JBTextField totalValueField;
    private com.cosmos.swingb.JBTextField transportPriceField;
    private com.cosmos.swingb.JBTextField vatPercentField;
    // End of variables declaration//GEN-END:variables
    
    @SuppressWarnings("unchecked")
    JComboBoxBinding supplierContactBinding;

    private OrderConfirmationItemListPanel itemsTablePanel;
    
    @Override
    public BindingGroup getBindingGroup() {
        return bindGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return formButtonPanel;
    }

    @Override
    public Object getEntity() {
        return entity;
    }

    @SuppressWarnings("unchecked")
    @Override
    public void performSave(boolean closeAfter) {
        updateSupplierNames();
        
        entity = getFormSession().saveOrderConfirmation(entity);
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(entity);
        if (closeAfter)
            close();
        else{
            bindGroup.unbind();
            for (Binding binding : bindGroup.getBindings()) {
                bindGroup.removeBinding(binding);
            }
            initData();
            getButtonPanel().setSaveActionState(this);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void initData() {
        if ( entProps==null )
            entProps = getFormSession().getDetailEntityProperties();
        
        if ( bindGroup==null )
            bindGroup = new BindingGroup();
        
        //branch
        //branchField.bind(bindGroup, entity, entProps.getPropertyDetails("branch"));
        if ( entity.getBranch()!=null )
            branchField.setText(entity.getBranch().getAddressName());
        
        //document number
        documentNumberField.bind(bindGroup, entity, entProps.getPropertyDetails("documentNumber"));
        
        //doc date
        documentDateField.bind(bindGroup, entity, entProps.getPropertyDetails("documentDate"));
        
        //clear explicitly any items
        supplierContactField.setModel(new DefaultComboBoxModel());
        
        //supplier
        Classifier supplierClassifier = getClassifiersFormSession().getClassifier("provider");
        BusinessPartnersListPanel listPanel = new BusinessPartnersListPanel(getParentDataObjectId(), supplierClassifier);
        supplierField.bind(
            bindGroup,
            listPanel,
            entity,
            entProps.getPropertyDetails("supplier"),
            "${displayName}",
            UpdateStrategy.READ_WRITE);
        supplierField.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                onSelectSupplier();
            }
        });
        
        //if once saved - the supplier is not changeable
        if ( entity.getId()!=null && entity.getId().compareTo(new BigInteger("0"))>0 ){
            supplierField.setEditable(false);
            supplierField.setEnabled(false);
        }
        
        //supplier contact
        supplierContactBinding = supplierContactField.bind(bindGroup, getSupplierContacts(), 
            entity, entProps.getPropertyDetails("supplierContact"));
        onSelectSupplier();
        
        //doc type
        documentTypeField.bind(bindGroup, getDocumentTypes(), entity, entProps.getPropertyDetails("documentType"));
        documentTypeField.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if ( e.getItem() instanceof DbResource ){
                    onDocumentTypeChanged((DbResource)e.getItem());
                }
            }
        });
        
        //currency
        currencyField.bind(bindGroup, getCurrencies(), entity, entProps.getPropertyDetails("currency"));
        
        //variable for re-use
        Binding amountsBinding = null;
        
        //invoice sub value
        amountsBinding = invoiceSubValueField.bind(bindGroup, entity, entProps.getPropertyDetails("invoiceSubValue"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                userEnteredInvoiceValue = true;
                
                if ( updatingAmounts )
                    return;
                else{
                    updatingAmounts = true;
                    if ( calculatedDiscountIsPercent ){
                        updateDiscountPercent(binding.isContentValid());
                    }else{
                        updateDiscountAmount(binding.isContentValid());
                    }
                    updateTotalAmount(binding.isContentValid());
                    updatingAmounts = false;
                }
            }
        });
        
        //vat 
        amountsBinding = vatPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("vat"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateTotalAmount(binding.isContentValid());
            }
        });
        
        //discount value 
        amountsBinding = discountAmountField.bind(bindGroup, entity, entProps.getPropertyDetails("discountAmount"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( updatingAmounts )
                    return; 
                else{
                    updatingAmounts = true;
                    updateDiscountPercent(binding.isContentValid());
                    updateTotalAmount(binding.isContentValid());
                    updatingAmounts = false;
                }
            }
        });
        
        //discount percent
        amountsBinding = discountPercentField.bind(bindGroup, entity, entProps.getPropertyDetails("discountPercent"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( updatingAmounts )
                    return;
                else{
                    updatingAmounts = true;
                    updateDiscountAmount(binding.isContentValid());
                    updateTotalAmount(binding.isContentValid());
                    updatingAmounts = false;
                }
            }
        });
        
        //transport price
        amountsBinding = transportPriceField.bind(bindGroup, entity, entProps.getPropertyDetails("transportationPrice"));
        amountsBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                updateTotalAmount(binding.isContentValid());
            }
        });
        
        //total value
        totalValueField.bind(bindGroup, entity, entProps.getPropertyDetails("totalValue"));
        totalValueField.setEditable(true);
        
        //notes
        notesField.bind(bindGroup, entity, entProps.getPropertyDetails("notes"));
        
        bindGroup.bind();
    }
    
    protected void onDocumentTypeChanged(DbResource newValue) {
        if ( OrderConfirmationType.SimpleInvoice.equals(newValue.getEnumValue()) ){
            vatPercentField.setText("0");
        }else{
            vatPercentField.setText("20");
        }
    }

    protected void onMatchButton() {
        OrdersMatchingForm panel = new OrdersMatchingForm(getParentDataObjectId());
        panel.setSelectedConfirmation(entity);
        DialogResponse dialogResponse = panel.showDialog(this);
        if ( DialogResponse.SAVE.equals(dialogResponse) ){
            itemsTablePanel.refreshAction();
        }
    }

    private void showMatchButton() {
        itemsTablePanel.setVisible(AbstractTablePanel.Button.Special, true);
        itemsTablePanel.setSpecialButtonBehavior(true);
        itemsTablePanel.setSpecialCaption("button.match");
    }

    protected void onItemsTableChange() {
        showMatchButton();
        if ( !userEnteredInvoiceValue ){
            calculateSumFromItemsAction();
        }
    }

    boolean updatingAmounts = false;
    boolean calculatedDiscountIsPercent = false;
   // boolean autoUpdatingInvoiceSubValue = false;
    boolean userEnteredInvoiceValue = false;

    private List<DbResource> documentTypes;

    private List<DbResource> currencies;
    
    protected void updateDiscountPercent(boolean contentValid) {
        if ( !contentValid ){
            discountPercentField.setText("");
            return;
        }
        if ( "".equals(discountAmountField.getText()) ){
            discountPercentField.setText("");
            return;
        }
        
        try{
            calculatedDiscountIsPercent = true;
            BigDecimal invoiceSubValue = new BigDecimal(invoiceSubValueField.getText());  
            BigDecimal discountAmount = new BigDecimal(discountAmountField.getText());
            BigDecimal result = discountAmount.divide(invoiceSubValue, new MathContext(10)).multiply(new BigDecimal(100));
            result.setScale(4, RoundingMode.HALF_UP);
            discountPercentField.setText(""+result.toPlainString());
        }catch (Exception e){
            discountPercentField.setText("");
        }
    }

    protected void updateDiscountAmount(boolean contentValid) {
        if ( !contentValid ){
            discountAmountField.setText("");
            return;
        }
        if ( "".equals(discountPercentField.getText()) ){
            discountAmountField.setText("");
            return;
        }
        
        try{
            calculatedDiscountIsPercent = false;
            BigDecimal invoiceSubValue = new BigDecimal(invoiceSubValueField.getText());  
            BigDecimal discountPercent = new BigDecimal(discountPercentField.getText());
            BigDecimal result = discountPercent.divide(new BigDecimal(100), new MathContext(10)).multiply(invoiceSubValue);
            result.setScale(4, RoundingMode.HALF_EVEN);
            discountAmountField.setText(""+result);
        }catch (Exception e){
            discountAmountField.setText("");
        }
    }

    protected void updateTotalAmount(boolean contentValid) {
        if ( contentValid && allAmountsValid() ){
            try{
                BigDecimal total = new BigDecimal(0);
                total = total.add(new BigDecimal(invoiceSubValueField.getText()));
                BigDecimal vat = new BigDecimal(vatPercentField.getText());
                BigDecimal vatValue = vat.divide(new BigDecimal(100), MathContext.DECIMAL32);
                BigDecimal vatAmount = total.multiply(vatValue);
                total = total.add(vatAmount);
                total = total.subtract(new BigDecimal(discountAmountField.getText()));
                total = total.add(new BigDecimal(transportPriceField.getText()));
                total.setScale(4, RoundingMode.HALF_EVEN); 
                totalValueField.setText(""+total.toPlainString());
            }catch (Exception e){
                log.warn(e.getMessage());
                totalValueField.setText("");
            }
        }else{
            totalValueField.setText("");
        } 
    }

    private boolean allAmountsValid() {
        if ( "".equals(invoiceSubValueField.getText())
                || "".equals(vatPercentField.getText())
                || "".equals(discountAmountField.getText())
                || "".equals(transportPriceField.getText()) )
            return false;
        return true;
    }

    @SuppressWarnings("unchecked")
    private List<DbResource> getCurrencies() {
        if ( currencies==null )
            currencies = getFormSession().getCurrencies();
        return currencies;
    }

    private List<DbResource> getDocumentTypes() {
        if (documentTypes==null)
            documentTypes = getFormSession().getDocumentTypes();
        return documentTypes;
    }

    private List<ContactPerson> getSupplierContacts() {
        BusinessPartner supplier = (BusinessPartner) supplierField.getSelectedItem();
        
        List<ContactPerson> result = null;
        if ( supplier==null )
            result = new ArrayList<ContactPerson>();
        else
            result = getFormSession().getSupplierContacts(supplier);
        
        return result;
    }
    
    protected void onSelectSupplier() {
        bindGroup.removeBinding(supplierContactBinding);
        supplierContactBinding = supplierContactField.bind(bindGroup, getSupplierContacts(), entity, entProps.getPropertyDetails("supplierContact"));
        supplierContactBinding.bind();
        
        //auto select if one choice is available
        if ( supplierContactField.getModel().getSize()==1 ){
            supplierContactField.setSelectedIndex(0);
        }else{
            supplierContactField.setSelectedIndex(-1);
        }
    }

    public OrderConfirmationListRemote getFormSession() {
        return formSession;
    }
    
    protected void updateSupplierNames() {
        ContactPerson supplierContact = entity.getSupplierContact();
        if ( supplierContact==null )
            entity.setSupplierContactName(null);
        else
            entity.setSupplierContactName(supplierContact.getContact().getDisplayName());
        
        BusinessPartner supplier = entity.getSupplier();
        if ( supplier!=null )
            entity.setSupplierName(supplier.getDisplayName());
        else 
            entity.setSupplierName(null);
    }

    @SuppressWarnings("unchecked")
    @Action
    public void calculateSumFromItemsAction() {
        List<OrderConfirmationItem> items = itemsTablePanel.getListData();
        BigDecimal sum = new BigDecimal(0);
        for (OrderConfirmationItem orderConfirmationItem : items) {
            sum = sum.add(orderConfirmationItem.getExtendedPrice());
        }
        sum.setScale(4, RoundingMode.HALF_EVEN);
        
        //autoUpdatingInvoiceSubValue = true;
        invoiceSubValueField.setText(""+sum);
        //autoUpdatingInvoiceSubValue = false;
        
        userEnteredInvoiceValue = false;
    }
    
    @Override
    public void setReadonly() {
        super.setReadonly();
        sumItemsButton.setEnabled(false);
        itemsTablePanel.setReadonly();
    }
}
