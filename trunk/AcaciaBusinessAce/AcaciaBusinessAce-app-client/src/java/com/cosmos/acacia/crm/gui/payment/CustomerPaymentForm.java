/*
 * CustomerPaymentForm.java
 *
 * Created on Четвъртък, 2009, Март 5, 17:20
 */
package com.cosmos.acacia.crm.gui.payment;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.BoxLayout;

import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;

import com.cosmos.acacia.crm.bl.contactbook.BankDetailsListRemote;
import com.cosmos.acacia.crm.bl.contactbook.BusinessPartnersListRemote;
import com.cosmos.acacia.crm.bl.impl.EnumResourceRemote;
import com.cosmos.acacia.crm.bl.payment.CustomerPaymentRemote;
import com.cosmos.acacia.crm.data.contacts.BankDetail;
import com.cosmos.acacia.crm.data.contacts.BusinessPartner;
import com.cosmos.acacia.crm.data.Classifier;
import com.cosmos.acacia.crm.data.contacts.ContactPerson;
import com.cosmos.acacia.crm.data.CustomerPayment;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.contacts.Organization;
import com.cosmos.acacia.crm.data.contacts.Person;
import com.cosmos.acacia.crm.enums.Currency;
import com.cosmos.acacia.crm.enums.CustomerPaymentStatus;
import com.cosmos.acacia.crm.enums.CustomerPaymentType;
import com.cosmos.acacia.crm.gui.contactbook.BusinessPartnersListPanel;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.acacia.util.AcaciaUtils;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.beansbinding.validation.BaseValidator;
import com.cosmos.beansbinding.validation.RequiredValidator;
import com.cosmos.beansbinding.validation.ValidationError;
import com.cosmos.swingb.DialogResponse;
import com.cosmos.swingb.JBButton;

/**
 * 
 * Created	:	06.03.2009
 * @author	Petar Milev
 *
 */
public class CustomerPaymentForm extends BaseEntityPanel {

    private CustomerPayment entity;
    private BindingGroup bindingGroup;
    private CustomerPaymentRemote formSession = getBean(CustomerPaymentRemote.class);
    private EnumResourceRemote enumResourceRemote = getBean(EnumResourceRemote.class);
    private BusinessPartnersListRemote businessPartnersListRemote = getBean(BusinessPartnersListRemote.class);
    private EntityProperties entProps;

    /** Creates new form */
    public CustomerPaymentForm(CustomerPayment customerPayment) {
        super(customerPayment.getParentId());
        this.entity = customerPayment;
        initialize();
    }

    private void initialize() {
        initComponents();
        initComponentsCustom();
        init();
    }

    private void initComponentsCustom() {
        entityFormButtonPanel = new EntityFormButtonPanel();
        BoxLayout boxLayout = new BoxLayout(footerPanel, BoxLayout.Y_AXIS);
        footerPanel.setLayout(boxLayout);
        footerPanel.add(entityFormButtonPanel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBPanel1 = new com.cosmos.swingb.JBPanel();
        branchField = new com.cosmos.swingb.JBTextField();
        jBLabel1 = new com.cosmos.swingb.JBLabel();
        customerField = new com.cosmos.acacia.gui.AcaciaComboList();
        jBLabel2 = new com.cosmos.swingb.JBLabel();
        customerContactField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        completedByField = new com.cosmos.swingb.JBTextField();
        jBLabel4 = new com.cosmos.swingb.JBLabel();
        jBLabel5 = new com.cosmos.swingb.JBLabel();
        jBLabel6 = new com.cosmos.swingb.JBLabel();
        statusField = new com.cosmos.acacia.gui.AcaciaComboBox();
        docNumberField = new com.cosmos.swingb.JBTextField();
        jBLabel14 = new com.cosmos.swingb.JBLabel();
        createdAtField = new com.cosmos.swingb.JBDatePicker();
        jBLabel15 = new com.cosmos.swingb.JBLabel();
        createdByField = new com.cosmos.swingb.JBTextField();
        jBLabel16 = new com.cosmos.swingb.JBLabel();
        completedAtField = new com.cosmos.swingb.JBTextField();
        jBPanel2 = new com.cosmos.swingb.JBPanel();
        amountField = new com.cosmos.swingb.JBFormattedTextField();
        jBLabel7 = new com.cosmos.swingb.JBLabel();
        paymentAccountField = new com.cosmos.acacia.gui.AcaciaComboBox();
        paymentAccountLabel = new com.cosmos.swingb.JBLabel();
        jBLabel9 = new com.cosmos.swingb.JBLabel();
        transactionNoField = new com.cosmos.swingb.JBTextField();
        transactionNoLabel = new com.cosmos.swingb.JBLabel();
        transactionDateField = new com.cosmos.swingb.JBDatePicker();
        currencyField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel11 = new com.cosmos.swingb.JBLabel();
        paymentReturnField = new com.cosmos.swingb.JBCheckBox();
        jBLabel13 = new com.cosmos.swingb.JBLabel();
        paymentTypeField = new com.cosmos.acacia.gui.AcaciaComboBox();
        jBLabel17 = new com.cosmos.swingb.JBLabel();
        cashierField = new com.cosmos.acacia.gui.AcaciaComboBox();
        cashierLabel = new com.cosmos.swingb.JBLabel();
        transactionFeeField = new com.cosmos.swingb.JBFormattedTextField();
        transactionFeeLabel = new com.cosmos.swingb.JBLabel();
        jBPanel3 = new com.cosmos.swingb.JBPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionField = new com.cosmos.swingb.JBTextPane();
        footerPanel = new com.cosmos.swingb.JBPanel();

        setName("Form"); // NOI18N

        jBPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Document Details"));
        jBPanel1.setName("jBPanel1"); // NOI18N

        branchField.setEditable(false);
        branchField.setName("branchField"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(CustomerPaymentForm.class);
        jBLabel1.setText(resourceMap.getString("jBLabel1.text")); // NOI18N
        jBLabel1.setName("jBLabel1"); // NOI18N

        customerField.setName("customerField"); // NOI18N

        jBLabel2.setText(resourceMap.getString("jBLabel2.text")); // NOI18N
        jBLabel2.setName("jBLabel2"); // NOI18N

        customerContactField.setName("customerContactField"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        completedByField.setEditable(false);
        completedByField.setName("completedByField"); // NOI18N

        jBLabel4.setText(resourceMap.getString("jBLabel4.text")); // NOI18N
        jBLabel4.setName("jBLabel4"); // NOI18N

        jBLabel5.setText(resourceMap.getString("jBLabel5.text")); // NOI18N
        jBLabel5.setName("jBLabel5"); // NOI18N

        jBLabel6.setText(resourceMap.getString("jBLabel6.text")); // NOI18N
        jBLabel6.setName("jBLabel6"); // NOI18N

        statusField.setEnabled(false);
        statusField.setName("statusField"); // NOI18N

        docNumberField.setEditable(false);
        docNumberField.setName("docNumberField"); // NOI18N

        jBLabel14.setText(resourceMap.getString("jBLabel14.text")); // NOI18N
        jBLabel14.setName("jBLabel14"); // NOI18N

        createdAtField.setEditable(false);
        createdAtField.setName("createdAtField"); // NOI18N

        jBLabel15.setText(resourceMap.getString("jBLabel15.text")); // NOI18N
        jBLabel15.setName("jBLabel15"); // NOI18N

        createdByField.setEditable(false);
        createdByField.setName("createdByField"); // NOI18N

        jBLabel16.setText(resourceMap.getString("jBLabel16.text")); // NOI18N
        jBLabel16.setName("jBLabel16"); // NOI18N

        completedAtField.setEditable(false);
        completedAtField.setText(resourceMap.getString("completedAtField.text")); // NOI18N
        completedAtField.setName("completedAtField"); // NOI18N

        javax.swing.GroupLayout jBPanel1Layout = new javax.swing.GroupLayout(jBPanel1);
        jBPanel1.setLayout(jBPanel1Layout);
        jBPanel1Layout.setHorizontalGroup(
            jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(jBLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(55, 55, 55))
                    .addComponent(jBLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(jBLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(jBLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(22, 22, 22)))
                .addGap(40, 40, 40)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(branchField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(docNumberField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(completedByField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(completedAtField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jBPanel1Layout.createSequentialGroup()
                                .addComponent(jBLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(41, 41, 41))
                            .addComponent(jBLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addComponent(jBLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(customerContactField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(statusField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(createdAtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(createdByField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addContainerGap())
        );
        jBPanel1Layout.setVerticalGroup(
            jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel1Layout.createSequentialGroup()
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(branchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(completedAtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(completedByField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jBPanel1Layout.createSequentialGroup()
                        .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerContactField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createdAtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdByField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jBPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Details"));
        jBPanel2.setName("jBPanel2"); // NOI18N

        amountField.setText(resourceMap.getString("amountField.text")); // NOI18N
        amountField.setName("amountField"); // NOI18N

        jBLabel7.setText(resourceMap.getString("jBLabel7.text")); // NOI18N
        jBLabel7.setName("jBLabel7"); // NOI18N

        paymentAccountField.setName("paymentAccountField"); // NOI18N

        paymentAccountLabel.setText(resourceMap.getString("paymentAccountLabel.text")); // NOI18N
        paymentAccountLabel.setName("paymentAccountLabel"); // NOI18N

        jBLabel9.setText(resourceMap.getString("jBLabel9.text")); // NOI18N
        jBLabel9.setName("jBLabel9"); // NOI18N

        transactionNoField.setName("transactionNoField"); // NOI18N

        transactionNoLabel.setText(resourceMap.getString("transactionNoLabel.text")); // NOI18N
        transactionNoLabel.setName("transactionNoLabel"); // NOI18N

        transactionDateField.setName("transactionDateField"); // NOI18N

        currencyField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BGN" }));
        currencyField.setName("currencyField"); // NOI18N

        jBLabel11.setText(resourceMap.getString("jBLabel11.text")); // NOI18N
        jBLabel11.setName("jBLabel11"); // NOI18N

        paymentReturnField.setName("paymentReturnField"); // NOI18N

        jBLabel13.setText(resourceMap.getString("jBLabel13.text")); // NOI18N
        jBLabel13.setName("jBLabel13"); // NOI18N

        paymentTypeField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bank", "Cash" }));
        paymentTypeField.setName("paymentTypeField"); // NOI18N

        jBLabel17.setText(resourceMap.getString("jBLabel17.text")); // NOI18N
        jBLabel17.setName("jBLabel17"); // NOI18N

        cashierField.setName("cashierField"); // NOI18N

        cashierLabel.setText(resourceMap.getString("cashierLabel.text")); // NOI18N
        cashierLabel.setName("cashierLabel"); // NOI18N

        transactionFeeField.setText(resourceMap.getString("transactionFeeField.text")); // NOI18N
        transactionFeeField.setName("transactionFeeField"); // NOI18N

        transactionFeeLabel.setText(resourceMap.getString("transactionFeeLabel.text")); // NOI18N
        transactionFeeLabel.setName("transactionFeeLabel"); // NOI18N

        javax.swing.GroupLayout jBPanel2Layout = new javax.swing.GroupLayout(jBPanel2);
        jBPanel2.setLayout(jBPanel2Layout);
        jBPanel2Layout.setHorizontalGroup(
            jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentAccountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jBPanel2Layout.createSequentialGroup()
                                .addComponent(jBLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(19, 19, 19)))
                        .addGap(22, 22, 22))
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addComponent(cashierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amountField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBPanel2Layout.createSequentialGroup()
                        .addComponent(paymentTypeField, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addComponent(currencyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(paymentAccountField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(cashierField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel2Layout.createSequentialGroup()
                        .addComponent(transactionFeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jBPanel2Layout.createSequentialGroup()
                            .addComponent(transactionNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addGap(66, 66, 66))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBPanel2Layout.createSequentialGroup()
                            .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addGap(63, 63, 63))
                        .addGroup(jBPanel2Layout.createSequentialGroup()
                            .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transactionFeeField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(transactionDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(paymentReturnField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(transactionNoField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addContainerGap())
        );
        jBPanel2Layout.setVerticalGroup(
            jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel2Layout.createSequentialGroup()
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paymentTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(paymentReturnField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentAccountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentAccountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionFeeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionFeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jBPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        jBPanel3.setName("jBPanel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        descriptionField.setName("descriptionField"); // NOI18N
        jScrollPane1.setViewportView(descriptionField);

        javax.swing.GroupLayout jBPanel3Layout = new javax.swing.GroupLayout(jBPanel3);
        jBPanel3.setLayout(jBPanel3Layout);
        jBPanel3Layout.setHorizontalGroup(
            jBPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addContainerGap())
        );
        jBPanel3Layout.setVerticalGroup(
            jBPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addContainerGap())
        );

        footerPanel.setName("footerPanel"); // NOI18N

        javax.swing.GroupLayout footerPanelLayout = new javax.swing.GroupLayout(footerPanel);
        footerPanel.setLayout(footerPanelLayout);
        footerPanelLayout.setHorizontalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 806, Short.MAX_VALUE)
        );
        footerPanelLayout.setVerticalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 53, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(footerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBFormattedTextField amountField;
    private com.cosmos.swingb.JBTextField branchField;
    private com.cosmos.acacia.gui.AcaciaComboBox cashierField;
    private com.cosmos.swingb.JBLabel cashierLabel;
    private com.cosmos.swingb.JBTextField completedAtField;
    private com.cosmos.swingb.JBTextField completedByField;
    private com.cosmos.swingb.JBDatePicker createdAtField;
    private com.cosmos.swingb.JBTextField createdByField;
    private com.cosmos.acacia.gui.AcaciaComboBox currencyField;
    private com.cosmos.acacia.gui.AcaciaComboBox customerContactField;
    private com.cosmos.acacia.gui.AcaciaComboList customerField;
    private com.cosmos.swingb.JBTextPane descriptionField;
    private com.cosmos.swingb.JBTextField docNumberField;
    private com.cosmos.swingb.JBPanel footerPanel;
    private com.cosmos.swingb.JBLabel jBLabel1;
    private com.cosmos.swingb.JBLabel jBLabel11;
    private com.cosmos.swingb.JBLabel jBLabel13;
    private com.cosmos.swingb.JBLabel jBLabel14;
    private com.cosmos.swingb.JBLabel jBLabel15;
    private com.cosmos.swingb.JBLabel jBLabel16;
    private com.cosmos.swingb.JBLabel jBLabel17;
    private com.cosmos.swingb.JBLabel jBLabel2;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.swingb.JBLabel jBLabel4;
    private com.cosmos.swingb.JBLabel jBLabel5;
    private com.cosmos.swingb.JBLabel jBLabel6;
    private com.cosmos.swingb.JBLabel jBLabel7;
    private com.cosmos.swingb.JBLabel jBLabel9;
    private com.cosmos.swingb.JBPanel jBPanel1;
    private com.cosmos.swingb.JBPanel jBPanel2;
    private com.cosmos.swingb.JBPanel jBPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private com.cosmos.acacia.gui.AcaciaComboBox paymentAccountField;
    private com.cosmos.swingb.JBLabel paymentAccountLabel;
    private com.cosmos.swingb.JBCheckBox paymentReturnField;
    private com.cosmos.acacia.gui.AcaciaComboBox paymentTypeField;
    private com.cosmos.acacia.gui.AcaciaComboBox statusField;
    private com.cosmos.swingb.JBDatePicker transactionDateField;
    private com.cosmos.swingb.JBFormattedTextField transactionFeeField;
    private com.cosmos.swingb.JBLabel transactionFeeLabel;
    private com.cosmos.swingb.JBTextField transactionNoField;
    private com.cosmos.swingb.JBLabel transactionNoLabel;
    // End of variables declaration//GEN-END:variables
    private EntityFormButtonPanel entityFormButtonPanel;
    private BusinessPartnersListPanel customerListPanel;
    private JComboBoxBinding customerContactBinding;
    private List<DbResource> statuses;
    private List<DbResource> currencies;
    private List<DbResource> paymentTypes;
    private List<BankDetail> bankDetails;
    private BankDetailsListRemote bankDetailsListRemote = getBean(BankDetailsListRemote.class);

    @Override
    public BindingGroup getBindingGroup() {
        if (bindingGroup == null) {
            bindingGroup = new BindingGroup();
        }

        return bindingGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel;
    }

    @Override
    public Object getEntity() {
        return entity;
    }

    @SuppressWarnings("deprecation")
    @Override
    public void performSave(boolean closeAfter) {
        entity = formSession.saveCustomerPayment(entity);
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(entity);
        if (closeAfter) {
            close();
        } else {
            getBindingGroup().unbind();
            bindingGroup = null;
            initData();
        }
    }

    @Override
    protected void initData() {

        if (entProps == null) {
            entProps = getFormSession().getDetailEntityProperties();
        }

        beforeBind();
        bind(getBindingGroup());
        afterBind();
    }

    private void beforeBind() {
        if (customerListPanel == null) {
            Classifier classifier = getClassifier(Classifier.Customer.getClassifierCode());
            customerListPanel = new BusinessPartnersListPanel(classifier);
            customerListPanel.setClassifierVisible(false);
        }

        throw new UnsupportedOperationException("ToDo");
//        if (bankDetails == null) {
//            bankDetails = bankDetailsListRemote.getBankDetailsForOrganization(getOrganizationDataObjectId());
//        }
//
//        if (entity.getId() == null && entity.getCashier() == null) {
//            entity.setCashier(getAcaciaSession().getPerson());
//        }
    }

    private void afterBind() {
        customerField.getBinding().addBindingListener(new AbstractBindingListener() {

            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if (event.getValueChanged()) {
                    BusinessPartner selected = null;
                    if (binding.isContentValid() && customerField.getSelectedItem() instanceof BusinessPartner) {
                        selected = (BusinessPartner) customerField.getSelectedItem();
                    }
                    onSelectCustomer(selected);
                }
            }
        });

        // set as read-only if the form was saved before
        if (entity.getId() != null) {
            paymentTypeField.setEnabled(false);
        } else {
            paymentTypeField.addItemListener(new ItemListener() {

                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (paymentTypeField.getSelectedItem() instanceof DbResource) {
                        onPaymentTypeChanged((DbResource) paymentTypeField.getSelectedItem());
                    }
                }
            }, true);
        }
        onPaymentTypeChanged(entity.getPaymentType());

        // cashier
        cashierField.setEnabled(false);
        // payment type
        paymentTypeField.setEditable(false);

        //payment return
        paymentReturnField.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                onPaymentReturnChanged();
            }
        });
        onPaymentReturnChanged();

        //complete button
        if (CustomerPaymentStatus.Open.equals(entity.getStatus().getEnumValue())) {
            addButton("button.complete", "onCompleteButton");
        }
    }

    @Action
    public void onCompleteButton() {
        if (showConfirmationDialog(getResourceMap().getString("button.complete.confirm"))) {
            entity = getFormSession().completeCustomerPayment(entity);
            setSelectedValue(entity);
            setDialogResponse(DialogResponse.SAVE);
            close();
        }
    }

    protected void onPaymentReturnChanged() {
        boolean paymentReturn = paymentReturnField.isSelected();
        Binding descrBinding = descriptionField.getBinding();
        descrBinding.unbind();
        if (paymentReturn) {
            descrBinding.setValidator(new RequiredValidator());
        } else {
            descrBinding.setValidator(null);
        }
        descrBinding.bind();
    }

    private JBButton addButton(String textKey, String action) {
        JBButton button = new JBButton();
        button.setAction(getContext().getActionMap(this).get(action));
        button.setText(getResourceMap().getString(textKey));
        entityFormButtonPanel.addButton(button);
        return button;
    }

    /**
     * Just binds all components
     */
    @SuppressWarnings("deprecation")
    protected void bind(BindingGroup bg) {

        // branch
        if (entity.getBranch() != null) {
            branchField.setText(entity.getBranch().getAddressName());
        }

        // document number
        docNumberField.bind(bg, entity, entProps.getPropertyDetails("documentNumber"));

        // completion time
        if (entity.getCompletionTime() != null) {
            completedAtField.setText(AcaciaUtils.getDateTimeFormat().format(entity.getCompletionTime()));
        }

        // completed by
        if (entity.getCompletor() != null) {
            completedByField.setText(entity.getCompletor().getDisplayName());
        }

        // customer
        customerField.bind(bg, customerListPanel, entity, entProps.getPropertyDetails("customer"),
                "${displayName}", UpdateStrategy.READ_WRITE);

        // customer contact
        bindCustomerContact(entity.getCustomer());

        // status field
        statusField.bind(bg, getStatuses(), entity, entProps.getPropertyDetails("status"));

        // created at
        createdAtField.bind(bg, entity, entProps.getPropertyDetails("creationTime"), AcaciaUtils.getShortDateFormat());

        // created by
        if (entity.getCreator() != null) {
            createdByField.setText(entity.getCreator().getDisplayName());
        }

        // payment type
        paymentTypeField.bind(bg, getPaymentTypes(), entity, entProps.getPropertyDetails("paymentType"));

        // amount
        amountField.bind(bg, entity, entProps.getPropertyDetails("amount"), AcaciaUtils.getDecimalFormat());

        // currency
        currencyField.bind(bg, getCurrencies(), entity, entProps.getPropertyDetails("currency"));

        // payment account
        paymentAccountField.bind(bg, bankDetails, entity, entProps.getPropertyDetails("paymentAccount"));

        // cashier
        cashierField.bind(bg, Arrays.asList(new Person[]{getAcaciaSession().getPerson()}), entity, entProps.getPropertyDetails("cashier"));

        // payment return
        paymentReturnField.bind(bg, entity, entProps.getPropertyDetails("paymentReturn"));

        // transaction date
        transactionDateField.bind(bg, entity, entProps.getPropertyDetails("transactionDate"), AcaciaUtils.getShortDateFormat());

        // transaction no
        transactionNoField.bind(bg, entity, entProps.getPropertyDetails("referenceNo"));

        // transaction fee
        transactionFeeField.bind(bg, entity, entProps.getPropertyDetails("transactionFee"));

        // description
        descriptionField.bind(bg, entity, entProps.getPropertyDetails("description"));

        bg.bind();
    }

    protected void onPaymentTypeChanged(DbResource paymentType) {
        boolean bankPayment = CustomerPaymentType.Bank.equals(paymentType.getEnumValue());
        BindingGroup bg = getBindingGroup();

        if (bankPayment) {
            paymentAccountLabel.setText(getResourceMap().getString("label.paymentAccount"));
            transactionNoLabel.setText(getResourceMap().getString("label.transactionNo"));
            cashierField.removeFromBindingGroup(bg);
            if (!bg.getBindings().contains(paymentAccountField.getComboBoxBinding())) {
                paymentAccountField.addToBindingGroup(bg);
            }
        } else {
            paymentAccountLabel.setText(getResourceMap().getString("label.cashier"));
            transactionNoLabel.setText(getResourceMap().getString("label.cashReceiptNo"));
            paymentAccountField.removeFromBindingGroup(bg);
            if (!bg.getBindings().contains(cashierField.getComboBoxBinding())) {
                cashierField.addToBindingGroup(bg);
            }
        }
        entityFormButtonPanel.setSaveActionState(this);

        transactionFeeLabel.setVisible(bankPayment);
        transactionFeeField.setVisible(bankPayment);
        paymentAccountLabel.setVisible(bankPayment);
        paymentAccountField.setVisible(bankPayment);
        cashierField.setVisible(!bankPayment);
        cashierLabel.setVisible(!bankPayment);

        //refresh customer contact field
        Object selContact = customerContactField.getSelectedItem();
        customerContactField.getBinding().refresh();
        customerContactField.setSelectedItem(selContact);
    }

    private List getPaymentTypes() {
        if (paymentTypes == null) {
            paymentTypes = enumResourceRemote.getEnumResources(CustomerPaymentType.class);
        }
        return paymentTypes;
    }

    private List<DbResource> getStatuses() {
        if (statuses == null) {
            statuses = enumResourceRemote.getEnumResources(CustomerPaymentStatus.class);
        }
        return statuses;
    }

    private List getCurrencies() {
        if (currencies == null) {
            currencies = enumResourceRemote.getEnumResources(Currency.class);
        }
        return currencies;
    }

    protected void onSelectCustomer(BusinessPartner customer) {
        BindingGroup bg = getBindingGroup();

        if (bg.getBindings().contains(customerContactBinding)) {
            bg.removeBinding(customerContactBinding);
        }
        bindCustomerContact(customer);
        customerContactBinding.bind();

        // auto select if one choice is available
        if (customerContactField.getModel().getSize() == 1) {
            customerContactField.setSelectedIndex(0);
        } else {
            customerContactField.setSelectedIndex(-1);
        }
    }

//    private void setCustomerContactMandatory() {
//        BusinessPartner customer = (BusinessPartner) customerField.getSelectedItem();
//        DbResource paymentType = (DbResource) paymentTypeField.getSelectedItem();
//        
//        boolean required = false;
//        if ( customer instanceof Organization 
//                && CustomerPaymentType.Cash.equals(paymentType.getEnumValue())){
//            required = true;
//        }
//        
//        Binding contactBinding = customerContactField.getBinding();
//        
//        if ( contactBinding.isBound() ){
//            contactBinding.unbind();
//        }
//        if ( required ){
//            contactBinding.setValidator(new RequiredValidator());
//        }else{
//            contactBinding.setValidator(null);
//        }
//        contactBinding.bind();
//    }
    private class CustomerContactValidator extends BaseValidator {

        public Result validate(Object value) {
            boolean required = false;
            if (paymentTypeField.getSelectedItem() instanceof String) {
                return null;
            }

            DbResource paymentType = (DbResource) paymentTypeField.getSelectedItem();
            BusinessPartner customer = (BusinessPartner) customerField.getSelectedItem();

            if (customer instanceof Organization && CustomerPaymentType.Cash.equals(paymentType.getEnumValue())) {
                required = true;
            }

            if (required && value == null) {
                return ValidationError.EmptyValue.getValidatorResult();
            } else {
                return null;
            }
        }
    }

    private void bindCustomerContact(BusinessPartner customer) {
        BindingGroup bg = getBindingGroup();

        List<ContactPerson> customerContacts = null;
        if (customer != null) {
            customerContacts = businessPartnersListRemote.getContactPersons(customer);
        } else {
            customerContacts = new ArrayList<ContactPerson>();
        }

        PropertyDetails pd = entProps.getPropertyDetails("customerContact");
        pd.setValidator(new CustomerContactValidator());
        customerContactBinding = customerContactField.bind(bg, customerContacts, entity,
                entProps.getPropertyDetails("customerContact"));
    }

    public void setReadonly() {
        super.setReadonly();
        customerField.setEnabled(false);
    }

    public CustomerPaymentRemote getFormSession() {
        return formSession;
    }
}
