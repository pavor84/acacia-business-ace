/*
 * AssemblingSchemasListPanel.java
 *
 * Created on Вторник, 2008, Юни 10, 21:07
 */

package com.cosmos.acacia.crm.gui.assembling;

import com.cosmos.acacia.gui.AbstractTablePanel;
import com.cosmos.acacia.gui.AcaciaPanel;
import java.math.BigInteger;

/**
 *
 * @author  Miro
 */
public class AssemblingSchemasListPanel
    extends AcaciaPanel
{

    /** Creates new form AssemblingSchemasListPanel */
    public AssemblingSchemasListPanel(BigInteger parentId)
    {
        super(parentId);
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assemblingSchemasSplitPane = new com.cosmos.swingb.JBSplitPane();
        schemaItemsSplitPane = new com.cosmos.swingb.JBSplitPane();
        schemaItemsPanel = getSchemaItemsTablePanel();
        itemValuesPanel = getItemValuesTablePanel();
        assemblingSchemasCategoryPanel = new com.cosmos.swingb.JBPanel();
        assemblingCategoryLookup = new com.cosmos.acacia.gui.AcaciaLookup();
        assemblingCategoryLabel = new com.cosmos.swingb.JBLabel();
        assemblingSchemasPanel = getAssemblingSchemasTablePanel() ;

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        assemblingSchemasSplitPane.setDividerLocation(450);
        assemblingSchemasSplitPane.setName("assemblingSchemasSplitPane"); // NOI18N

        schemaItemsSplitPane.setDividerLocation(300);
        schemaItemsSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        schemaItemsSplitPane.setName("schemaItemsSplitPane"); // NOI18N

        schemaItemsPanel.setName("schemaItemsPanel"); // NOI18N

        javax.swing.GroupLayout schemaItemsPanelLayout = new javax.swing.GroupLayout(schemaItemsPanel);
        schemaItemsPanel.setLayout(schemaItemsPanelLayout);
        schemaItemsPanelLayout.setHorizontalGroup(
            schemaItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );
        schemaItemsPanelLayout.setVerticalGroup(
            schemaItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        schemaItemsSplitPane.setTopComponent(schemaItemsPanel);

        itemValuesPanel.setName("itemValuesPanel"); // NOI18N

        javax.swing.GroupLayout itemValuesPanelLayout = new javax.swing.GroupLayout(itemValuesPanel);
        itemValuesPanel.setLayout(itemValuesPanelLayout);
        itemValuesPanelLayout.setHorizontalGroup(
            itemValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );
        itemValuesPanelLayout.setVerticalGroup(
            itemValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        schemaItemsSplitPane.setRightComponent(itemValuesPanel);

        assemblingSchemasSplitPane.setRightComponent(schemaItemsSplitPane);

        assemblingSchemasCategoryPanel.setName("assemblingSchemasCategoryPanel"); // NOI18N

        assemblingCategoryLookup.setName("assemblingCategoryLookup"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(AssemblingSchemasListPanel.class);
        assemblingCategoryLabel.setText(resourceMap.getString("assemblingCategoryLabel.text")); // NOI18N
        assemblingCategoryLabel.setName("assemblingCategoryLabel"); // NOI18N

        assemblingSchemasPanel.setName("assemblingSchemasPanel"); // NOI18N

        javax.swing.GroupLayout assemblingSchemasPanelLayout = new javax.swing.GroupLayout(assemblingSchemasPanel);
        assemblingSchemasPanel.setLayout(assemblingSchemasPanelLayout);
        assemblingSchemasPanelLayout.setHorizontalGroup(
            assemblingSchemasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 449, Short.MAX_VALUE)
        );
        assemblingSchemasPanelLayout.setVerticalGroup(
            assemblingSchemasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout assemblingSchemasCategoryPanelLayout = new javax.swing.GroupLayout(assemblingSchemasCategoryPanel);
        assemblingSchemasCategoryPanel.setLayout(assemblingSchemasCategoryPanelLayout);
        assemblingSchemasCategoryPanelLayout.setHorizontalGroup(
            assemblingSchemasCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assemblingSchemasCategoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assemblingCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assemblingCategoryLookup, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(assemblingSchemasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        assemblingSchemasCategoryPanelLayout.setVerticalGroup(
            assemblingSchemasCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assemblingSchemasCategoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assemblingSchemasCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(assemblingCategoryLookup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assemblingCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assemblingSchemasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        assemblingSchemasSplitPane.setLeftComponent(assemblingSchemasCategoryPanel);

        add(assemblingSchemasSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel assemblingCategoryLabel;
    private com.cosmos.acacia.gui.AcaciaLookup assemblingCategoryLookup;
    private com.cosmos.swingb.JBPanel assemblingSchemasCategoryPanel;
    private com.cosmos.swingb.JBPanel assemblingSchemasPanel;
    private com.cosmos.swingb.JBSplitPane assemblingSchemasSplitPane;
    private com.cosmos.swingb.JBPanel itemValuesPanel;
    private com.cosmos.swingb.JBPanel schemaItemsPanel;
    private com.cosmos.swingb.JBSplitPane schemaItemsSplitPane;
    // End of variables declaration//GEN-END:variables



    private AssemblingSchemasTablePanel assemblingSchemasTablePanel;
    private SchemaItemsTablePanel schemaItemsTablePanel;
    private ItemValuesTablePanel itemValuesTablePanel;

    @Override
    protected void initData()
    {
    }

    private AssemblingSchemasTablePanel getAssemblingSchemasTablePanel()
    {
        if(assemblingSchemasTablePanel == null)
        {
            assemblingSchemasTablePanel = new AssemblingSchemasTablePanel();
        }

        return assemblingSchemasTablePanel;
    }

    private SchemaItemsTablePanel getSchemaItemsTablePanel()
    {
        if(schemaItemsTablePanel == null)
        {
            schemaItemsTablePanel = new SchemaItemsTablePanel();
        }

        return schemaItemsTablePanel;
    }

    private ItemValuesTablePanel getItemValuesTablePanel()
    {
        if(itemValuesTablePanel == null)
        {
            itemValuesTablePanel = new ItemValuesTablePanel();
        }

        return itemValuesTablePanel;
    }


    private class AssemblingSchemasTablePanel
        extends AbstractTablePanel
    {
        public AssemblingSchemasTablePanel()
        {
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private class SchemaItemsTablePanel
        extends AbstractTablePanel
    {
        public SchemaItemsTablePanel()
        {
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private class ItemValuesTablePanel
        extends AbstractTablePanel
    {
        public ItemValuesTablePanel()
        {
        }

        @Override
        protected boolean deleteRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object modifyRow(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        protected Object newRow()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canCreate()
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canModify(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean canDelete(Object rowObject)
        {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }
}
