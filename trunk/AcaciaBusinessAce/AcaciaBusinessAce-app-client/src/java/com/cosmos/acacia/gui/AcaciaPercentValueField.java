
package com.cosmos.acacia.gui;

import com.cosmos.acacia.entity.AcaciaEntityAttributes;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.text.NumberFormat;

import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;

import com.cosmos.beansbinding.EntityProperty;
import com.cosmos.swingb.JBFormattedTextField;

/**
 * Represent component for displaying, binding and synchronizing a pair of fields for percent/value relation, 
 * calculated over external 'total value' number.
 * The synchronization with the 'total value' should be implemented using this component as
 * {@link TotalValueChangedListener}.
 * 
 * Created	:	13.12.2008
 * @author	Petar Milev
 *
 */
public class AcaciaPercentValueField extends javax.swing.JPanel implements TotalValueChangedListener{

    private static final BigDecimal ONE_HUNDRED = BigDecimal.valueOf(100);
    
    public enum EditType{
        /** use to set both field edit-able */
        BOTH,
        /** use to set only the percent field edit-able */
        PERCENT,
        /** use to set only the value field edit-able */
        VALUE,
        /** neither of the fields are edit-able, but the value can be deleted */
        NONE_DELETABLE,
        /** neither of the fields are edit-able and the value can't be removed */
        NONE;
    }

    public static final String COMMAND_PERCENT_EDIT = "COMMAND_PERCENT_EDIT";

    public static final String COMMAND_VALUE_EDIT = "COMMAND_VALUE_EDIT";
    
    public static final String COMMAND_CLEAR = "COMMAND_CLEAR";
    
    /** remember which value was edited the last time */
    boolean freezePercent = true;
    
    boolean syncing = false;
    
    boolean clearing = false;
    
    private Number totalValue;
    
    private BigDecimal secondValue;
    
    private boolean percentInclusive;
    
    private ActionListener actionListener;
    
    /** Creates new form AcaciaPercentValueField */
    public AcaciaPercentValueField() {
        initComponents();
        initComponentsCustom();
    }

    private void initComponentsCustom() {
        percentField.addKeyListener(new KeyAdapter(){
            public void keyPressed(KeyEvent e) {
                onKeyCommand(e);
            }
        });
        
        valueField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                onKeyCommand(e);
            }
        });
    }

    protected void onKeyCommand(KeyEvent e) {
        //if both fields are not edit-able, the user will not be able to delete the values.
        //In this case, this handler will assure this functionality.
        if ( EditType.NONE_DELETABLE.equals(editType)){
            if (e.getKeyCode() == KeyEvent.VK_DELETE || e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                clearing = true;
                if ( percentField.equals(e.getSource())){
                    percentField.setValue(null);
                }else{
                    valueField.setValue(null);
                }
                clearing = false;
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        valueField = new com.cosmos.swingb.JBFormattedTextField();
        percentField = new com.cosmos.swingb.JBFormattedTextField();
        percentLabel = new com.cosmos.swingb.JBLabel();

        setName("Form"); // NOI18N

        valueField.setEditable(false);
        valueField.setName("valueField"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(AcaciaPercentValueField.class);
        percentField.setText(resourceMap.getString("percentField.text")); // NOI18N
        percentField.setName("percentField"); // NOI18N

        percentLabel.setText(resourceMap.getString("percentLabel.text")); // NOI18N
        percentLabel.setName("percentLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(percentField, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(percentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueField, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(percentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(percentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBFormattedTextField percentField;
    private com.cosmos.swingb.JBLabel percentLabel;
    private com.cosmos.swingb.JBFormattedTextField valueField;
    // End of variables declaration//GEN-END:variables

    private EditType editType;

    private Binding binding;

    private Binding secondBinding;

    /**
     * 
     * @param bindingGroup
     * @param entity
     * @param propertyDetails - bind to this source property
     * @param format - both the percent and value field will use this format
     * @param bindToPercent - if true binds the source property to the percent field, otherwise to the value field
     * @param editType - both fields, percent field only or value field only.
     * @param totalValue - the total value used to calculate between percent and value 
     *  [value] = [total value] * [percent value] / 100  
     * @return the binding
     */
    public Binding bind(BindingGroup bindingGroup, Object entity,
                     EntityProperty propertyDetails, NumberFormat format, final boolean bindToPercent, EditType editType, Number totalValue) {
        
        boolean rebinding = binding!=null;
        //first - un-bind if needed
        if ( binding!=null ){
            if ( bindingGroup.getBindings().contains(binding) ){
                if ( binding.isBound() )
                    binding.unbind();
                bindingGroup.removeBinding(binding);
            }
            if ( bindingGroup.getBindings().contains(secondBinding) ){
                if ( secondBinding.isBound() )
                    secondBinding.unbind();
                bindingGroup.removeBinding(secondBinding);
            }
        }
        this.editType = editType;
        
        JBFormattedTextField targetField = bindToPercent ? percentField : valueField;
        JBFormattedTextField secondField = bindToPercent ? valueField : percentField;
        
        binding = targetField.bind(bindingGroup, entity, propertyDetails, format);
        secondField.setFormat(format);

        EntityProperty entityProperty = EntityProperty.createEntityProperty(
                "secondValue", "Second Value", BigDecimal.class.getName(), AcaciaEntityAttributes.getEntityAttributesMap());
        secondBinding = secondField.bind(bindingGroup, this, entityProperty, format);
        //set up listener for value updates on the bound field
        binding.addBindingListener(new AbstractBindingListener() {
            private void update(){
                if ( syncing ) return;
                syncing = true;
                if ( bindToPercent )
                    updateValueField(false);
                else
                    updatePercentField(false);
                syncing = false;
            }
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( !binding.isContentChanged())
                    return;
               update();
            }
        });
        
        //set up listener for the second value updates 
        secondBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( !binding.isContentChanged())
                    return;
                update();
            }
            
            private void update(){
                if ( syncing ) return;
                syncing = true;
                if ( bindToPercent )
                    updatePercentField(false);
                else
                    updateValueField(false);
                syncing = false;
            }
        });
        
        if ( EditType.PERCENT.equals(editType) ){
            valueField.setEditable(false);
        }else if ( EditType.VALUE.equals(editType) ){
            percentField.setEditable(false);
        }else if ( EditType.NONE_DELETABLE.equals(editType) ||  EditType.NONE.equals(editType)){
            percentField.setEditable(false);
            valueField.setEditable(false);
        }
        
        freezePercent = bindToPercent;
        
        totalValueChanged(totalValue);
        
        if ( rebinding ){
            binding.bind();
            secondBinding.bind();
        }
        
        return binding;
    }

    @Override
    /**
     * Notify this component that the total value was changed.
     */
    public void totalValueChanged(Number totalValue) {
        this.totalValue = totalValue;
        syncing = true;
        if ( freezePercent )
            updateValueField(true);
        else
            updatePercentField(true);
        syncing = false;
    }

    /**
     * 
     * @param preserveOldValue - if the new value is 'null' and preserverOldValue is true, 
     * then keep the old value
     */
    private void updatePercentField(boolean preserveOldValue) {
        
        BigDecimal percent = null;
        
        if ( totalValue!=null ){
            try{
                String valueString = ""+valueField.getFormat().parseObject(valueField.getText());
                BigDecimal value = new BigDecimal(valueString);
                
                BigDecimal totalValueBig = new BigDecimal(""+totalValue.toString());
                
                percent = value.divide(totalValueBig, MathContext.DECIMAL64).multiply(ONE_HUNDRED);
                
            }catch (Exception e){
                percent = null;
            }
        }
        
        if ( percent!=null || !preserveOldValue ){
            percentField.setValue(percent);
            if ( percent==null )
                percentField.setText("");
        }
        
        fireActionEvent(clearing?COMMAND_CLEAR:COMMAND_VALUE_EDIT);
    }

    /**
     * 
     * @param preserveOldValue - if the new value is 'null' and preserverOldValue is true, 
     * then keep the old value
     */
    private void updateValueField(boolean preserveOldValue) {
        
        BigDecimal value = null;
        
        if ( totalValue!=null ){
            try{
                if ( percentField.getValue()!=null ){
                    String percentString = ""+percentField.getFormat().parseObject(percentField.getText());
                    BigDecimal percent = new BigDecimal(""+percentString);
                    BigDecimal totalValueBig = new BigDecimal(""+totalValue.toString());
                    BigDecimal percentDec = percent.divide(ONE_HUNDRED);
                    
                    //ultimately 20% of 55 is 11, and the result will be 66
                    if ( !percentInclusive ){
                        value = totalValueBig.multiply(percentDec);
                    //but we might want to have the percent included in the result:
                    //20% of xxx (e.g. 20% from the result) to be 55 
                    }else{
                        if ( percentDec.equals(new BigDecimal(1)) ){
                            value = new BigDecimal(0);
                        }else{
                            value = percentDec.multiply(totalValueBig);
                            value = value.divide(new BigDecimal(1).subtract(percentDec), MathContext.DECIMAL64);
                        }
                    }
                }
            }catch (Exception e){
                value = null;
            }
        }else{
            if (  percentField.getValue()!=null ){
                value = new BigDecimal(0);
            }
        }
        
        if ( value!=null || !preserveOldValue ){
            valueField.setValue(value);
            if ( value==null )
                valueField.setText("");
        }
        
        fireActionEvent(clearing?COMMAND_CLEAR:COMMAND_PERCENT_EDIT);
    }

    public Object getValue() {
        return valueField.getValue();
    }

    public BigDecimal getSecondValue() {
        return secondValue;
    }

    public void setSecondValue(BigDecimal secondValue) {
        this.secondValue = secondValue;
    }
    
    public void setPercent(BigDecimal percent){
        percentField.setValue(percent);
    }
    
    public void setValue(BigDecimal value){
        valueField.setValue(value);
    }

    public boolean isPercentInclusive() {
        return percentInclusive;
    }

    public void setPercentInclusive(boolean percentInclusive) {
        this.percentInclusive = percentInclusive;
    }
    
    /**
     * Currently, only one listener is supported.
     * The action events are fired on every value update. Both values are updated at the time of the event.
     * @param listener
     */
    public void addActionListener(ActionListener listener){
        this.actionListener = listener;
    }
    
    protected void fireActionEvent(String command){
        if ( actionListener!=null ){
            ActionEvent event = new ActionEvent(this, 0, command);
            actionListener.actionPerformed(event);
        }
    }

    public boolean isFreezePercent() {
        return freezePercent;
    }

    public void setFreezePercent(boolean freezePercent) {
        this.freezePercent = freezePercent;
    }
}