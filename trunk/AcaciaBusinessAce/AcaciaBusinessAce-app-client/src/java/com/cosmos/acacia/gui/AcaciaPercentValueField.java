
package com.cosmos.acacia.gui;

import java.math.BigDecimal;
import java.math.MathContext;
import java.text.NumberFormat;

import org.jdesktop.beansbinding.AbstractBindingListener;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.PropertyStateEvent;

import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.JBFormattedTextField;

/**
 * Represent component for displaying, binding and synchronizing a pair of fields for percent/value relation, 
 * calculated over external 'total value' number.
 * The synchronization with the 'total value' should be implemented using this component as
 * {@link TotalValueChangedListener}.
 * 
 * Created	:	13.12.2008
 * @author	Petar Milev
 *
 */
public class AcaciaPercentValueField extends javax.swing.JPanel implements TotalValueChangedListener{
    
    public enum EditType{
        /** use to set both field edit-able */
        BOTH,
        /** use to set only the percent field edit-able */
        PERCENT,
        /** use to set only the value field edit-able */
        VALUE;
    }
    
    /** remember which value was edited the last time */
    boolean percentLastEdited = true;
    
    boolean syncing = false;
    
    private Number totalValue;
    
    private BigDecimal secondValue;
    
    /** Creates new form AcaciaPercentValueField */
    public AcaciaPercentValueField() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBLabel39 = new com.cosmos.swingb.JBLabel();
        valueField = new com.cosmos.swingb.JBFormattedTextField();
        percentField = new com.cosmos.swingb.JBFormattedTextField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(AcaciaPercentValueField.class);
        jBLabel39.setText(resourceMap.getString("jBLabel39.text")); // NOI18N
        jBLabel39.setName("jBLabel39"); // NOI18N

        valueField.setEditable(false);
        valueField.setName("valueField"); // NOI18N

        percentField.setText(resourceMap.getString("percentField.text")); // NOI18N
        percentField.setName("percentField"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(percentField, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueField, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(percentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jBLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBLabel jBLabel39;
    private com.cosmos.swingb.JBFormattedTextField percentField;
    private com.cosmos.swingb.JBFormattedTextField valueField;
    // End of variables declaration//GEN-END:variables
    
    /**
     * 
     * @param bindingGroup
     * @param entity
     * @param propertyDetails - bind to this source property
     * @param format - both the percent and value field will use this format
     * @param bindToPercent - if true binds the source property to the percent field, otherwise to the value field
     * @param editType - both fields, percent field only or value field only.
     * @param totalValue - the total value used to calculate between percent and value 
     *  [value] = [total value] * [percent value] / 100  
     * @return the binding
     */
    public Binding bind(BindingGroup bindingGroup, Object entity,
                     PropertyDetails propertyDetails, NumberFormat format, final boolean bindToPercent, EditType editType, Number totalValue) {
        JBFormattedTextField targetField = bindToPercent ? percentField : valueField;
        JBFormattedTextField secondField = bindToPercent ? valueField : percentField;
        
        Binding binding = targetField.bind(bindingGroup, entity, propertyDetails, format);
        secondField.setFormat(format);
        
        Binding secondBinding = secondField.bind(bindingGroup, this, new PropertyDetails("secondValue", "Second Value", BigDecimal.class.getName()), format);
        
        //set up listener for value updates on the bound field
        binding.addBindingListener(new AbstractBindingListener() {
            private void update(){
                if ( syncing ) return;
                syncing = true;
                if ( bindToPercent )
                    updateValueField(false);
                else
                    updatePercentField(false);
                syncing = false;
            }
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( !binding.isContentChanged())
                    return;
               update();
            }
        });
        
        //set up listener for the second value updates 
        secondBinding.addBindingListener(new AbstractBindingListener() {
            @Override
            public void targetChanged(Binding binding, PropertyStateEvent event) {
                if ( !binding.isContentChanged())
                    return;
                update();
            }
            
            private void update(){
                if ( syncing ) return;
                syncing = true;
                if ( bindToPercent )
                    updatePercentField(false);
                else
                    updateValueField(false);
                syncing = false;
            }
        });
        
        if ( EditType.PERCENT.equals(editType) ){
            valueField.setEditable(false);
        }
        else if ( EditType.VALUE.equals(editType) ){
            percentField.setEditable(false);
        }
        
        percentLastEdited = bindToPercent;
        
        valueChanged(totalValue);
        
        return binding;
    }

    @Override
    /**
     * Notify this component that the total value was changed.
     */
    public void valueChanged(Number totalValue) {
        this.totalValue = totalValue;
        syncing = true;
        if ( percentLastEdited )
            updateValueField(true);
        else
            updatePercentField(true);
        syncing = false;
    }

    /**
     * 
     * @param preserveOldValue - if the new value is 'null' and preserverOldValue is true, 
     * then keep the old value
     */
    private void updatePercentField(boolean preserveOldValue) {
        
        BigDecimal percent = null;
        
        if ( totalValue!=null ){
            try{
                String valueString = ""+valueField.getFormat().parseObject(valueField.getText());
                BigDecimal value = new BigDecimal(valueString);
                
                BigDecimal totalValueBig = new BigDecimal(""+totalValue.toString());
                
                percent = value.divide(totalValueBig, MathContext.DECIMAL64).multiply(new BigDecimal("100"));
                
            }catch (Exception e){
                percent = null;
            }
        }
        
        if ( percent!=null || !preserveOldValue ){
            percentField.setValue(percent);
            if ( percent==null )
                percentField.setText("");
        }
        
        percentLastEdited = false;//we are updating the percent, so the value must've been edited
    }

    /**
     * 
     * @param preserveOldValue - if the new value is 'null' and preserverOldValue is true, 
     * then keep the old value
     */
    private void updateValueField(boolean preserveOldValue) {
        
        BigDecimal value = null;
        
        if ( totalValue!=null ){
            try{
                if ( percentField.getValue()!=null ){
                    String percentString = ""+percentField.getFormat().parseObject(percentField.getText());
                    BigDecimal percent = new BigDecimal(""+percentString);
                    
                    BigDecimal totalValueBig = new BigDecimal(""+totalValue.toString());
                    
                    value = totalValueBig.multiply(percent).divide(new BigDecimal(100));
                }
                
                
            }catch (Exception e){
                value = null;
            }
        }
        
        if ( value!=null || !preserveOldValue ){
            valueField.setValue(value);
            if ( value==null )
                valueField.setText("");
        }
        
        percentLastEdited = true;//we are updating the value, so the percent must've been edited
    }

    public Object getValue() {
        return valueField.getValue();
    }

    public BigDecimal getSecondValue() {
        return secondValue;
    }

    public void setSecondValue(BigDecimal secondValue) {
        this.secondValue = secondValue;
    }
}
