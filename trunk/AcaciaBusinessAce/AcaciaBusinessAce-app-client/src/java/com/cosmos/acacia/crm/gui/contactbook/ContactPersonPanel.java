package com.cosmos.acacia.crm.gui.contactbook;

import com.cosmos.acacia.crm.bl.contactbook.impl.AddressesListRemote;
import com.cosmos.acacia.crm.data.ContactPerson;
import com.cosmos.acacia.crm.data.DataObject;
import com.cosmos.acacia.crm.data.Person;
import com.cosmos.acacia.crm.data.PositionType;
import com.cosmos.acacia.gui.AcaciaLookupProvider;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.swingb.DialogResponse;

import java.util.List;
import javax.ejb.EJB;
import javax.naming.InitialContext;

import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class ContactPersonPanel extends BaseEntityPanel {

    protected static Logger log = Logger.getLogger(ContactPersonPanel.class);

    /** Creates new form ContactPersonPanel */
    public ContactPersonPanel(ContactPerson contactPerson) {
        super(contactPerson.getDataObject().getParentDataObject());
        this.contactPerson = contactPerson;
        init();
    }

    /** Creates new form ContactPersonPanel */
    public ContactPersonPanel(DataObject parentDataObject) {
        super(parentDataObject);
        init();
    }

    @Override
    protected void init()
    {
        initComponents();
        super.init();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityFormButtonPanel = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        typeLabel = new com.cosmos.swingb.JBLabel();
        personLabel = new com.cosmos.swingb.JBLabel();
        personsComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        typeLookup = new com.cosmos.acacia.gui.AcaciaLookup();

        entityFormButtonPanel.setName("entityFormButtonPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(ContactPersonPanel.class);
        typeLabel.setText(resourceMap.getString("typeLabel.text")); // NOI18N
        typeLabel.setName("typeLabel"); // NOI18N

        personLabel.setText(resourceMap.getString("personLabel.text")); // NOI18N
        personLabel.setName("personLabel"); // NOI18N

        personsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        personsComboBox.setName("personsComboBox"); // NOI18N

        typeLookup.setName("typeLookup"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(personLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeLookup, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(personsComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(typeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeLookup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel;
    private com.cosmos.swingb.JBLabel personLabel;
    private com.cosmos.acacia.gui.AcaciaComboBox personsComboBox;
    private com.cosmos.swingb.JBLabel typeLabel;
    private com.cosmos.acacia.gui.AcaciaLookup typeLookup;
    // End of variables declaration//GEN-END:variables

    @EJB
    private AddressesListRemote formSession;

    private BindingGroup contactPersonBindingGroup;
    private ContactPerson contactPerson;
    private Binding typeBinding;
    
    @Override
    protected void initData() {
        setResizable(false);

        System.out.println("initData().contactPerson: " + contactPerson);
        if(contactPerson == null)
        {
            contactPerson = getFormSession().newContactPerson();
        }

        contactPersonBindingGroup = new BindingGroup();

        EntityProperties entityProps = getContactPersonEntityProperties();

        typeBinding = typeLookup.bind(new AcaciaLookupProvider() {
                @Override
                public Object showSelectionControl() {
                    return onChooseType();
                }
            }, contactPersonBindingGroup,
            contactPerson,
            entityProps.getPropertyDetails("positionType"),
            "${positionTypeName}",
            UpdateStrategy.READ_WRITE);
            
        personsComboBox.bind(contactPersonBindingGroup, getPersons(), contactPerson, entityProps.getPropertyDetails("contact"));


        contactPersonBindingGroup.bind();
    }

    protected Object onChooseType() {
        PositionTypesListPanel listPanel =
                new PositionTypesListPanel(getParentDataObject().getParentDataObject());
                
        log.info(getParentDataObject().getParentDataObject().getDataObjectType().getDataObjectType());
        
        DialogResponse dResponse = listPanel.showDialog(this);
        if ( DialogResponse.SELECT.equals(dResponse) ){
            return listPanel.getSelectedRowObject();
        } else {
            return null;
        }
    }
        
    protected AddressesListRemote getFormSession()
    {
        if(formSession == null)
        {
            try
            {
                formSession = InitialContext.doLookup(AddressesListRemote.class.getName());
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }

        return formSession;
    }

    @Action
    @Override
    public void closeAction() {
        setDialogResponse(DialogResponse.CLOSE);
        close();
    }

    protected EntityProperties getContactPersonEntityProperties()
    {
        return getFormSession().getContactPersonEntityProperties();
    }

    private List<Person> getPersons()
    {
        return getFormSession().getPersons();
    }

    private List<PositionType> getPositionTypes()
    {
        return getFormSession().getPositionTypes(getParentDataObject().getParentDataObject());
    }

    @Override
    public BindingGroup getBindingGroup() {
        return contactPersonBindingGroup;
    }

    @Override
    public void performSave(boolean closeAfter) {
        log.info("Save: contactPerson: " + contactPerson);
        contactPerson = getFormSession().saveContactPerson(contactPerson, getParentDataObject());
        setDialogResponse(DialogResponse.SAVE);
        setSelectedValue(contactPerson);
        if (closeAfter)
            close();
    }

    @Override
    public Object getEntity() {
        return contactPerson;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel;
    }
}
