/*
 * CRUDButtonPanel.java
 *
 * Created on Петък, 2008, Февруари 15, 10:38
 */

package com.cosmos.acacia.gui;

import com.cosmos.acacia.crm.data.DataObjectBean;
import com.cosmos.acacia.crm.gui.AcaciaApplication;
import com.cosmos.acacia.crm.gui.contactbook.CityPanel;
import com.cosmos.acacia.security.GUIAccessControl;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ApplicationAction;
import org.jdesktop.application.ApplicationActionMap;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;

/**
 *
 * @author  miro
 */
public class CRUDButtonPanel
    extends AcaciaPanel
{
    protected static Logger log = Logger.getLogger(CRUDButtonPanel.class);

    public enum Button
    {
        Select("selectAction"),
        New("newAction"),
        Modify("modifyAction"),
        Delete("deleteAction"),
        Refresh("refreshAction"),
        Close("closeAction");

        private Button(String actionName)
        {
            this.actionName = actionName;
        }

        private String actionName;

        public String getActionName() {
            return actionName;
        }

    };

    /** Creates new form CRUDButtonPanel */
    public CRUDButtonPanel() {
        super();
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new com.cosmos.swingb.JBButton();
        refreshButton = new com.cosmos.swingb.JBButton();
        deleteButton = new com.cosmos.swingb.JBButton();
        modifyButton = new com.cosmos.swingb.JBButton();
        newButton = new com.cosmos.swingb.JBButton();
        selectButton = new com.cosmos.swingb.JBButton();

        setName("Form"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getActionMap(CRUDButtonPanel.class, this);
        closeButton.setAction(actionMap.get("closeAction")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        refreshButton.setAction(actionMap.get("refreshAction")); // NOI18N
        refreshButton.setName("refreshButton"); // NOI18N

        deleteButton.setAction(actionMap.get("deleteAction")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N

        modifyButton.setAction(actionMap.get("modifyAction")); // NOI18N
        modifyButton.setName("modifyButton"); // NOI18N

        newButton.setAction(actionMap.get("newAction")); // NOI18N
        newButton.setName("newButton"); // NOI18N

        selectButton.setAction(actionMap.get("selectAction")); // NOI18N
        selectButton.setName("selectButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, deleteButton, modifyButton, newButton, refreshButton, selectButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, deleteButton, modifyButton, newButton, refreshButton, selectButton});

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.swingb.JBButton deleteButton;
    private com.cosmos.swingb.JBButton modifyButton;
    private com.cosmos.swingb.JBButton newButton;
    private com.cosmos.swingb.JBButton refreshButton;
    private com.cosmos.swingb.JBButton selectButton;
    // End of variables declaration//GEN-END:variables

    private TableSelectionListener tableSelectionListener;
    private GUIAccessControl accessControl;
    private CRUDButtonActionsListener buttonActionsListener;


    protected void initData()
    {
        setEnabled(CRUDButtonPanel.Button.Select, false);
        setEnabled(CRUDButtonPanel.Button.Modify, false);
        setEnabled(CRUDButtonPanel.Button.Delete, false);
    }

    @Action
    public void selectAction() {
    }

    @Action
    public void closeAction() {
        if(buttonActionsListener != null)
            buttonActionsListener.closeAction();
    }

    @Action
    public Task refreshAction() {
        return new RefreshActionTask(Application.getInstance(AcaciaApplication.class));
    }

    private class RefreshActionTask
        extends Task<Object, Void>
    {
        RefreshActionTask(Application app)
        {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to RefreshActionTask fields, here.
            super(app);
            if(buttonActionsListener != null)
                buttonActionsListener.refreshAction();
        }

        @Override
        protected Object doInBackground()
        {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result)
        {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    @Action
    public void deleteAction() {
        if(buttonActionsListener != null)
        {
            ResourceMap resource = getResourceMap();
            String title = resource.getString("deleteAction.ConfirmDialog.title");
            String message = resource.getString("deleteAction.ConfirmDialog.message");
            Icon icon = resource.getImageIcon("deleteAction.ConfirmDialog.icon");
            int result = JOptionPane.showConfirmDialog(
                    this.getParent(),
                    message,
                    title,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    icon);
            if(JOptionPane.YES_OPTION == result)
                buttonActionsListener.deleteAction();
        }
    }

    @Action
    public void modifyAction() {
        if(buttonActionsListener != null)
            buttonActionsListener.modifyAction();
    }

    @Action
    public void newAction() {
        if(buttonActionsListener != null)
            buttonActionsListener.newAction();
    }

    public javax.swing.Action getAction(Button button)
    {
        ApplicationActionMap actionMap = getApplicationActionMap();
        if(actionMap != null && button != null)
        {
            return actionMap.get(button.getActionName());
        }

        return null;
    }

    public void setEnabled(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setEnabled(enabled);
        }
    }

    public void setSelected(Button button, boolean enabled) {
        ApplicationAction action = (ApplicationAction)getAction(button);
        if(action != null)
        {
            action.setSelected(enabled);
        }
    }

    public void setVisible(Button button, boolean visible) {
        switch(button)
        {
            case Select:
                selectButton.setVisible(visible);

            case New:
                newButton.setVisible(visible);
                break;

            case Modify:
                modifyButton.setVisible(visible);
                break;

            case Delete:
                deleteButton.setVisible(visible);
                break;

            case Refresh:
                refreshButton.setVisible(visible);
                break;

            case Close:
                closeButton.setVisible(visible);
                break;
        }
    }

    public boolean isVisible(Button button) {
        switch(button)
        {
            case Select:
                return selectButton.isVisible();

            case New:
                return newButton.isVisible();

            case Modify:
                return modifyButton.isVisible();

            case Delete:
                return deleteButton.isVisible();

            case Refresh:
                return refreshButton.isVisible();

            case Close:
                return closeButton.isVisible();
        }

        throw new IllegalArgumentException("Unknown or unsupported Button enumeration: " + button);
    }

    public void addListSelectionListener(AcaciaTable table)
    {
        tableSelectionListener = new TableSelectionListener(table);
    }

    public GUIAccessControl getAccessControl() {
        return accessControl;
    }

    public void setAccessControl(GUIAccessControl accessControl) {
        this.accessControl = accessControl;
    }

    public CRUDButtonActionsListener getButtonActionsListener() {
        return buttonActionsListener;
    }

    public void setButtonActionsListener(CRUDButtonActionsListener buttonActionsListener) {
        this.buttonActionsListener = buttonActionsListener;
    }




    private class TableSelectionListener
        implements ListSelectionListener
    {
        private AcaciaTable table;

        public TableSelectionListener(AcaciaTable table)
        {
            table.addListSelectionListener(this);
            this.table = table;
        }

        public void valueChanged(ListSelectionEvent event) {
            if(!event.getValueIsAdjusting())
            {
                log.info("CRUDButtonPanel.TableSelectionListener.valueChanged.event: " + event);

                ListSelectionModel selectionModel = (ListSelectionModel)event.getSource();
                if(selectionModel.isSelectionEmpty())
                {
                    setEnabled(CRUDButtonPanel.Button.Modify, false);
                    setEnabled(CRUDButtonPanel.Button.Delete, false);
                    setEnabled(CRUDButtonPanel.Button.Select, false);
                }
                else
                {
                    GUIAccessControl accessControl = getAccessControl();
                    Object selectedObject = table.getSelectedRowObject();
                    log.info("selectedObject: " + selectedObject);
                    if(accessControl != null && selectedObject instanceof DataObjectBean)
                    {
                        DataObjectBean entity = (DataObjectBean)selectedObject;
                        setEnabled(CRUDButtonPanel.Button.Modify, accessControl.canModify(entity));
                        setEnabled(CRUDButtonPanel.Button.Delete, accessControl.canDelete(entity));
                    }
                    else
                    {
                        setEnabled(CRUDButtonPanel.Button.Modify, true);
                        setEnabled(CRUDButtonPanel.Button.Delete, true);
                    }
                    setEnabled(CRUDButtonPanel.Button.Select, true);
                }
            }
        }
    }


}

/*

Java Web Start 1.6.0_04
Using JRE version 1.6.0_04 Java HotSpot(TM) Client VM
User home directory = C:\Documents and Settings\miro
----------------------------------------------------
c:   clear console window
f:   finalize objects on finalization queue
g:   garbage collect
h:   display this help message
m:   print memory usage
o:   trigger logging
p:   reload proxy configuration
q:   hide console
r:   reload policy configuration
s:   dump system and deployment properties
t:   dump thread list
v:   dump thread stack
0-5: set trace level to <n>
----------------------------------------------------
CRUDButtonPanel.TableSelectionListener.valueChanged.event: javax.swing.event.ListSelectionEvent[ source=javax.swing.DefaultListSelectionModel 31811005 ={1} firstIndex= -1 lastIndex= 1 isAdjusting= false ]
java.lang.Throwable
    at com.cosmos.acacia.gui.CRUDButtonPanel$TableSelectionListener.valueChanged(CRUDButtonPanel.java:304)
    at javax.swing.DefaultListSelectionModel.fireValueChanged(Unknown Source)
    at javax.swing.DefaultListSelectionModel.fireValueChanged(Unknown Source)
    at javax.swing.DefaultListSelectionModel.setValueIsAdjusting(Unknown Source)
    at org.jdesktop.swingx.decorator.DefaultSelectionMapper.setEnabled(DefaultSelectionMapper.java:149)
    at org.jdesktop.swingx.decorator.DefaultSelectionMapper.mapTowardsView(DefaultSelectionMapper.java:139)
    at org.jdesktop.swingx.decorator.DefaultSelectionMapper$1.contentsChanged(DefaultSelectionMapper.java:267)
    at org.jdesktop.swingx.decorator.FilterPipeline.fireContentsChanged(FilterPipeline.java:556)
    at org.jdesktop.swingx.decorator.FilterPipeline.filterChanged(FilterPipeline.java:374)
    at org.jdesktop.swingx.decorator.Filter.fireFilterChanged(Filter.java:354)
    at org.jdesktop.swingx.decorator.Filter.refresh(Filter.java:343)
    at org.jdesktop.swingx.decorator.Filter.refresh(Filter.java:73)
    at org.jdesktop.swingx.decorator.FilterPipeline.flush(FilterPipeline.java:499)
    at org.jdesktop.swingx.JXTable.use(JXTable.java:1697)
    at org.jdesktop.swingx.JXTable.tableChanged(JXTable.java:1510)
    at org.jdesktop.swingbinding.JTableBinding$BindingTableModel.fireTableModelEvent(JTableBinding.java:876)
    at org.jdesktop.swingbinding.JTableBinding$BindingTableModel.valueChanged(JTableBinding.java:829)
    at org.jdesktop.swingbinding.impl.ListBindingManager$ColumnDescriptionManager.wrapperChanged(ListBindingManager.java:199)
    at org.jdesktop.swingbinding.impl.ListBindingManager$ColumnDescriptionManager$EntryWrapper.propertyStateChanged(ListBindingManager.java:240)
    at org.jdesktop.beansbinding.PropertyHelper.firePropertyStateChange(PropertyHelper.java:212)
    at org.jdesktop.beansbinding.ELProperty.notifyListeners(ELProperty.java:688)
    at org.jdesktop.beansbinding.ELProperty.access$800(ELProperty.java:155)
    at org.jdesktop.beansbinding.ELProperty$SourceEntry.processSourceChanged(ELProperty.java:312)
    at org.jdesktop.beansbinding.ELProperty$SourceEntry.sourceChanged(ELProperty.java:326)
    at org.jdesktop.beansbinding.ELProperty$SourceEntry.propertyChange(ELProperty.java:333)
    at java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    at java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    at com.cosmos.acacia.crm.data.DataObjectBean.firePropertyChange(DataObjectBean.java:39)
    at com.cosmos.acacia.crm.data.Product.setProductName(Product.java:227)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at org.jdesktop.el.BeanELResolver.setValue(BeanELResolver.java:330)
    at org.jdesktop.beansbinding.TempELContext$BeanDelegateELResolver.setValue(TempELContext.java:87)
    at org.jdesktop.el.CompositeELResolver.setValue(CompositeELResolver.java:265)
    at org.jdesktop.el.impl.parser.AstIdentifier.setValue(AstIdentifier.java:81)
    at org.jdesktop.el.impl.ValueExpressionImpl.setValue(ValueExpressionImpl.java:262)
    at org.jdesktop.beansbinding.ELProperty.setValue(ELProperty.java:505)
    at org.jdesktop.beansbinding.Binding.saveUnmanaged(Binding.java:1275)
    at org.jdesktop.beansbinding.Binding.save(Binding.java:1254)
    at org.jdesktop.beansbinding.AutoBinding.trySaveThenRefresh(AutoBinding.java:176)
    at org.jdesktop.beansbinding.AutoBinding.targetChangedImpl(AutoBinding.java:249)
    at org.jdesktop.beansbinding.Binding.targetChanged(Binding.java:1433)
    at org.jdesktop.beansbinding.Binding.access$1300(Binding.java:38)
    at org.jdesktop.beansbinding.Binding$PSL.propertyStateChanged(Binding.java:1620)
    at org.jdesktop.beansbinding.PropertyHelper.firePropertyStateChange(PropertyHelper.java:212)
    at org.jdesktop.beansbinding.BeanProperty.notifyListeners(BeanProperty.java:707)
    at org.jdesktop.beansbinding.BeanProperty.access$1000(BeanProperty.java:138)
    at org.jdesktop.beansbinding.BeanProperty$SourceEntry.cachedValueChanged(BeanProperty.java:364)
    at org.jdesktop.beansbinding.BeanProperty$SourceEntry.propertyValueChanged(BeanProperty.java:404)
    at org.jdesktop.beansbinding.BeanProperty$SourceEntry.propertyChange(BeanProperty.java:409)
    at java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    at java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    at org.jdesktop.swingbinding.adapters.BeanAdapterBase.firePropertyChange(BeanAdapterBase.java:112)
    at org.jdesktop.swingbinding.adapters.JTextComponentAdapterProvider$Adapter$Handler.updateText(JTextComponentAdapterProvider.java:136)
    at org.jdesktop.swingbinding.adapters.JTextComponentAdapterProvider$Adapter$Handler.textChanged(JTextComponentAdapterProvider.java:149)
    at org.jdesktop.swingbinding.adapters.JTextComponentAdapterProvider$Adapter$Handler.replace(JTextComponentAdapterProvider.java:182)
    at javax.swing.text.AbstractDocument.replace(Unknown Source)
    at javax.swing.text.JTextComponent.replaceSelection(Unknown Source)
    at javax.swing.text.DefaultEditorKit$DefaultKeyTypedAction.actionPerformed(Unknown Source)
    at javax.swing.SwingUtilities.notifyAction(Unknown Source)
    at javax.swing.JComponent.processKeyBinding(Unknown Source)
    at javax.swing.JComponent.processKeyBindings(Unknown Source)
    at javax.swing.JComponent.processKeyEvent(Unknown Source)
    at java.awt.Component.processEvent(Unknown Source)
    at java.awt.Container.processEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.KeyboardFocusManager.redispatchEvent(Unknown Source)
    at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(Unknown Source)
    at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(Unknown Source)
    at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(Unknown Source)
    at java.awt.DefaultKeyboardFocusManager.dispatchEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Window.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.Dialog$1.run(Unknown Source)
    at java.awt.Dialog$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.awt.Dialog.show(Unknown Source)
    at java.awt.Component.show(Unknown Source)
    at java.awt.Component.setVisible(Unknown Source)
    at java.awt.Window.setVisible(Unknown Source)
    at java.awt.Dialog.setVisible(Unknown Source)
    at com.cosmos.swingb.JBPanel.showDialog(JBPanel.java:137)
    at com.cosmos.acacia.crm.gui.ProductsListPanel$ProductsButtonActionsListener.modifyAction(ProductsListPanel.java:351)
    at com.cosmos.acacia.gui.CRUDButtonPanel.modifyAction(CRUDButtonPanel.java:182)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at org.jdesktop.application.ApplicationAction.noProxyActionPerformed(ApplicationAction.java:662)
    at org.jdesktop.application.ApplicationAction.actionPerformed(ApplicationAction.java:698)
    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
    at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source)
    at java.awt.Component.processMouseEvent(Unknown Source)
    at javax.swing.JComponent.processMouseEvent(Unknown Source)
    at java.awt.Component.processEvent(Unknown Source)
    at java.awt.Container.processEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Window.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)
selectedObject: com.cosmos.acacia.crm.data.Product[productId=1203257778172, productName=My 1st manual product & 2nd up]:v.3
canModify: com.cosmos.acacia.crm.data.DataObject[dataObjectId=1203257778172]
canDelete: com.cosmos.acacia.crm.data.DataObject[dataObjectId=1203257778172]

*/