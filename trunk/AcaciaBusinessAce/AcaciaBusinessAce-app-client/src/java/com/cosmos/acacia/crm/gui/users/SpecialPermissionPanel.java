/*
 * RightsPanel.java
 *
 * Created on 25 July 2008, 17:36
 */
package com.cosmos.acacia.crm.gui.users;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigInteger;
import java.util.List;

import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

import com.cosmos.acacia.crm.bl.users.UserRightsRemote;
import com.cosmos.acacia.crm.data.DataObjectBean;
import com.cosmos.acacia.crm.data.DataObjectType;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.Right;
import com.cosmos.acacia.crm.data.UserRight;
import com.cosmos.acacia.crm.gui.DataObjectTypesListPanel;
import com.cosmos.acacia.gui.AcaciaToStringConverter;
import com.cosmos.acacia.gui.BaseEntityPanel;
import com.cosmos.acacia.gui.EntityFormButtonPanel;
import com.cosmos.beansbinding.EntityProperties;
import com.cosmos.beansbinding.PropertyDetails;
import com.cosmos.swingb.DialogResponse;

/**
 *
 * @author  Bozhidar Bozhanov
 */
public class SpecialPermissionPanel extends BaseEntityPanel {

    /** Creates new form RightsPanel */
    public SpecialPermissionPanel(Right right) {
        super((BigInteger) null);
        this.right = right;
        init();
    }

    @Override
    protected void init() {
        initComponents();
        super.init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataObjectTypeLabel = new com.cosmos.swingb.JBLabel();
        dataObjectLabel = new com.cosmos.swingb.JBLabel();
        entityFormButtonPanel = new com.cosmos.acacia.gui.EntityFormButtonPanel();
        dataObjectTypeComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        dataObjectComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();
        permissionLabel = new com.cosmos.swingb.JBLabel();
        permissionComboBox = new com.cosmos.acacia.gui.AcaciaComboBox();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(SpecialPermissionPanel.class);
        dataObjectTypeLabel.setText(resourceMap.getString("dataObjectTypeLabel.text")); // NOI18N
        dataObjectTypeLabel.setName("dataObjectTypeLabel"); // NOI18N

        dataObjectLabel.setText(resourceMap.getString("dataObjectLabel.text")); // NOI18N
        dataObjectLabel.setName("dataObjectLabel"); // NOI18N

        entityFormButtonPanel.setName("entityFormButtonPanel"); // NOI18N

        dataObjectTypeComboBox.setName("dataObjectTypeComboBox"); // NOI18N

        dataObjectComboBox.setName("dataObjectComboBox"); // NOI18N

        permissionLabel.setText(resourceMap.getString("permissionLabel.text")); // NOI18N
        permissionLabel.setName("permissionLabel"); // NOI18N

        permissionComboBox.setName("permissionComboBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dataObjectTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(dataObjectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataObjectTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataObjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(permissionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(permissionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(permissionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(permissionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dataObjectTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataObjectTypeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataObjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataObjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entityFormButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.acacia.gui.AcaciaComboBox dataObjectComboBox;
    private com.cosmos.swingb.JBLabel dataObjectLabel;
    private com.cosmos.acacia.gui.AcaciaComboBox dataObjectTypeComboBox;
    private com.cosmos.swingb.JBLabel dataObjectTypeLabel;
    private com.cosmos.acacia.gui.EntityFormButtonPanel entityFormButtonPanel;
    private com.cosmos.acacia.gui.AcaciaComboBox permissionComboBox;
    private com.cosmos.swingb.JBLabel permissionLabel;
    // End of variables declaration//GEN-END:variables
    private UserRightsRemote formSession;
    private Right right;
    private BindingGroup bindingGroup;

    @Override
    protected void initData() {
        BindingGroup bg = getBindingGroup();
        EntityProperties entityProps = getFormSession().getUserRightEntityProperties();

        permissionComboBox.bind(bg, getSpecialPermissions(), right, entityProps.getPropertyDetails("specialPermission"));

        AcaciaToStringConverter converter = new AcaciaToStringConverter("${dataObjectType}");
        PropertyDetails pDetails = entityProps.getPropertyDetails("dataObjectType");
        dataObjectTypeComboBox.bind(bg,
                getDataObjectTypes(),
                right,
                pDetails,
                converter);
        AutoCompleteDecorator.decorate(dataObjectTypeComboBox, converter);

        bg.bind();

        AcaciaToStringConverter dobConverter = new AcaciaToStringConverter("${info}");
        dataObjectComboBox.setConverter(dobConverter);
        updateDataObjectComboBox((DataObjectType) dataObjectTypeComboBox.getSelectedItem());
        AutoCompleteDecorator.decorate(dataObjectComboBox, dobConverter);

        dataObjectTypeComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    Object item = e.getItem();
                    if (item instanceof DataObjectType) {
                        updateDataObjectComboBox((DataObjectType) item);
                    }
                }
            }
        });
    }

    private void updateDataObjectComboBox(DataObjectType type) {
        dataObjectComboBox.removeAllItems();
        List<DataObjectBean> dataObjectBeans = getDataObjectBeans(type);

        boolean isPreChosen = false;
        for (DataObjectBean dob : dataObjectBeans) {
            dataObjectComboBox.addItem(dob);

            if (dob.equals(right.getDataObject())) {
                dataObjectComboBox.setSelectedItem(dob);
                isPreChosen = true;
            }
        }

        if (!isPreChosen) {
            dataObjectComboBox.setSelectedIndex(-1);
        }

    }

    protected UserRightsRemote getFormSession() {
        if (formSession == null) {
            formSession = getBean(UserRightsRemote.class);
        }

        return formSession;
    }

    private List<DbResource> getSpecialPermissions() {
        return getFormSession().getSpecialPermissions();
    }

    private List<DataObjectBean> getDataObjectBeans(DataObjectType dataObjectType) {
        List<DataObjectBean> dataObjectBeans =
                getFormSession().getDataObjectBeans(dataObjectType);

        return dataObjectBeans;
    }

    private List<DataObjectType> getDataObjectTypes() {
        return DataObjectTypesListPanel.shortenDataObjectTypeNames(getFormSession().getDataObjectTypes());
    }

    @Override
    public BindingGroup getBindingGroup() {
        if (bindingGroup == null) {
            bindingGroup = new BindingGroup();
        }

        return bindingGroup;
    }

    @Override
    public EntityFormButtonPanel getButtonPanel() {
        return entityFormButtonPanel;
    }

    @Override
    public Object getEntity() {
        return right;
    }

    @Override
    public void performSave(boolean closeAfter) {
        DataObjectBean dob = (DataObjectBean) dataObjectComboBox.getSelectedItem();
        if (dob != null) {
            right.setDataObject(dob.getDataObject());
            right.setObjectInfo(dob.getInfo());
        }

        setSelectedValue(right);
        setDialogResponse(DialogResponse.SAVE);
        close();
    }
}
