/*
 * InsertFromDocumentForm.java
 *
 * Created on Петък, 2008, Юли 11, 12:09
 */

package com.cosmos.acacia.crm.gui.purchaseorders;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.UUID;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;

import com.cosmos.acacia.crm.bl.purchaseorder.PurchaseOrderListRemote;
import com.cosmos.acacia.crm.data.DbResource;
import com.cosmos.acacia.crm.data.sales.Invoice;
import com.cosmos.acacia.crm.data.sales.InvoiceItem;
import com.cosmos.acacia.crm.data.purchase.PurchaseOrderItem;
import com.cosmos.acacia.crm.data.product.SimpleProduct;
import com.cosmos.acacia.crm.data.warehouse.WarehouseProduct;
import com.cosmos.acacia.crm.gui.purchaseorders.PurchaseOrderItemListPanel.DummyInvoice;
import com.cosmos.acacia.gui.AcaciaPanel;
import com.cosmos.swingb.DialogResponse;

/**
 * 
 * Created	:	23.07.2008
 * @author	Petar Milev
 *
 */
public class OrderItemsCopyForm extends AcaciaPanel {
    
    private PurchaseOrderItemListPanel orderItemsPanel;
    private List<DummyInvoice> dummyInvoices;

    /** Creates new form InsertFromDocumentForm 
     * @param dummyInvoices */
    public OrderItemsCopyForm(UUID parentId, PurchaseOrderItemListPanel orderItemsPanel, List<DummyInvoice> dummyInvoices) {
        super(parentId);
        if ( orderItemsPanel==null )
            throw new IllegalArgumentException("cant be null: 'orderItemsPanel'");
        this.orderItemsPanel = orderItemsPanel;
        this.dummyInvoices = dummyInvoices;
        initComponents();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        copyButton = new com.cosmos.swingb.JBButton();
        closeButton = new com.cosmos.swingb.JBButton();
        jBLabel3 = new com.cosmos.swingb.JBLabel();
        invoiceField = new com.cosmos.acacia.gui.AcaciaComboList();
        invoiceItemsHolderPanel = new com.cosmos.acacia.gui.TableHolderPanel();
        orderItemsHolderPanel = new com.cosmos.acacia.gui.TableHolderPanel();

        setName("Form"); // NOI18N

        copyButton.setMnemonic('A');
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.cosmos.acacia.crm.gui.AcaciaApplication.class).getContext().getResourceMap(OrderItemsCopyForm.class);
        copyButton.setText(resourceMap.getString("copyButton.text")); // NOI18N
        copyButton.setToolTipText(resourceMap.getString("copyButton.toolTipText")); // NOI18N
        copyButton.setName("copyButton"); // NOI18N

        closeButton.setIcon(resourceMap.getIcon("closeButton.icon")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        jBLabel3.setText(resourceMap.getString("jBLabel3.text")); // NOI18N
        jBLabel3.setName("jBLabel3"); // NOI18N

        invoiceField.setName("invoiceField"); // NOI18N

        invoiceItemsHolderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("invoiceItemsHolderPanel.border.title"))); // NOI18N
        invoiceItemsHolderPanel.setName("invoiceItemsHolderPanel"); // NOI18N

        javax.swing.GroupLayout invoiceItemsHolderPanelLayout = new javax.swing.GroupLayout(invoiceItemsHolderPanel);
        invoiceItemsHolderPanel.setLayout(invoiceItemsHolderPanelLayout);
        invoiceItemsHolderPanelLayout.setHorizontalGroup(
            invoiceItemsHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 977, Short.MAX_VALUE)
        );
        invoiceItemsHolderPanelLayout.setVerticalGroup(
            invoiceItemsHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 339, Short.MAX_VALUE)
        );

        orderItemsHolderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("orderItemsHolderPanel.border.title"))); // NOI18N
        orderItemsHolderPanel.setName("orderItemsHolderPanel"); // NOI18N

        javax.swing.GroupLayout orderItemsHolderPanelLayout = new javax.swing.GroupLayout(orderItemsHolderPanel);
        orderItemsHolderPanel.setLayout(orderItemsHolderPanelLayout);
        orderItemsHolderPanelLayout.setHorizontalGroup(
            orderItemsHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 977, Short.MAX_VALUE)
        );
        orderItemsHolderPanelLayout.setVerticalGroup(
            orderItemsHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoiceItemsHolderPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(invoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(orderItemsHolderPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(423, 423, 423)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invoiceItemsHolderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderItemsHolderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.cosmos.swingb.JBButton closeButton;
    private com.cosmos.swingb.JBButton copyButton;
    private com.cosmos.acacia.gui.AcaciaComboList invoiceField;
    private com.cosmos.acacia.gui.TableHolderPanel invoiceItemsHolderPanel;
    private com.cosmos.swingb.JBLabel jBLabel3;
    private com.cosmos.acacia.gui.TableHolderPanel orderItemsHolderPanel;
    // End of variables declaration//GEN-END:variables
    
    private CopyItemsListPanel copyItemsPanel;
    @Override
    protected void initData() {
        
        setDialogResponse(DialogResponse.CANCEL);
        
        //supplier
        //InvoicesListPanel listPanel = new InvoicesListPanel(getOrganizationDataObjectId());
        List<Invoice> invoices = getInvoicesList(dummyInvoices);
//        DummyInvoicesListDialog listDialog = new DummyInvoicesListDialog(invoices);
//        invoiceField.initUnbound(listDialog, "${invoiceNumber} - ${recipient.displayName}");
//        invoiceField.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//                onInvoiceChanged((Invoice)e.getItem());
//            }
//        });
//        
//        bind(
//            bindGroup,
//            listPanel,
//            entity,
//            entProps.getEntityProperty("supplier"),
//            "${recipient.displayName} - ${invoiceNumber}",
//            UpdateStrategy.READ_WRITE);
        
        copyItemsPanel = new CopyItemsListPanel(null);
        copyItemsPanel.setVisibleButtons(0);
        copyItemsPanel.getDataTable().setSelectionMode(DefaultListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
        invoiceItemsHolderPanel.add(copyItemsPanel);
        
        orderItemsHolderPanel.add(orderItemsPanel);
        
        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        
        copyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCopyButton();
            }
        });
    }
    

    Set<InvoiceItem> addedItems = new HashSet<InvoiceItem>();
    
    /**
     * 
     */
    @SuppressWarnings("unchecked")
    protected void onCopyButton() {
        List<InvoiceItem> selectedItems = copyItemsPanel.getDataTable().getSelectedRowObjects();
        if ( selectedItems==null || selectedItems.isEmpty() )
            return;
        
        boolean alreadyAdded = false;
        for (InvoiceItem invoiceItem : selectedItems) {
            if ( addedItems.contains(invoiceItem) ){
                alreadyAdded = true;
                break;
            }
        }
        
        try{
            if ( alreadyAdded ){
                if ( showAlreadyAddedWarning() ){
                    addItems(selectedItems);
                }
            }else{
                addItems(selectedItems);
            }
            
            setDialogResponse(DialogResponse.SAVE);
        }catch (Exception ex){
            handleBusinessException(ex);
        }
    }
    
    private PurchaseOrderListRemote purchaseOrderListRemote = getBean(PurchaseOrderListRemote.class);

    private void addItems(List<InvoiceItem> items) {
        List<PurchaseOrderItem> orderItems = new ArrayList<PurchaseOrderItem>();
        for (InvoiceItem invoiceItem : items) {
            PurchaseOrderItem orderItem = getOrderItemForInvoiceItem(invoiceItem);
            //add only the needed quantity (the quantity that is still not shipped)
            BigDecimal addQuantity = invoiceItem.getOrderedQuantity().subtract(invoiceItem.getShippedQuantity());
            orderItem.setOrderedQuantity(orderItem.getOrderedQuantity().add(addQuantity));
            orderItems.add(orderItem);
        }
        
        purchaseOrderListRemote.saveOrderItems(orderItems);
        orderItemsPanel.refreshAction();
        
        addedItems.addAll(items);
    }

    @SuppressWarnings("unchecked")
    private PurchaseOrderItem getOrderItemForInvoiceItem(InvoiceItem invoiceItem) {
        List<PurchaseOrderItem> currentOrderItems = orderItemsPanel.getDataTable().getData();
        PurchaseOrderItem orderItem = null;
        for (PurchaseOrderItem purchaseOrderItem : currentOrderItems) {
            //find for this product
            if ( purchaseOrderItem.getProduct().equals(invoiceItem.getProduct()) ){
                orderItem = purchaseOrderItem;
                break;
            }
        }
        
        //create new item
        if ( orderItem==null ){
            orderItem = purchaseOrderListRemote.newOrderItem(getParentDataObjectId());
            if ( orderItem.getOrderedQuantity()==null )
                orderItem.setOrderedQuantity(new BigDecimal(0));
            SimpleProduct product = (SimpleProduct) invoiceItem.getProduct();
            orderItem.setProduct(product);
            
            //get the measurement unit from the invoice item
            DbResource measureMentUnit = invoiceItem.getMeasureUnit();
            orderItem.setMeasureUnit(measureMentUnit);
            
            //get the purchase price from product and warehouse product
            WarehouseProduct warehouseProduct = purchaseOrderListRemote.getWarehouseProduct(product);
            BigDecimal purchasePrice = product.getPurchasePrice();
            if ( warehouseProduct!=null ){
                if ( warehouseProduct.getPurchasePrice()!=null )
                    purchasePrice = warehouseProduct.getPurchasePrice();
            }
            orderItem.setPurchasePrice(purchasePrice);
        //already an item for this product - nothing to do
        }else{
            //nothing specific
        }
        
        return orderItem;
    }

    private boolean showAlreadyAddedWarning() {
        int result = JOptionPane.showConfirmDialog(
            this.getParent(),
            getResourceMap().getString("copyAction.alreadyAdded.message"),
            getResourceMap().getString("copyAction.alreadyAdded.title"),
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
    if(JOptionPane.YES_OPTION == result)
    {
        return true;
    }
    return false;
    }

    private List<Invoice> getInvoicesList(List<DummyInvoice> dInvoices) {
        List<Invoice> result = new ArrayList<Invoice>();
        for (DummyInvoice dummyInvoice : dInvoices) {
            result.add(dummyInvoice.invoice);
        }
        return result;
    }

    protected void onInvoiceChanged(Invoice invoice) {
        List<InvoiceItem> items = getDummyItems(invoice);
        copyItemsPanel.refreshList(items);
    }
    
    private List<InvoiceItem> getDummyItems(Invoice invoice) {
        for (DummyInvoice di : dummyInvoices) {
            if ( di.invoice==invoice )
                return di.items;
        }
        return new ArrayList<InvoiceItem>();
    }

}
